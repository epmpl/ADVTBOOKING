using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class CurrencyMaster : System.Web.UI.Page
{
    string currcode,message;
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void blankSession()
    {
        Session["currencysave"] = null;
    }
    protected void Page_Load(object sender, System.EventArgs e)
    {
        // Put user code to initialize the page here

        Response.Expires = -1;
     
 
        if (Session["compcode"] != null)
        {
            hiddencompcode.Value = Session["compcode"].ToString();
            hiddenuserid.Value = Session["userid"].ToString();
            hiddenusername.Value = Session["Username"].ToString();
            hiddenauto.Value = Session["autogenerated"].ToString();
            hiddendateformat.Value = Session["dateformat"].ToString();

        }
        else
        {
            Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            return;
        }

        Ajax.Utility.RegisterTypeForAjax(typeof(CurrencyMaster));

        hiddenusername.Value = Session["Username"].ToString();
        

        navigation();
        lbconrate.Enabled = false;
        btnNew.Focus();

        //****work done by shweta***********************************************************
        //******************************XML FOR BUTTON**************************************
        DataSet ds = new DataSet();
        ds.ReadXml(Server.MapPath("XML/button.xml"));

        btnNew.ImageUrl = ds.Tables[0].Rows[0].ItemArray[0].ToString();
        btnSave.ImageUrl = ds.Tables[0].Rows[0].ItemArray[1].ToString();
        btnModify.ImageUrl = ds.Tables[0].Rows[0].ItemArray[2].ToString();
        btnQuery.ImageUrl = ds.Tables[0].Rows[0].ItemArray[3].ToString();
        btnExecute.ImageUrl = ds.Tables[0].Rows[0].ItemArray[4].ToString();
        btnCancel.ImageUrl = ds.Tables[0].Rows[0].ItemArray[5].ToString();
        btnfirst.ImageUrl = ds.Tables[0].Rows[0].ItemArray[6].ToString();
        btnprevious.ImageUrl = ds.Tables[0].Rows[0].ItemArray[7].ToString();
        btnnext.ImageUrl = ds.Tables[0].Rows[0].ItemArray[8].ToString();
        btnlast.ImageUrl = ds.Tables[0].Rows[0].ItemArray[9].ToString();
        btnDelete.ImageUrl = ds.Tables[0].Rows[0].ItemArray[10].ToString();
        btnExit.ImageUrl = ds.Tables[0].Rows[0].ItemArray[11].ToString();

        //******************************XML for labels****************************************
        DataSet ds1 = new DataSet();
        ds1.ReadXml(Server.MapPath("XML/CurrencyMaster.xml"));
        CurrencyCode.Text = ds1.Tables[0].Rows[0].ItemArray[0].ToString() ;
        CurrencyName.Text = ds1.Tables[0].Rows[0].ItemArray[1].ToString();
        Alias.Text = ds1.Tables[0].Rows[0].ItemArray[2].ToString() ;
        CountryName.Text = ds1.Tables[0].Rows[0].ItemArray[3].ToString();
        SYMBOL_P.Text = ds1.Tables[0].Rows[0].ItemArray[5].ToString();
        currsymbol.Text = ds1.Tables[0].Rows[0].ItemArray[6].ToString();

        //*************************XML for link button**********************************************
        lbconrate.Text = ds1.Tables[0].Rows[0].ItemArray[4].ToString();
        countrybind();
        if (!Page.IsPostBack)
        {
            Session["currencysave"] = null;

            lbconrate.Attributes.Add("OnClick", "javascript:return openrate();");
            btnNew.Attributes.Add("OnClick", "javascript:return newclick();");
            btnModify.Attributes.Add("OnClick", "javascript:return modifyclick();");
            btnQuery.Attributes.Add("OnClick", "javascript:return queryclick();");
            btnCancel.Attributes.Add("OnClick", "javascript:return cancelclick('CurrencyMaster');");
            btnExit.Attributes.Add("OnClick", "javascript:return exitclick();");
            btnSave.Attributes.Add("OnClick", "javascript:return saveclick();");
            btnExecute.Attributes.Add("OnClick", "javascript:return executeclick();");
            btnfirst.Attributes.Add("OnClick", "javascript:return firstclick();");
            btnlast.Attributes.Add("OnClick", "javascript:return lastclick();");
            btnprevious.Attributes.Add("OnClick", "javascript:return previousclick();");
            btnnext.Attributes.Add("OnClick", "javascript:return nextclick();");
            btnDelete.Attributes.Add("OnClick", "javascript:return deleteclick();");

            txtcurrcode.Attributes.Add("OnChange", "javascript:return chkdupCurr();");
            txtalias.Attributes.Add("OnBlur", "javascript:return capsAlias();");
            txtcurrname.Attributes.Add("OnChange", "javascript:return autoornot();");
            drpcountryname.Attributes.Add("OnChange", "javascript:return autoornot();");
            drpcountryname.Attributes.Add("onkeypress", "return keySort(this);");
       
       
            //txtalias.Attributes.Add("OnChange", "javascript:return uppercase('txtalias');");

        }
        if (btnNew.Enabled == false)
            btnNew.ImageUrl = ds.Tables[1].Rows[0].ItemArray[0].ToString();
        if (btnSave.Enabled == false)
            btnSave.ImageUrl = ds.Tables[1].Rows[0].ItemArray[1].ToString();
        if (btnModify.Enabled == false)
            btnModify.ImageUrl = ds.Tables[1].Rows[0].ItemArray[2].ToString();
        if (btnQuery.Enabled == false)
            btnQuery.ImageUrl = ds.Tables[1].Rows[0].ItemArray[3].ToString();
        if (btnExecute.Enabled == false)
            btnExecute.ImageUrl = ds.Tables[1].Rows[0].ItemArray[4].ToString();
        if (btnCancel.Enabled == false)
            btnCancel.ImageUrl = ds.Tables[1].Rows[0].ItemArray[5].ToString();
        if (btnfirst.Enabled == false)
            btnfirst.ImageUrl = ds.Tables[1].Rows[0].ItemArray[6].ToString();
        if (btnprevious.Enabled == false)
            btnprevious.ImageUrl = ds.Tables[1].Rows[0].ItemArray[7].ToString();
        if (btnnext.Enabled == false)
            btnnext.ImageUrl = ds.Tables[1].Rows[0].ItemArray[8].ToString();
        if (btnlast.Enabled == false)
            btnlast.ImageUrl = ds.Tables[1].Rows[0].ItemArray[9].ToString();
        if (btnDelete.Enabled == false)
            btnDelete.ImageUrl = ds.Tables[1].Rows[0].ItemArray[10].ToString();
        if (btnExit.Enabled == false)
            btnExit.ImageUrl = ds.Tables[1].Rows[0].ItemArray[11].ToString();
        btnNew.Focus();
    }

    public void countrybind()
    {
        DataSet ds = new DataSet();
        drpcountryname.Items.Clear();
        if(ConfigurationSettings.AppSettings ["ConnectionType"].ToString ()=="sql" )
        {        
        NewAdbooking.Classes.currencymaster countbind = new NewAdbooking.Classes.currencymaster();      
        ds = countbind.bindcount(Session["compcode"].ToString(), Session["userid"].ToString());
        }

        else
            if(ConfigurationSettings.AppSettings ["ConnectionType"].ToString ()=="orcl")
            {
                NewAdbooking.classesoracle.currencymaster countbind = new NewAdbooking.classesoracle.currencymaster();
                ds = countbind.bindcount(Session["compcode"].ToString(), Session["userid"].ToString());
            }
        else
        {
            NewAdbooking.classmysql.currencymaster countbind = new NewAdbooking.classmysql.currencymaster();
            ds = countbind.bindcount(Session["compcode"].ToString(), Session["userid"].ToString());
        }
        
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-----Select Country-----";
        li1.Value = "0";
        li1.Selected = true;
        drpcountryname.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();

                drpcountryname.Items.Add(li);
            }

        }


    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
        //
        // CODEGEN: This call is required by the ASP.NET Web Form Designer.
        //
        InitializeComponent();
        base.OnInit(e);
    }

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {

    }
    #endregion

    [Ajax.AjaxMethod]
    public DataSet checkcode(string code, string compcode, string userid)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { code, compcode, userid };
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster chkcode = new NewAdbooking.Classes.currencymaster();
            ds = chkcode.chkcurrcode(code, compcode, userid);
            //
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
               
                NewAdbooking.classesoracle.currencymaster chkcode = new NewAdbooking.classesoracle.currencymaster();
                ds = chkcode.chkcurrcode(code, compcode, userid);
               // return ds;
            }
            else
            {
                string procedureName = "CHKCURRCODE_CHKCURRCODE_PP";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
                //NewAdbooking.classmysql.currencymaster savecurr = new NewAdbooking.classmysql.currencymaster();
                //ds = savecurr.currsave(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid);
            }
        //else
        //{
        //    NewAdbooking.classmysql.currencymaster chkcode = new NewAdbooking.classmysql.currencymaster();
        //    ds = chkcode.chkcurrcode(code, compcode, userid);
        //    return ds;
        //}
        return ds;
    }

    [Ajax.AjaxMethod]  
    //string txtcurcd, string txtcurnm, string tctcralias, string drctrynm, string compcode, string userid, string SYMBOL_P, string cursymbol)
    public void save(string compcode, string userid, string txtcurcd, string txtcurnm, string tctcralias, string drctrynm, string SYMBOL_P, string cursymbol)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] {  compcode, userid, txtcurcd, txtcurnm, tctcralias, drctrynm, SYMBOL_P, cursymbol };
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster savecurr = new NewAdbooking.Classes.currencymaster();
            ds = savecurr.currsave(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid, SYMBOL_P, cursymbol);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster savecurr = new NewAdbooking.classesoracle.currencymaster();
                ds = savecurr.currsave(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid, SYMBOL_P, cursymbol);
            }
        else
        {
            string procedureName = "insertcurrencymst_insertcurrencymst_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);            
            //NewAdbooking.classmysql.currencymaster savecurr = new NewAdbooking.classmysql.currencymaster();
            //ds = savecurr.currsave(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid);
        }
         //return ds;
    }

    [Ajax.AjaxMethod]
     //public DataSet execute(string txtcurcd, string txtcurnm, string tctcralias, string drctrynm, string compcode, string userid)
    public DataSet execute(string compcode, string userid, string txtcurcd, string txtcurnm, string tctcralias, string drctrynm)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { compcode, userid, txtcurcd, txtcurnm, tctcralias, "" };
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster executecurr = new NewAdbooking.Classes.currencymaster();

            ds = executecurr.executecurrmst(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster executecurr = new NewAdbooking.classesoracle.currencymaster();
                ds = executecurr.executecurrmst(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid );
                return ds;
            }
            else
            {
                string procedureName = "exeecutecurrencymast_exeecutecurrencymast_p";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);  
                return ds;
            }
        }

    [Ajax.AjaxMethod]
    public DataSet first()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster firstcurr = new NewAdbooking.Classes.currencymaster();            
            ds = firstcurr.firstcurrmst();
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster firstcurr = new NewAdbooking.classesoracle.currencymaster();
                ds = firstcurr.firstcurrmst();
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.currencymaster firstcurr = new NewAdbooking.classmysql.currencymaster();
            ds = firstcurr.firstcurrmst();
            return ds;
        }
    }

    [Ajax.AjaxMethod]
    //compcode,userid,txtcurrcode,txtcurrname,txtalias,drpcountryname,txtSYMBOL_P,cursymbol
        // public void modify(string txtcurcd, string txtcurnm, string tctcralias, string drctrynm, string compcode, string userid, string SYMBOL_P, string cursymbol)
    public void modify(string compcode, string userid, string txtcurcd, string txtcurnm, string tctcralias, string drctrynm, string SYMBOL_P, string cursymbol)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { compcode, userid, txtcurcd, txtcurnm, tctcralias, drctrynm, SYMBOL_P, cursymbol };
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster modifycurr = new NewAdbooking.Classes.currencymaster();
            ds = modifycurr.currmodify(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid, SYMBOL_P, cursymbol);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster modifycurr = new NewAdbooking.classesoracle.currencymaster();
                ds = modifycurr.currmodify(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid, SYMBOL_P, cursymbol);
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "MODIFYCURRMAST_MODIFYCURRMAST_P";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
               // return ds;
            }

            //else
            //{
            //    NewAdbooking.classmysql.currencymaster modifycurr = new NewAdbooking.classmysql.currencymaster();
            //    ds = modifycurr.currmodify(txtcurcd, txtcurnm, tctcralias, drctrynm, compcode, userid);
            //}
    }
     

    [Ajax.AjaxMethod]
    public DataSet deleteit(string code, string compcode, string userid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster deletecurr = new NewAdbooking.Classes.currencymaster();            
            ds = deletecurr.currdelete(code, compcode, userid);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster deletecurr = new NewAdbooking.classesoracle.currencymaster();
                ds = deletecurr.currdelete(code, compcode, userid);
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.currencymaster deletecurr = new NewAdbooking.classmysql.currencymaster();
            ds = deletecurr.currdelete(code, compcode, userid);
            return ds;
        }
    }

    [Ajax.AjaxMethod]
    public DataSet checkrate(string code, string compcode, string userid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster chkrate = new NewAdbooking.Classes.currencymaster();            
            ds = chkrate.checkratecode(code, compcode, userid);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster chkrate = new NewAdbooking.classesoracle.currencymaster();
                ds = chkrate.checkratecode(code, compcode, userid);
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.currencymaster chkrate = new NewAdbooking.classmysql.currencymaster();
            ds = chkrate.checkratecode(code, compcode, userid);
            return ds;
        }

    }

    public void navigation()
    {
        btnNew.Enabled = true;
        btnSave.Enabled = false;
        btnModify.Enabled = false;
        btnDelete.Enabled = false;
        btnQuery.Enabled = true;
        btnExecute.Enabled = false;
        btnCancel.Enabled = true;
        btnfirst.Enabled = false;
        btnprevious.Enabled = false;
        btnnext.Enabled = false;
        btnlast.Enabled = false;
        btnExit.Enabled = true;

    }
    [Ajax.AjaxMethod]
  
    //public DataSet insert(string compcode, string userid, string txtconrate, string txtfromdate, string txtefftill, string currcode, string currency, string txtunit)
    public void insert(string compcode, string userid, string txtconrate, string txtfromdate, string txtefftill, string currcode, string currency, string txtunit)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] {compcode, userid, txtconrate, txtfromdate, txtefftill, currcode, currency, txtunit };
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.currencymaster insertgrid = new NewAdbooking.Classes.currencymaster();           
           // ds = insertgrid.insertconverrate(txtconrate, txtfromdate, txtefftill, compcode, userid, currcode,"","");
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster insertgrid = new NewAdbooking.classesoracle.currencymaster();
             // ds = insertgrid.insertconverrate(txtconrate, txtfromdate, txtefftill, compcode, userid, currcode,"");
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "INSERTCONVERTRATE_INSERTCONVERTRATE_P";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
               // return ds;
            }
          
        //else
        //{
        //    NewAdbooking.classmysql.currencymaster insertgrid = new NewAdbooking.classmysql.currencymaster();
        //    ds = insertgrid.insertconverrate(txtconrate, txtfromdate, txtefftill, compcode, userid, currcode);
        //}ds = insertgrid.insertconverrate(compcode, userid, txtconrate, txtfromdate, txtefftill, currcode, currency, txtunit);


    }

    [Ajax.AjaxMethod]
    public DataSet chkcurrencycode(string str,string strctry)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster chk = new NewAdbooking.Classes.currencymaster();
            
            ds = chk.countcurrencycode(str, strctry);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster chk = new NewAdbooking.classesoracle.currencymaster();
                ds = chk.countcurrencycode(str, strctry);
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.currencymaster chk = new NewAdbooking.classmysql.currencymaster();
            ds = chk.countcurrencycode(str, strctry);
            return ds;
        }

    }
    [Ajax.AjaxMethod]
    public DataSet chkcurrencycodectry(string strctry)
    {
        DataSet ds = new DataSet();

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.currencymaster chk = new NewAdbooking.Classes.currencymaster();
            ds = chk.countcurrencycodectry(strctry);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster chk = new NewAdbooking.classesoracle.currencymaster();
                ds = chk.countcurrencycodectry(strctry);
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.currencymaster chk = new NewAdbooking.classmysql.currencymaster();
            ds = chk.countcurrencycodectry(strctry);
            return ds;
        }

    }


    protected void lbconrate_Click(object sender, EventArgs e)
    {

    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        string compcode = Session["compcode"].ToString();
        string userid = Session["userid"].ToString();
        string txtcurcode = TextBox1.Text;
        txtcurrcode.Text = TextBox1.Text;
        DataSet dschk = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.currencymaster chkcode = new NewAdbooking.Classes.currencymaster();
            dschk = chkcode.chkcurrcode(txtcurcode, compcode, userid);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.currencymaster chkcode = new NewAdbooking.classesoracle.currencymaster();
                dschk = chkcode.chkcurrcode(txtcurcode, compcode, userid);
            }

            else
            {
                NewAdbooking.classmysql.currencymaster chkcode = new NewAdbooking.classmysql.currencymaster();
                dschk = chkcode.chkcurrcode(txtcurcode, compcode, userid);

            }
        if (dschk.Tables[0].Rows.Count != 0)
        {
            txtcurrcode.Text = "";
            txtcurrname.Text = "";
            drpcountryname.SelectedValue = "0";
            txtalias.Text = "";

            return;
        }
        

                string txtcurname = txtcurrname.Text;
                string txtcalias = txtalias.Text;
              
                string drpcountryname1 = hiddencountry.Value;
                DataSet ds = new DataSet();
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
                {
                    NewAdbooking.Classes.currencymaster savecurr = new NewAdbooking.Classes.currencymaster();
                    //ds = savecurr.currsave(txtcurcode, txtcurname, txtcalias, drpcountryname1, compcode, userid);
                }
                else
                    if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                    {
                        NewAdbooking.classesoracle.currencymaster savecurr = new NewAdbooking.classesoracle.currencymaster();
                      // ds = savecurr.currsave(txtcurcode, txtcurname, txtcalias, drpcountryname1, compcode, userid);
                    }
                    else
                    {
                        NewAdbooking.classmysql.currencymaster savecurr = new NewAdbooking.classmysql.currencymaster();
                        ds = savecurr.currsave(txtcurcode, txtcurname, txtcalias, drpcountryname1, compcode, userid);
                    }
            


            txtcurrcode.Text = "";
            txtcurrname.Text = "";
            drpcountryname.SelectedValue = "0".ToString ();
            txtalias.Text = "";
            txtSYMBOL_P.Text = "";

            btnNew.Enabled = true;
            btnQuery.Enabled = true;
            btnCancel.Enabled = true;
            btnExit.Enabled = true;

            btnSave.Enabled = false;
            btnModify.Enabled = false;
            btnDelete.Enabled = false;
            btnExecute.Enabled = false;
            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
            //return;

             
        
                   
    }

    protected void AspNetMessageBox(string strMessage)
    {
        //strMessage = adminResource.GetStringFromResource(strMessage);
        string strAlert = "";
        strAlert = "alert('" + strMessage + "')";
        ScriptManager.RegisterClientScriptBlock(this, typeof(CurrencyMaster), "ShowAlert", strAlert, true);
    }
    protected void btnNew_Click(object sender, EventArgs e)
    {

    }
    protected void btnCancel_Click(object sender, EventArgs e)
    {
        Session["currencysave"] = null;
           
    }

    protected string getDate(string dateformat, string value)
    {
        if (dateformat == "dd/mm/yyyy")
        {
            string[] datearr = value.Split('/');
            string dd = datearr[0];
            string mm = datearr[1];
            string yy = datearr[2];
            value = mm + '/' + dd + '/' + yy;
        }
        return value;
    }
}