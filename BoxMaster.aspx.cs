using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class BoxMaster : System.Web.UI.Page
{
    string compcode, userid, dateformat;


    protected void Page_Load(object sender, System.EventArgs e)
    {

        Response.Expires = -1;
        Response.Buffer = true;
        Response.ExpiresAbsolute = DateTime.Now.AddDays(-1d);
        Response.Expires = -1500;
        Response.CacheControl = "no-cache";

        if (Session["compcode"] == null)
        {


            //Response.Redirect("login.aspx");
            Response.Write("<script>alert(\"Your Session Has Been Expired\");window.close();</script>");
            return;
        }
        ip1.Value = Request.ServerVariables["REMOTE_ADDR"];
        Ajax.Utility.RegisterTypeForAjax(typeof(BoxMaster));


        hiddenauto.Value = Session["autogenerated"].ToString();
        hiddenusername.Value = Session["Username"].ToString();
        
        compcode = Session["compcode"].ToString();
        hiddencompcode.Value = compcode;

        userid = Session["userid"].ToString();
        hiddenuserid.Value = userid;

        dateformat = Session["dateformat"].ToString();
        hiddendateformat.Value = dateformat;

       // editioncode();
       // pageloadbtn();

        DataSet objDataSetbu = new DataSet();
        // Read in the XML file
        objDataSetbu.ReadXml(Server.MapPath("XML/button.xml"));
        btnNew.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[0].ToString();
        btnSave.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[1].ToString();
        btnModify.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[2].ToString();
        btnQuery.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[3].ToString();
        btnExecute.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[4].ToString();
        btnCancel.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[5].ToString();
        btnfirst.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[6].ToString();
        btnprevious.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[7].ToString();
        btnnext.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[8].ToString();
        btnlast.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[9].ToString();
        btnDelete.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[10].ToString();
        btnExit.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[11].ToString();

        DataSet ds = new DataSet();
        ds.ReadXml(Server.MapPath("XML/BoxMaster.xml"));
        lblboxcode.Text = ds.Tables[0].Rows[0].ItemArray[0].ToString();
        lblboxdes.Text = ds.Tables[0].Rows[0].ItemArray[1].ToString();
        lblalias.Text = ds.Tables[0].Rows[0].ItemArray[2].ToString();
        lbldispatch.Text = ds.Tables[0].Rows[0].ItemArray[3].ToString();
        lblnative.Text = ds.Tables[0].Rows[0].ItemArray[4].ToString();
        lblinter.Text = ds.Tables[0].Rows[0].ItemArray[5].ToString();

        lblboxcharges.Text = ds.Tables[0].Rows[0].ItemArray[6].ToString();
        lblvalidfrom.Text = ds.Tables[0].Rows[0].ItemArray[7].ToString();
        lblvalidtill.Text = ds.Tables[0].Rows[0].ItemArray[8].ToString();
        lblremarks.Text = ds.Tables[0].Rows[0].ItemArray[9].ToString();
        lblpubcenter.Text = ds.Tables[0].Rows[0].ItemArray[10].ToString();
        lblcheckbox.Text = ds.Tables[0].Rows[0].ItemArray[11].ToString();



        if (ds.Tables.Count > 1)
        {
            if (ds.Tables[1].Rows[0].ItemArray[0].ToString() == "hide")
            {
                lblpubcenter.Attributes.Add("style", "display:none");
                drppubcenter.Attributes.Add("style", "display:none");
            }
            if (ds.Tables[1].Rows[0].ItemArray[1].ToString() == "hide")
            {
                lblalias.Attributes.Add("style", "display:none");
                txtalias.Attributes.Add("style", "display:none");
            }
            if (ds.Tables[1].Rows[0].ItemArray[2].ToString() == "hide")
            {
                lbldispatch.Attributes.Add("style", "display:none");
                txtdispatch.Attributes.Add("style", "display:none");
            }
            if (ds.Tables[1].Rows[0].ItemArray[3].ToString() == "hide")
            {
                lblinter.Attributes.Add("style", "display:none");
                txtinter.Attributes.Add("style", "display:none");
                lblnative.Text = ds.Tables[1].Rows[0].ItemArray[4].ToString();
            }
        }
        
        
        btnNew.Enabled = true;
        btnSave.Enabled = false;
        btnModify.Enabled = false;
        btnDelete.Enabled = false;
        btnQuery.Enabled = true;
        btnExecute.Enabled = false;
        btnCancel.Enabled = true;
        btnfirst.Enabled = false;
        btnprevious.Enabled = false;
        btnnext.Enabled = false;
        btnlast.Enabled = false;
        btnExit.Enabled = true;

        txtvalidfrom.Enabled = false;
        txtboxcode.Enabled = false;
        txtboxdes.Enabled = false;
        txtalias.Enabled = false;
        txtdispatch.Enabled = false;
        drpboxcharge.Enabled = false;
        txtnative.Enabled = false;
        txtinter.Enabled = false;
        txtremark.Enabled = false;
        txtvalidtill.Enabled = false;

        drppubcenter.Enabled = false;

        Ajax.Utility.RegisterTypeForAjax(typeof(BoxMaster));

        if (!Page.IsPostBack)
        {
            btnSave.Attributes.Add("OnClick", "javascript:return boxsave();");
            btnNew.Attributes.Add("OnClick", "javascript:return boxnew();");
            btnModify.Attributes.Add("OnClick", "javascript:return boxmodify();");
            btnQuery.Attributes.Add("OnClick", "javascript:return boxquery();");
            btnExecute.Attributes.Add("OnClick", "javascript:return boxexe();");
            btnfirst.Attributes.Add("OnClick", "javascript:return boxfirst();");
            btnprevious.Attributes.Add("OnClick", "javascript:return boxpre();");
            //btnnext.Attributes.Add("OnClick", "javascript:return boxnextt();");
            btnnext.Attributes.Add("OnClick", "javascript:return boxnextt();");
            btnlast.Attributes.Add("OnClick", "javascript:return boxlast();");
            btnCancel.Attributes.Add("OnClick", "javascript:return cancelbox('BoxMaster')");
            btnDelete.Attributes.Add("OnClick", "javascript:return deletebox()");
            txtboxcode.Attributes.Add("OnBlur", "javascript:return ClientUpperCase('txtboxcode')");
            txtboxdes.Attributes.Add("OnBlur", "javascript:return ClientUpperCase('txtboxdes')");
            txtalias.Attributes.Add("OnBlur", "javascript:return ClientUpperCase('txtalias')");
            txtremark.Attributes.Add("OnBlur", "javascript:return ClientUpperCase('txtremark')");
            txtvalidfrom.Attributes.Add("OnChange", "javascript:return checkdate(this)");
            txtvalidtill.Attributes.Add("OnChange", "javascript:return checkdate(this)");
            btnExit.Attributes.Add("OnClick", "javascript:return boxexit()");
            txtboxdes.Attributes.Add("OnBlur", "javascript:return autoornot();");
            txtnative.Attributes.Add("OnChange", "javascript:return checkdecnative();");
            txtinter.Attributes.Add("OnChange", "javascript:return checkdecinter();");
           // txtalias.Attributes.Add("OnBlur", "javascript:return uppercase1();");
            drpboxcharge.Attributes.Add("OnChange", "javascript:return clrcharg();");
            fillPubCenter();
            
        }
        if (btnNew.Enabled == false)
            btnNew.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[0].ToString();
        if (btnSave.Enabled == false)
            btnSave.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[1].ToString();
        if (btnModify.Enabled == false)
            btnModify.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[2].ToString();
        if (btnQuery.Enabled == false)
            btnQuery.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[3].ToString();
        if (btnExecute.Enabled == false)
            btnExecute.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[4].ToString();
        if (btnCancel.Enabled == false)
            btnCancel.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[5].ToString();
        if (btnfirst.Enabled == false)
            btnfirst.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[6].ToString();
        if (btnprevious.Enabled == false)
            btnprevious.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[7].ToString();
        if (btnnext.Enabled == false)
            btnnext.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[8].ToString();
        if (btnlast.Enabled == false)
            btnlast.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[9].ToString();
        if (btnDelete.Enabled == false)
            btnDelete.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[10].ToString();
        if (btnExit.Enabled == false)
            btnExit.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[11].ToString();
        btnNew.Focus();
        // Put user code to initialize the page here
    }

    #region Web Form Designer generated code
     protected void OnInit(EventArgs e)
    {
        //
        // CODEGEN: This call is required by the ASP.NET Web Form Designer.
        //
        InitializeComponent();
        base.OnInit(e);
    }

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {

    }
    #endregion


    //		public void pageloadbtn()
    // public void pageloadbtn()
    //{
    //    btnNew.Enabled = true;
    //    btnSave.Enabled = false;
    //    btnModify.Enabled = false;
    //    btnDelete.Enabled = false;
    //    btnQuery.Enabled = true;
    //    btnExecute.Enabled = false;
    //    btnCancel.Enabled = true;
    //    btnfirst.Enabled = false;
    //    btnprevious.Enabled = false;
    //    btnnext.Enabled = false;
    //    btnlast.Enabled = false;
    //    btnExit.Enabled = true;
        
    //    txtvalidfrom.Enabled = false;
    //    txtboxcode.Enabled = false;
    //    txtboxdes.Enabled = false;
    //    txtalias.Enabled = false;
    //    txtdispatch.Enabled = false;
    //    drpboxcharge.Enabled = false;
    //    txtnative.Enabled = false;
    //    txtinternational.Enabled = false;
    //    txtremark.Enabled = false;
    //    txtvalidtill.Enabled = false;
    //}

    //		public void editioncode()
    /* public void editioncode()
    {
        NewAdbooking.Classes.BoxMaster edition = new NewAdbooking.Classes.BoxMaster();
        DataSet ds = new DataSet();
        ds = edition.getedition();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "--Select Edition--";
        li1.Value = "0";
        li1.Selected = true;
        drpedition.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                drpedition.Items.Add(li);
            }

        }

    }*/

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    //		public void save(string editioncode,string boxcode,string boxname,string alias,string dispatch,string boxcharge,string native1,string inter,string fromdate,string todate,string remarks,string compcode,string userid)
//    public void save(string editioncode, string boxcode, string boxname, string alias, string dispatch, string boxcharge, string native1, string inter, string fromdate, string todate, string remarks, string compcode, string userid)

    public void save(string boxcode, string boxname, string alias, string dispatch, string boxcharge, string native1, string inter, string fromdate, string todate, string remarks, string compcode, string userid, string pubcenter, string ip, string inc_matter)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.BoxMaster save = new NewAdbooking.Classes.BoxMaster();
                ds = save.savebox(boxcode, boxname, alias, dispatch, boxcharge, native1, inter, fromdate, todate, remarks, compcode, userid, pubcenter, inc_matter);
            }
            else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.BoxMaster save = new NewAdbooking.classesoracle.BoxMaster();
                    ds = save.savebox(boxcode, boxname, alias, dispatch, boxcharge, native1, inter, fromdate, todate, remarks, compcode, userid, pubcenter, Session["dateformat"].ToString(), inc_matter);
                }
                else
                {
                    NewAdbooking.classmysql.BoxMaster save = new NewAdbooking.classmysql.BoxMaster();
                    ds = save.savebox(boxcode, boxname, alias, dispatch, boxcharge, native1, inter, fromdate, todate, remarks, compcode, userid, pubcenter);
                }

        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string boxcode1 = "Inserted Box " + boxcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["UserId"] + "','Box   ','" + err.Replace("'", "''") + "','Box Created','" + boxcode1;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
    }


    [Ajax.AjaxMethod]

    public DataSet adchkadvcode(string str, string pubcenter)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
        NewAdbooking.Classes.BoxMaster auto = new NewAdbooking.Classes.BoxMaster();

        ds = auto.autocode(str, pubcenter);
        return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BoxMaster auto = new NewAdbooking.classesoracle.BoxMaster();

            ds = auto.autocode(str, pubcenter);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.BoxMaster auto = new NewAdbooking.classmysql.BoxMaster();
            ds = auto.autocode(str, pubcenter);
            return ds;

        }


    }



    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    //		public void update(string editioncode,string boxcode,string boxname,string alias,string dispatch,string boxcharge,string native1,string inter,string fromdate,string todate,string remarks,string compcode,string userid)
//     public void update(string editioncode, string boxcode, string boxname, string alias, string dispatch, string boxcharge, string native1, string inter, string fromdate, string todate, string remarks, string compcode, string userid)
    public void update(string boxcode, string boxname, string alias, string dispatch, string boxcharge, string native1, string inter, string fromdate, string todate, string remarks, string compcode, string userid, string pubcenter, string ip, string inc_matter)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.BoxMaster update = new NewAdbooking.Classes.BoxMaster();

                //        ds = update.updatebox(editioncode, boxcode, boxname, alias, dispatch, boxcharge, native1, inter, fromdate, todate, remarks, compcode, userid);

                ds = update.updatebox(boxcode, boxname, alias, dispatch, boxcharge, native1, inter, fromdate, todate, remarks, compcode, userid, pubcenter, inc_matter);
            }
            else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.BoxMaster update = new NewAdbooking.classesoracle.BoxMaster();
                    ds = update.updatebox(boxcode, boxname, alias, dispatch, boxcharge, native1, inter, fromdate, todate, remarks, compcode, userid, pubcenter,inc_matter);

                }
                else
                {
                    NewAdbooking.classmysql.BoxMaster update = new NewAdbooking.classmysql.BoxMaster();
                    ds = update.updatebox(boxcode, boxname, alias, dispatch, boxcharge, native1, inter, fromdate, todate, remarks, compcode, userid, pubcenter);


                }

        }
        catch (Exception e)
        {
            err = e.Message;
        }

        string boxcode2 = "Modified Box " + boxcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["UserId"] + "','Box   ','" + err.Replace("'", "''") + "','Box Updated','" + boxcode2;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
    }


    [Ajax.AjaxMethod]
    //		public DataSet exebox(string editioncode,string boxcode,string boxname,string alias,string boxcharge,string compcode,string userid)
//     public DataSet exebox(string editioncode, string boxcode, string boxname, string alias, string boxcharge, string compcode, string userid)

    public DataSet exebox(string boxcode, string boxname, string alias, string boxcharge, string compcode, string userid, string pubcenter)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BoxMaster exe = new NewAdbooking.Classes.BoxMaster();

            ds = exe.boxexe(boxcode, boxname, alias, boxcharge, compcode, userid, pubcenter);
            return ds;
        }
        else
            if(ConfigurationSettings.AppSettings ["ConnectionType"].ToString ()=="orcl")
            {
                NewAdbooking.classesoracle.BoxMaster exe = new NewAdbooking.classesoracle.BoxMaster();
                ds = exe.boxexe(boxcode, boxname, alias, boxcharge, compcode, userid, pubcenter);
                return ds;
                
            }

        else
        {
            NewAdbooking.classmysql.BoxMaster exe = new NewAdbooking.classmysql.BoxMaster();
            ds = exe.boxexe(boxcode, boxname, alias, boxcharge, compcode, userid, pubcenter);
            return ds;

        }

    }


    [Ajax.AjaxMethod]
    //		public DataSet fnplbox(string compcode,string userid)
     public DataSet fnplbox(string compcode, string userid)
     {
         DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BoxMaster exe = new NewAdbooking.Classes.BoxMaster();
           
            ds = exe.boxfnpl(compcode, userid);
            return ds;
        }
             else
            if(ConfigurationSettings .AppSettings ["ConnectionType"].ToString ()=="orcl")
        {
            NewAdbooking.classesoracle.BoxMaster exe = new NewAdbooking.classesoracle.BoxMaster();
            ds = exe.boxfnpl(compcode, userid);
            return ds;


        }
        else
        {
            NewAdbooking.classmysql.BoxMaster exe = new NewAdbooking.classmysql.BoxMaster();
            ds = exe.boxfnpl(compcode, userid);
            return ds;

        }
       

    }

    [Ajax.AjaxMethod]
    //		public DataSet savechk(string boxcode,string compcode,string userid)
    public DataSet savechk(string boxcode, string boxname, string compcode, string userid, string pubcenter)
     {
         DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BoxMaster exe = new NewAdbooking.Classes.BoxMaster();

            ds = exe.boxchk(boxcode, boxname, compcode, userid, pubcenter);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.BoxMaster exe = new NewAdbooking.classesoracle.BoxMaster();
                ds = exe.boxchk(boxcode,boxname, compcode, userid, pubcenter);
                return ds;

            }
        
        else
        {
            NewAdbooking.classmysql.BoxMaster exe = new NewAdbooking.classmysql.BoxMaster();
            ds = exe.boxchk(boxcode, boxname, compcode, userid, pubcenter);
            return ds;

        }


    }

    [Ajax.AjaxMethod]

    public DataSet modifychk(string boxcode, string boxname, string compcode, string userid, string pubcenter)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BoxMaster exe = new NewAdbooking.Classes.BoxMaster();

            ds = exe.modifychk(boxcode, boxname, compcode, userid, pubcenter);
            return ds;
        }
        else 
            if(ConfigurationSettings .AppSettings ["ConnectionType"].ToString ()=="orcl")
            {
                NewAdbooking.classesoracle.BoxMaster exe = new NewAdbooking.classesoracle.BoxMaster();
                ds = exe.modifychk(boxcode, boxname, compcode, userid, pubcenter);
                return ds;

            }
        else
        {
            NewAdbooking.classmysql.BoxMaster exe = new NewAdbooking.classmysql.BoxMaster();
            ds = exe.modifychk(boxcode, boxname, compcode, userid, pubcenter);
            return ds;

        }



    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    //		public void boxdelete(string editioncode,string boxcode,string compcode,string userid)
//     public void boxdelete(string editioncode, string boxcode, string compcode, string userid)
    public void boxdelete(string boxcode, string compcode, string userid,string ip)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.BoxMaster delete = new NewAdbooking.Classes.BoxMaster();


                ds = delete.boxdel(boxcode, compcode, userid);
            }
            else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.BoxMaster delete = new NewAdbooking.classesoracle.BoxMaster();

                    ds = delete.boxdel(boxcode, compcode, userid);
                }
                else
                {
                    NewAdbooking.classmysql.BoxMaster delete = new NewAdbooking.classmysql.BoxMaster();
                    ds = delete.boxdel(boxcode, compcode, userid);
                }

        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string boxcode3 = "Deleted Box " + boxcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["UserId"] + "','Box   ','" + err.Replace("'", "''") + "','Box Deleted','" + boxcode3;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
    }

    protected void hiddenusername_ServerChange(object sender, System.EventArgs e)
    {

    }


    private void fillPubCenter()
    {
        DataSet ds;
        drppubcenter.Items.Clear();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.login logindetail = new NewAdbooking.Classes.login();

            ds = logindetail.getPubCenter();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.login logindetail = new NewAdbooking.classesoracle.login();

            ds = logindetail.getPubCenter();

        }
        else
        {
            NewAdbooking.classmysql.login logindetail = new NewAdbooking.classmysql.login();
            ds = logindetail.getPubCenter();
        }

        ListItem li1;
        li1 = new ListItem();
        li1.Text = "Select Center";
        li1.Value = "0";
        li1.Selected = true;
        drppubcenter.Items.Add(li1);
        string[] drptext;
        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            if (ds.Tables[0].Rows[i].ItemArray[1].ToString().IndexOf("(") > 0)
            {
                drptext = ds.Tables[0].Rows[i].ItemArray[1].ToString().Split('(');
                li.Text = drptext[0];
            }
            else
            {
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            }
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drppubcenter.Items.Add(li);
        }

    }






}
