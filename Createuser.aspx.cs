using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data.SqlClient;
using System.Security.Cryptography;

public partial class Createuser : System.Web.UI.Page
{
    const string passphrase = "password";
    protected void Page_Load(object sender, EventArgs e)
    {
        Response.Expires = -1;

        if (Session["compcode"] == null)
        {
            Response.Redirect("login.aspx");
            Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            return;
        }
        ip1.Value = Request.ServerVariables["REMOTE_ADDR"];
        hiddencomcode.Value = Session["compcode"].ToString();
        hiddenuserid.Value = Session["userid"].ToString();
        hiddendateformat.Value = Session["dateformat"].ToString();
        //hiddendateformat.Value = Session["DateFormat"].ToString();
        hiddenusername.Value = Session["Username"].ToString();
        hiddenauto.Value = Session["autogenerated"].ToString();
        hiddenbranch.Value = Session["revenue"].ToString();

        Ajax.Utility.RegisterTypeForAjax(typeof(Createuser));


        DataSet objDataSetbu = new DataSet();
        //***********************************************************************//
        //*****************Code For Read the data from xml File******************//
        //*******************************For The Button**************************//
        //***********************************************************************/
        objDataSetbu.ReadXml(Server.MapPath("XML/button.xml"));
        btnNew.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[0].ToString();
        btnSave.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[1].ToString();
        btnModify.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[2].ToString();
        btnQuery.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[3].ToString();
        btnExecute.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[4].ToString();
        btnCancel.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[5].ToString();
        btnfirst.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[6].ToString();
        btnprevious.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[7].ToString();
        btnnext.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[8].ToString();
        btnlast.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[9].ToString();
        btnDelete.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[10].ToString();
        btnExit.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[11].ToString();

        //**************************************************************************************
        DataSet dsctlLable = new DataSet();
        dsctlLable.ReadXml(Server.MapPath("XML/Createuser.xml"));
        lblcmp.Text = dsctlLable.Tables[0].Rows[0].ItemArray[13].ToString();
        lbagncy.Text = dsctlLable.Tables[0].Rows[0].ItemArray[14].ToString();
        lbusername.Text = dsctlLable.Tables[0].Rows[0].ItemArray[0].ToString();
        lbpassword.Text = dsctlLable.Tables[0].Rows[0].ItemArray[1].ToString();
        lbluserid.Text = dsctlLable.Tables[0].Rows[0].ItemArray[2].ToString();
        lblretainer.Text = dsctlLable.Tables[0].Rows[0].ItemArray[3].ToString();
        lblcurrency.Text = dsctlLable.Tables[0].Rows[0].ItemArray[4].ToString();
        lbldateformate.Text = dsctlLable.Tables[0].Rows[0].ItemArray[5].ToString();
        lblcompname.Text = dsctlLable.Tables[0].Rows[0].ItemArray[6].ToString();
      //  lblcompcode.Text = dsctlLable.Tables[0].Rows[0].ItemArray[7].ToString();
        Label1.Text = dsctlLable.Tables[0].Rows[0].ItemArray[8].ToString();
        lblstatus.Text=dsctlLable.Tables[0].Rows[0].ItemArray[15].ToString();
        lblratep.Text = dsctlLable.Tables[0].Rows[0].ItemArray[24].ToString();
       
        //*************************************************************************************
        lblcomp.Text = dsctlLable.Tables[0].Rows[0].ItemArray[9].ToString();
        lblemail.Text = dsctlLable.Tables[0].Rows[0].ItemArray[10].ToString();
        lbfirstname.Text = dsctlLable.Tables[0].Rows[0].ItemArray[11].ToString();
        lblastname.Text = dsctlLable.Tables[0].Rows[0].ItemArray[12].ToString();
        lbemcode.Text = dsctlLable.Tables[0].Rows[0].ItemArray[16].ToString();
        lblcashier.Text = dsctlLable.Tables[0].Rows[0].ItemArray[18].ToString();
        Permission.Text = dsctlLable.Tables[0].Rows[0].ItemArray[19].ToString();
        lblip.Text = dsctlLable.Tables[0].Rows[0].ItemArray[20].ToString();
        lblmacaddress.Text = dsctlLable.Tables[0].Rows[0].ItemArray[21].ToString();
        lblcomputername.Text = dsctlLable.Tables[0].Rows[0].ItemArray[22].ToString();
        lbldatestatus.Text = dsctlLable.Tables[0].Rows[0].ItemArray[25].ToString();

        lblratep.Text = dsctlLable.Tables[0].Rows[0].ItemArray[24].ToString();
        if (!IsPostBack)
        {
            btnNew.Attributes.Add("OnClick", "javascript:return newclick();");
            btnSave.Attributes.Add("OnClick", "javascript:return saveclick();");
            //txtadcatname.Attributes.Add("OnChange", "javascript:return autoornot();");
            btnModify.Attributes.Add("OnClick", "javascript:return modifyclick();");
            btnQuery.Attributes.Add("OnClick", "javascript:return queryclick();");
            btnExecute.Attributes.Add("OnClick", "javascript:return executeclick();");
            btnfirst.Attributes.Add("OnClick", "javascript:return firstcall();");
            btnprevious.Attributes.Add("OnClick", "javascript:return previouscall();");
            btnnext.Attributes.Add("OnClick", "javascript:return nextclick();");
            btnlast.Attributes.Add("OnClick", "javascript:return lastcall();");
            btnExit.Attributes.Add("OnClick", "javascript:return exitclick();");
            btnDelete.Attributes.Add("OnClick", "javascript:return deleteclick();");
            btnCancel.Attributes.Add("OnClick", "javascript:return cancelclick('Createuser');");

            txtusername.Attributes.Add("onChange", "javascript:return autoornot();");
            drpretainer.Attributes.Add("onChange", "javascript:return chkname()");
            txtuserid.Attributes.Add("onChange", "javascript:return chkuserid();");
            //txtuserid.Attributes.Add("onChange", "javascript:return userdefine();");
            lbcomp.Attributes.Add("onclick", "javascript:return forcompany('lbcomp');");
            lbagency.Attributes.Add("onclick", "javascript:return forcompany('lbagency');");
            rbadmin.Attributes.Add("onclick", "javascript:return chkuseroradmin('rbadmin');");
            rbuser.Attributes.Add("onclick", "javascript:return chkuseroradmin('rbuser');");
            txtemail.Attributes.Add("OnBlur", "javascript:return checkEmail('txtemail');");
            txtdisc.Attributes.Add("onchange", "javascript:return chkdisc();");
            txtemcode.Attributes.Add("onkeydown", "javascript:return F2fillempcode(event);");
            lstempcode.Attributes.Add("onkeydown", "javascript:return Clickrempcode_ret(event);");
            lstempcode.Attributes.Add("OnClick", "javascript:return Clickrempcode_ret(event);");
            lstagency.Attributes.Add("onkeypress", "return keySort(this);");
            lstagency.Attributes.Add("onclick", "javascript:return insertagency(event);");
            lstagency.Attributes.Add("onkeydown", "javascript:return insertagency(event);");
            drpagency.Attributes.Add("onkeydown", "javascript:return F2fillagencycode(event);");

            lstcashier.Attributes.Add("onclick", "javascript:return insertcashier(event);");
            lstcashier.Attributes.Add("onkeydown", "javascript:return insertcashier(event);");
            tbcashier.Attributes.Add("onkeydown", "javascript:return F2fillcashier(event);");
            Permission.Attributes.Add("onclick", "javascript:return permission1(event);");

            
            createuserenable();
            currencycode();
            chkpref();
            retainername();
            Bindexecutive();
           bindCompany();
           bindCompanynew();
           BindBranch();
           BindRolename();
        }
        if (btnNew.Enabled == false)
            btnNew.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[0].ToString();
        if (btnSave.Enabled == false)
            btnSave.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[1].ToString();
        if (btnModify.Enabled == false)
            btnModify.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[2].ToString();
        if (btnQuery.Enabled == false)
            btnQuery.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[3].ToString();
        if (btnExecute.Enabled == false)
            btnExecute.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[4].ToString();
        if (btnCancel.Enabled == false)
            btnCancel.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[5].ToString();
        if (btnfirst.Enabled == false)
            btnfirst.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[6].ToString();
        if (btnprevious.Enabled == false)
            btnprevious.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[7].ToString();
        if (btnnext.Enabled == false)
            btnnext.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[8].ToString();
        if (btnlast.Enabled == false)
            btnlast.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[9].ToString();
        if (btnDelete.Enabled == false)
            btnDelete.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[10].ToString();
        if (btnExit.Enabled == false)
            btnExit.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[11].ToString();
      
    }

    public void createuserenable()
    {
        btnNew.Enabled = true;
        btnSave.Enabled = false;
        btnModify.Enabled = false;
        btnDelete.Enabled = false;
        btnQuery.Enabled = true;
        btnExecute.Enabled = false;
        btnCancel.Enabled = true;
        btnfirst.Enabled = false;
        btnprevious.Enabled = false;
        btnnext.Enabled = false;
        btnlast.Enabled = false;
        btnExit.Enabled = true;
        drpdatestatus.Enabled = false;
        txtusername.Enabled = false;
        txtpwd.Enabled = false;
        drpcurrencycode.Enabled = false;
        drpdateformate.Enabled = false;
        drpcompany.Enabled = false;
        txtemail.Enabled = false;
        txtuserid.Enabled = false;
        drpretainer.Enabled = false;
        drpcompanylist.Enabled = false;
        txtbranchpermission.Enabled = false;
        drpfilter.Enabled = false;
        drprole.Enabled = false;
        txtfirstname.Enabled = false;
        txtlastname.Enabled = false;
        drpeditlines.Enabled = false;
        drpstatus.Enabled = false;
        txtemcode.Enabled = false;
        Permission.Enabled = false;
       // div1.Disabled = true; 
       
    }


    public void BindRolename()
    {
        DataSet ds1 = new DataSet();

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.RoleMaster MastPrev = new NewAdbooking.classesoracle.RoleMaster();
            ds1 = MastPrev.BindRole(Session["compcode"].ToString());
        
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser MastPrev = new NewAdbooking.Classes.Createuser();
            ds1 = MastPrev.BindRole(Session["compcode"].ToString());
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "Rolebind";
            string[] parameterValueArray = { Session["compcode"].ToString() };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds1 = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        //else
        //{
        //    NewAdbooking.classmysql.Createuser MastPrev = new NewAdbooking.classmysql.Createuser();
        //    ds1 = MastPrev.BindRole(Session["compcode"].ToString());
        //}
       

        drprole.Items.Clear();
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "Select";
        li1.Value = "0";
        li1.Selected = true;
        drprole.Items.Add(li1);
        
        if (ds1.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds1.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Value = ds1.Tables[0].Rows[i].ItemArray[1].ToString();
                drprole.Items.Add(li);

            }
          
        }


    }
    [Ajax.AjaxMethod]
    public DataSet bindagencyname(string compcode, string userid, string agency)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Master bindagenname = new NewAdbooking.Classes.Master();

            ds = bindagenname.bindagency(compcode, userid, agency);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Master bindagenname = new NewAdbooking.classesoracle.Master();

                ds = bindagenname.bindagency(compcode, userid, agency);
                return ds;
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "bindagencynameonkey_bindagencynameonkey_p";
                string[] parameterValueArray = { compcode, userid, agency };
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
                return ds;
            }
        return ds;
            //else
            //{
            //    NewAdbooking.classmysql.Master bindagenname = new NewAdbooking.classmysql.Master();

            //    ds = bindagenname.bindagency(compcode, userid, agency);
            //    return ds;
            //}
    }
    public void bindCompany()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser currencycode = new NewAdbooking.classesoracle.Createuser();
           
                ds = currencycode.bindCompany();
           
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser currencycode = new NewAdbooking.Classes.Createuser();
            ds = currencycode.bindCompany();
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "getCompName_getCompName_p";
            string[] parameterValueArray = { };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
           
        }
        //else
        //{
        //    NewAdbooking.classmysql.Createuser currencycode = new NewAdbooking.classmysql.Createuser();
        //    ds = currencycode.bindCompany();
        //}
        drpcompany.Items.Clear();
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Company-";
        li1.Value = "0";
        li1.Selected = true;
        drpcompany.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drpcompany.Items.Add(li);


        }

    }
    public void currencycode()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser currencycode = new NewAdbooking.classesoracle.Createuser();
            ds = currencycode.currency();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser currencycode = new NewAdbooking.Classes.Createuser();

            ds = currencycode.currency();
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "login_getCurrencycode_login_getCurrencycode_p";
            string[] parameterValueArray = { Session["compcode"].ToString() };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        //else 
        //{
        //     NewAdbooking.classmysql.Createuser currencycode = new NewAdbooking.classmysql.Createuser();

        //    ds = currencycode.currency();
        //}
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Add Currency Name-";
        li1.Value = "0";
        li1.Selected = true;
        drpcurrencycode.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
           drpcurrencycode.Items.Add(li);


        }
    }

    public void retainername()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser branchname = new NewAdbooking.classesoracle.Createuser();
            ds = branchname.getbranch();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser retainername = new NewAdbooking.Classes.Createuser();
            ds = retainername.retainer();
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "login_getbranchname_login_getbranchname_p";
            string[] parameterValueArray = { };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        //else
        //{
        //    NewAdbooking.classmysql.Createuser retainername = new NewAdbooking.classmysql.Createuser();
        //    ds = retainername.retainer();
        //}
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Branch Name-";
        li1.Value = "0";
        li1.Selected = true;
        drpretainer.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            drpretainer.Items.Add(li);


        }
    }

    public void BindBranch()
    {

        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser branchname = new NewAdbooking.classesoracle.Createuser();
            ds = branchname.getbranch();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser retainername = new NewAdbooking.Classes.Createuser();
            ds = retainername.retainer();
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "login_getbranchname_login_getbranchname_p";
            string[] parameterValueArray = { };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        //else
        //{
        //    NewAdbooking.classmysql.Createuser retainername = new NewAdbooking.classmysql.Createuser();
        //    ds = retainername.retainer();
        //}
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Branch Name-";
        li1.Value = "0";
        li1.Selected = true;
        txtbranchpermission.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            txtbranchpermission.Items.Add(li);


        }

    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet save(string username, string password, string userid, string date_for, string compname, string compcode, string currname, string retainername, string agencycode, string user, string admin, string comp_user, string compnamelist, string emailid, string discount, string filter, string rolename, string editlines, string firstname, string lastname, string status, string empcode, string acccode, string MACHINE_IP, string MACHINE_NAME, string MACHINE_MAC_ADDR, string executive, string getrate, string datestatus, string dateform,string createdby)
    {
         DataSet ds = new DataSet();
         string err="";
         try
         {
              string pwdencry = EncryptData(password);
             if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
             {
                 NewAdbooking.classesoracle.Createuser save = new NewAdbooking.classesoracle.Createuser();
                 ds = save.usersave(username, pwdencry, userid, date_for, compname, compcode, currname, retainername, agencycode, user, admin, comp_user, compnamelist, emailid, discount, filter, rolename, editlines, firstname, lastname, status, empcode, acccode, MACHINE_IP, MACHINE_NAME, MACHINE_MAC_ADDR, executive, getrate, datestatus, dateform,createdby );
                
             }
             else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
             {
                 NewAdbooking.Classes.Createuser save = new NewAdbooking.Classes.Createuser();
                 ds = save.usersave(username, pwdencry, userid, date_for, compname, compcode, currname, retainername, agencycode, user, admin, comp_user, compnamelist, emailid, discount, filter, rolename, editlines, firstname, lastname, status, empcode, acccode, MACHINE_IP, MACHINE_NAME, MACHINE_MAC_ADDR, executive, getrate, datestatus, dateform,createdby);
                 
             }
             else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
             {
                 string procedureName = "loginInsert_loginInsert_p";
                 string[] parameterValueArray = { username, pwdencry, userid, date_for, compname, compcode, currname, retainername, agencycode, user, admin, comp_user, compnamelist, emailid, discount, filter, rolename, editlines, firstname, lastname, status, empcode, acccode, MACHINE_IP, MACHINE_NAME, MACHINE_MAC_ADDR, executive, "", "", getrate, "", datestatus, createdby };
                 NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                 ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

             }
             //else
             //{
             //    NewAdbooking.classmysql.Createuser save = new NewAdbooking.classmysql.Createuser();
             //    ds = save.usersave(username, pwdencry, userid, date_for, compname, compcode, currname, retainername, agencycode, user, admin, comp_user, compnamelist, emailid, discount, filter, rolename, editlines, firstname, lastname);
                
             //}
         }
         catch (Exception e)
         {
             err = e.Message;
         }
         clsconnection dconnect = new clsconnection();
         string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','User','" + err.Replace("'", "''") + "','New User Create','" + username;
         sqldd = sqldd + "',";
        // sqldd = sqldd + "'" + ip + "')";
         dconnect.executenonquery1(sqldd);
         return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet savebranchpermission(string username, string branchcode, string userflag, string compcode)
    {
         DataSet ds = new DataSet();
         if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
         {
             NewAdbooking.classesoracle.Createuser save = new NewAdbooking.classesoracle.Createuser();
             ds = save.usersavebranch(username, branchcode, userflag, compcode);
             return ds;
         }
         else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
         {
             NewAdbooking.Classes.Createuser save = new NewAdbooking.Classes.Createuser();
             ds = save.usersavebranch(username, branchcode, userflag, compcode);
             return ds;
         }
         else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
         {
             string procedureName = "loginInsertBranchpermission";
             string[] parameterValueArray = { username , branchcode, userflag, compcode };
             NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
             ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
             return ds;
         }
         return ds;
         //else
         //{
         //    NewAdbooking.classmysql.Createuser save = new NewAdbooking.classmysql.Createuser();
         //    ds = save.usersavebranch(username, branchcode, userflag, compcode);
         //    return ds;
         //}

    }
   
  [Ajax.AjaxMethod]
    public DataSet updatebranchpermission(string username, string branchcode, string userflag, string compcode)
    {
         DataSet ds = new DataSet();
         if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
         {
             NewAdbooking.classesoracle.Createuser save = new NewAdbooking.classesoracle.Createuser();
             ds = save.userupdatebranch(username, branchcode, userflag, compcode);
             return ds;
         }
         else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
         {
             NewAdbooking.Classes.Createuser save = new NewAdbooking.Classes.Createuser();
             ds = save.userupdatebranch(username, branchcode, userflag, compcode);
             return ds;
         }
         else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
         {
             string procedureName = "loginUpdateBranchpermission";
             string[] parameterValueArray = { username, branchcode, userflag, compcode };
             NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
             ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
             return ds;
         }
         else
         {
             NewAdbooking.classmysql.Createuser save = new NewAdbooking.classmysql.Createuser();
             ds = save.userupdatebranch(username, branchcode, userflag, compcode);
             return ds;
         }

    }
    [Ajax.AjaxMethod]
    public DataSet chkuserid(string userid, string username, string branchname)
    {
         DataSet ds = new DataSet();
         if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
         {
             NewAdbooking.classesoracle.Createuser Chkuserid = new NewAdbooking.classesoracle.Createuser();
             ds = Chkuserid.chkuserid(userid, username, branchname);
             return ds;
         }
         else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
         {
             NewAdbooking.Classes.Createuser Chkuserid = new NewAdbooking.Classes.Createuser();
             ds = Chkuserid.chkuserid(userid, username, branchname);
             return ds;
         }
         else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
         {
             string procedureName = "userloginudefine_userloginudefine_p_new";
             string[] parameterValueArray = { username  ,userid  ,branchname  };
             NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
             ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
             return ds;
         }
         else
         {
             NewAdbooking.classmysql.Createuser Chkuserid = new NewAdbooking.classmysql.Createuser();
             ds = Chkuserid.chkuserid(userid, username, branchname);
             return ds;
         }

    }
    [Ajax.AjaxMethod]
    public DataSet userauto(string str, string branchname)
    {
        DataSet ds = new DataSet();
         if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
         {
             NewAdbooking.classesoracle.Createuser chk = new NewAdbooking.classesoracle.Createuser();
                ds = chk.genuserid(str,branchname);
                return ds;
          }
          else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
          {
              NewAdbooking.Classes.Createuser chk = new NewAdbooking.Classes.Createuser();
              ds = chk.genuserid(str, branchname);
              return ds;
          }
         else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
         {
             string procedureName = "userloginauto_userloginauto_p";
             string[] parameterValueArray = { str, str.Substring(0, 2), branchname };
             NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
             ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
             return ds;
         }
          else
          {
              NewAdbooking.classmysql.Createuser chk = new NewAdbooking.classmysql.Createuser();
              ds = chk.genuserid(str, branchname);
              return ds;
          }
    }
    [Ajax.AjaxMethod]
    public DataSet userexecute(string username, string userid, string compcode,string admin)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser catexe = new NewAdbooking.classesoracle.Createuser();
            ds = catexe.userexecute(username, userid, compcode, admin);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser catexe = new NewAdbooking.Classes.Createuser();
            ds = catexe.userexecute(username, userid, compcode, admin);
            return ds;
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "LOGINEXECUTE_loginexecute_p_new";
            string[] parameterValueArray = { username, userid, compcode, admin };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.Createuser catexe = new NewAdbooking.classmysql.Createuser();
            ds = catexe.userexecute(username, userid, compcode, admin);
            return ds;
        }
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void insertlogData(string data)
    {
         string err = "";
        try
        {
            clsconnection dconnect = new clsconnection();
            string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION) values($date,'" + HttpContext.Current.Session["userid"] + "','User','" + data + "','User Branch LOG','" + HttpContext.Current.Session["userid"];
           // sqldd = sqldd + "',";
          //  sqldd = sqldd + "'" + ip + "')";
            sqldd = sqldd + "')";
            dconnect.executenonquery1(sqldd);
        }
        catch (Exception e)
        {
            err = e.Message;
        }
    }
    
    [Ajax.AjaxMethod]
    public DataSet branchexecute(string userid, string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser catexe = new NewAdbooking.classesoracle.Createuser();
            ds = catexe.executebranch(userid, compcode);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser catexe = new NewAdbooking.Classes.Createuser();
            ds = catexe.executebranch(userid, compcode);
            return ds;
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "brnchpermissionexe";
            string[] parameterValueArray = { userid, compcode };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.Createuser catexe = new NewAdbooking.classmysql.Createuser();
            ds = catexe.executebranch(userid, compcode);
            return ds;
        }
  
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet logindelete(string userid, string compcode,string ip)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Createuser delete = new NewAdbooking.classesoracle.Createuser();
                ds = delete.userdelete(userid, compcode);
                //return ds;
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.Createuser delete = new NewAdbooking.Classes.Createuser();
                ds = delete.userdelete(userid, compcode);
                //return ds;
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "loginDelete_loginDelete_p";
                string[] parameterValueArray = { userid, compcode };
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
                return ds;
            }
            else
            {
                NewAdbooking.classmysql.Createuser delete = new NewAdbooking.classmysql.Createuser();
                ds = delete.userdelete(userid, compcode);
                // return ds;
            }
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','User','" + err.Replace("'", "''") + "','User Delete','" + userid;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
        return ds;

    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet modify(string username, string password, string userid, string date_for, string compname, string compcode, string currname, string retainername, string agencycode, string user, string admin, string comp_user, string companylist, string emailid, string discount, string filter, string rolename, string editlines, string firstname, string lastname, string status, string getrate, string datestatus, string dateform)
    {
         DataSet ds = new DataSet();
         string err = "";
         string ip = "";
         try
         {
             string pwdencry = EncryptData(password);
             if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
             {
                 NewAdbooking.classesoracle.Createuser save = new NewAdbooking.classesoracle.Createuser();
                 ds = save.usermodify(username, pwdencry, userid, date_for, compname, compcode, currname, retainername, agencycode, user, admin, comp_user, companylist, emailid, discount, filter, rolename, editlines, firstname, lastname, status, getrate, datestatus, dateform);
               
             }
             else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
             {
                 NewAdbooking.Classes.Createuser save = new NewAdbooking.Classes.Createuser();
                 ds = save.usermodify(username, pwdencry, userid, date_for, compname, compcode, currname, retainername, agencycode, user, admin, comp_user, companylist, emailid, discount, filter, rolename, editlines, firstname, lastname, status, getrate, datestatus, dateform);
                
             }
             else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
             {
                 string procedureName = "loginModify_loginModify_p";
                 string[] parameterValueArray = { username, pwdencry, userid, date_for, compname, compcode, currname, retainername, agencycode, user, admin, comp_user, companylist, emailid, discount, filter, rolename, editlines, firstname, lastname, status, "", "", "", "", "", "", "", "", "", "", datestatus };
                 NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                 ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
                 return ds;
             }
             else
             {
                 NewAdbooking.classmysql.Createuser save = new NewAdbooking.classmysql.Createuser();
                 ds = save.usermodify(username, pwdencry, userid, date_for, compname, compcode, currname, retainername, agencycode, user, admin, comp_user, companylist, emailid, discount, filter, rolename, editlines, firstname, lastname);
                
             }
         }
         catch (Exception e)
         {
             err = e.Message;
         }
         clsconnection dconnect = new clsconnection();
         string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','User','" + err.Replace("'", "''") + "','User Modification','" + username;
         sqldd = sqldd + "',";
         sqldd = sqldd + "'" + ip + "')";
         dconnect.executenonquery1(sqldd);
         return ds;
    }
    public void bindCompanynew()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser currencycode = new NewAdbooking.classesoracle.Createuser();
            ds = currencycode.bindCompany();

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser currencycode = new NewAdbooking.Classes.Createuser();
            ds = currencycode.bindCompany();
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "getCompName_getCompName_p";
            string[] parameterValueArray = {};
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
           
        }
        else
        {
            NewAdbooking.classmysql.Createuser currencycode = new NewAdbooking.classmysql.Createuser();
            ds = currencycode.bindCompany();
        }
        drpcompanylist.Items.Clear();
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Company-";
        li1.Value = "0";
        li1.Selected = true;
        drpcompanylist.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drpcompanylist.Items.Add(li);


        }

    }
    [Ajax.AjaxMethod]
    public DataSet mailchk(string mail)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser catexe = new NewAdbooking.classesoracle.Createuser();
            ds = catexe.userexecute(mail);
            return ds;


        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser catexe = new NewAdbooking.Classes.Createuser();
            ds = catexe.userexecute1(mail);
            return ds;
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "mailchk_mailchk_p";
            string[] parameterValueArray = { mail };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.Createuser catexe = new NewAdbooking.classmysql.Createuser();
            ds = catexe.userexecute1(mail);
            return ds;
        }
    }

    [Ajax.AjaxMethod]
    public DataSet empcodebind(string compcode, string empname)
    {
        //drpemcode.Items.Clear();
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.Createuser name = new NewAdbooking.Classes.Createuser();

            ds = name.bindempcode(compcode, empname);
            return ds;
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "mailchk_mailchk_p";
            string[] parameterValueArray = { compcode, empname };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            return ds;
        }
        else
        {
            NewAdbooking.classesoracle.Createuser name = new NewAdbooking.classesoracle.Createuser();
            ds = name.bindempcode(compcode, empname);
            return ds;
        }



    }
    public void chkpref()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser currencycode = new NewAdbooking.classesoracle.Createuser();
            ds = currencycode.bindcashier(hiddencomcode.Value);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser currencycode = new NewAdbooking.Classes.Createuser();
            ds = currencycode.bindcashier(hiddencomcode.Value);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "mailchk_mailchk_p";
            string[] parameterValueArray = { hiddencomcode.Value };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            
        }
    //    if (ds.Tables[0].Rows[0]["FA_LEDGER_ALLOW"].ToString() == "N")
    //        lstcashier.Visible = false;
    //    else
    //        lstcashier.Visible = true;
    }

    [Ajax.AjaxMethod]
    public DataSet bindacashiername(string compcode, string accty, string accname, string userid, string extra1, string extra2)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser currencycode = new NewAdbooking.classesoracle.Createuser();
            ds = currencycode.bindcashier_callback(compcode,accty,accname,userid,extra1,extra2);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser currencycode = new NewAdbooking.Classes.Createuser();
            ds = currencycode.bindcashier_callback(compcode, accty, accname, userid, extra1, extra2);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "fa_account_mast_typewise";
            string[] parameterValueArray = { compcode, accty, accname, userid, extra1, extra2 };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
        
    }
    private string EncryptData(string Message)
    {
        byte[] Results;
        System.Text.UTF8Encoding UTF8 = new System.Text.UTF8Encoding();
        MD5CryptoServiceProvider HashProvider = new MD5CryptoServiceProvider();
        byte[] TDESKey = HashProvider.ComputeHash(UTF8.GetBytes(passphrase));
        TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider();
        TDESAlgorithm.Key = TDESKey;
        TDESAlgorithm.Mode = CipherMode.ECB;
        TDESAlgorithm.Padding = PaddingMode.PKCS7;
        byte[] DataToEncrypt = UTF8.GetBytes(Message);
        try
        {
            ICryptoTransform Encryptor = TDESAlgorithm.CreateEncryptor();
            Results = Encryptor.TransformFinalBlock(DataToEncrypt, 0, DataToEncrypt.Length);
        }
        finally
        {
            TDESAlgorithm.Clear();
            HashProvider.Clear();
        }
        return Convert.ToBase64String(Results);
    }
    public static string DecryptString(string Message)
    {
        byte[] Results;
        System.Text.UTF8Encoding UTF8 = new System.Text.UTF8Encoding();
        MD5CryptoServiceProvider HashProvider = new MD5CryptoServiceProvider();
        byte[] TDESKey = HashProvider.ComputeHash(UTF8.GetBytes(passphrase));
        TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider();
        TDESAlgorithm.Key = TDESKey;
        TDESAlgorithm.Mode = CipherMode.ECB;
        TDESAlgorithm.Padding = PaddingMode.PKCS7;
        byte[] DataToDecrypt = Convert.FromBase64String(Message);
        try
        {
            ICryptoTransform Decryptor = TDESAlgorithm.CreateDecryptor();
            Results = Decryptor.TransformFinalBlock(DataToDecrypt, 0, DataToDecrypt.Length);
        }
        finally
        {
            TDESAlgorithm.Clear();
            HashProvider.Clear();
        }
        return UTF8.GetString(Results);
    }
    [Ajax.AjaxMethod]
    public string decript(string password)
    {
        string pwdencry = DecryptString(password);
        return pwdencry;

    }



    public void Bindexecutive()
    {

        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster clsbooking = new NewAdbooking.classesoracle.BookingMaster();
            ds = clsbooking.getExecbooking(hiddencomcode.Value, "", "0", "0", "");
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.BookingMaster retainername = new NewAdbooking.Classes.BookingMaster();
                ds = retainername.getExecbooking(hiddencomcode.Value, "", "0", "0");
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "websp_getExecbooking_websp_getExecbooking_p";
                string[] parameterValueArray = { hiddencomcode.Value, "", "0", "0","" };
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

            }
            else
            {
                NewAdbooking.classmysql.CityMaster retainername = new NewAdbooking.classmysql.CityMaster();
                ds = retainername.retainer();
            }
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Executive Name-";
        li1.Value = "0";
        li1.Selected = true;
        Libexecutive.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            Libexecutive.Items.Add(li);


        }

    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.ReadWrite)]
    public DataSet get_ag_name(string comp, string subagecode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser citymast = new NewAdbooking.Classes.Createuser();


            ds = citymast.get_agency_name(comp, subagecode);
        }

        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser citymast = new NewAdbooking.classesoracle.Createuser();


            ds = citymast.get_agency_name(comp, subagecode);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "ad_AGENAME";
            string[] parameterValueArray = { comp, subagecode };
            NewAdbooking.classmysql.Master obj = new NewAdbooking.classmysql.Master();
            ds = obj.BindCommanFunctionagency(procedureName, parameterValueArray);

        }

        return ds;
    }

}
