
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class EditorMaster : System.Web.UI.Page
{
    string checkboxname;
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void blankSession()
    {
        Session["firstdate"] = null;
        Session["seconddate"] = null;
        Session["thirdyear"] = null;
    }
    NewAdbooking.Classes.EditorMaster edm = new NewAdbooking.Classes.EditorMaster();
    protected void Page_Load(object sender, System.EventArgs e)
    {

        // Put user code to initialize the page here

        Response.Expires = -1;
        Response.Buffer = true;
        Response.ExpiresAbsolute = DateTime.Now.AddDays(-1d);
        Response.Expires = -1500;
        Response.CacheControl = "no-cache";

        if (Session["compcode"] != null)
        {
            hiddencompcode.Value = Session["compcode"].ToString();
            hiddenuserid.Value = Session["userid"].ToString();
            hiddenauto.Value = Session["autogenerated"].ToString();
            hiddensolorate.Value = Session["solorate"].ToString();
            hiddendateformat.Value = Session["dateformat"].ToString();
            //hiddensolorate.Value = "circulation";
            Session["adtypecode"] = "";
            ////Response.Redirect("login.aspx");
            //Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            //return;
        }

        else
        {
            //Response.Redirect("login.aspx");
            Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            return;

        }

        ip1.Value = Request.ServerVariables["REMOTE_ADDR"];    
        Ajax.Utility.RegisterTypeForAjax(typeof(EditorMaster));

        hiddenusername.Value = Session["Username"].ToString();

        //***************************
        DataSet objDataSetbu = new DataSet();
        // Read in the XML file
        objDataSetbu.ReadXml(Server.MapPath("XML/button.xml"));
        btnNew.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[0].ToString();
        btnSave.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[1].ToString();
        btnModify.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[2].ToString();
        btnQuery.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[3].ToString();
        btnExecute.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[4].ToString();
        btnCancel.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[5].ToString();
        btnfirst.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[6].ToString();
        btnprevious.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[7].ToString();
        btnnext.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[8].ToString();
        btnlast.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[9].ToString();
        btnDelete.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[10].ToString();
        btnExit.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[11].ToString();

        DataSet ds = new DataSet();
        ds.ReadXml(Server.MapPath("XML/editormaster.xml"));
        lbeditioncode .Text = ds.Tables[0].Rows[0].ItemArray[0].ToString();
        lbeditionname .Text = ds.Tables[0].Rows[0].ItemArray[1].ToString();
        lbalias.Text = ds.Tables[0].Rows[0].ItemArray[2].ToString();
        lbpublicationname.Text = ds.Tables[0].Rows[0].ItemArray[3].ToString();
        lbcity.Text = ds.Tables[0].Rows[0].ItemArray[4].ToString();
        lbSelecteditionday.Text = ds.Tables[0].Rows[0].ItemArray[5].ToString();
        lbCountry.Text = ds.Tables[0].Rows[0].ItemArray[6].ToString();
        lbcirculation.Text = ds.Tables[0].Rows[0].ItemArray[7].ToString();
        lbuom.Text = ds.Tables[0].Rows[0].ItemArray[8].ToString();
        lbcolumn.Text = ds.Tables[0].Rows[0].ItemArray[9].ToString();
        lbsize.Text = ds.Tables[0].Rows[0].ItemArray[10].ToString();
        lbheight.Text = ds.Tables[0].Rows[0].ItemArray[11].ToString();
        lbwidth.Text = ds.Tables[0].Rows[0].ItemArray[12].ToString();
        lbedit.Text = ds.Tables[0].Rows[0].ItemArray[13].ToString();
        lbperiodicity.Text = ds.Tables[0].Rows[0].ItemArray[14].ToString();
        lbgutterspace.Text = ds.Tables[0].Rows[0].ItemArray[15].ToString();
        lbcolumnspace.Text = ds.Tables[0].Rows[0].ItemArray[16].ToString();
        lbrotime.Text = ds.Tables[0].Rows[0].ItemArray[17].ToString();
        lbhr.Text = ds.Tables[0].Rows[0].ItemArray[18].ToString();
        lbmin.Text = ds.Tables[0].Rows[0].ItemArray[19].ToString();
        lbproduction.Text = ds.Tables[0].Rows[0].ItemArray[20].ToString();
        lbdaysbefore.Text = ds.Tables[0].Rows[0].ItemArray[21].ToString();
        lbeditiontype.Text = ds.Tables[0].Rows[0].ItemArray[22].ToString();
        lblshortname.Text = ds.Tables[0].Rows[0].ItemArray[26].ToString();
        lblspeciality.Text = ds.Tables[0].Rows[0].ItemArray[28].ToString();
         //*******************************
        //new change 
        lbnoofcol.Text = ds.Tables[0].Rows[0].ItemArray[23].ToString();

        lblsegment.Text = ds.Tables[0].Rows[0].ItemArray[24].ToString();
        lblgrpcod.Text = ds.Tables[0].Rows[0].ItemArray[25].ToString();

        lblerp.Text = ds.Tables[0].Rows[0].ItemArray[27].ToString();

        if (ds.Tables.Count > 1)
        {
            if (ds.Tables[1].Rows[0].ItemArray[0].ToString() == "hide")
            {
                lblprintcent.Attributes.Add("style", "display:none");
                drpprintcent.Attributes.Add("style", "display:none");
            }
            if (ds.Tables[1].Rows[0].ItemArray[1].ToString() == "hide")
            {
                lbnoofcol.Attributes.Add("style", "display:none");
                txtnoofcol.Attributes.Add("style", "display:none");
            }
            if (ds.Tables[1].Rows[0].ItemArray[2].ToString() == "hide")
            {
                lbcirculation.Attributes.Add("style", "display:none");
                txtcirculation.Attributes.Add("style", "display:none");
            }
            if (ds.Tables[1].Rows[0].ItemArray[3].ToString() == "hide")
            {
                lbuom.Attributes.Add("style", "display:none");
                druom.Attributes.Add("style", "display:none");
            }
            if (ds.Tables[1].Rows[0].ItemArray[4].ToString() == "hide")
            {
                lbedit.Attributes.Add("style", "display:none");
            }
        }

    
        if (Session["Username"] == null)
        {
            //Response.Redirect("login.aspx");
            Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            return;
        }
        else
        {
        }
        // Put user code to initialize the page here
        if (!Page.IsPostBack)
        {
            countryname();
            addPub();
            addUOM();
            addperiod();
            addspeciality();
            btnNew.Enabled = true;
            btnSave.Enabled = false;
            btnModify.Enabled = false;
            btnDelete.Enabled = false;
            btnQuery.Enabled = true;
            btnExecute.Enabled = false;
            btnCancel.Enabled = true;
            btnfirst.Enabled = false;
            btnprevious.Enabled = false;
            btnnext.Enabled = false;
            btnlast.Enabled = false;
            btnExit.Enabled = true;
            btnNew.Focus();
            txtEditonCode.Enabled = false;
            drpPubName.Enabled = false;
            drpcity .Enabled = false;
            drpprintcent.Enabled = false;
            txtEditionName.Enabled = false;
            txtAlias.Enabled = false;
            txtcountry.Enabled = false;
            txtcirculation.Enabled = false;
            druom.Enabled = false;
            txtcolumn.Enabled = false;
            txtsizeheight.Enabled = false;
            txtsizewidth.Enabled = false;
            drperiodicity.Enabled = false;
            txtarea.Enabled = false;
            txtgutterspace.Enabled = false;
            txtcolumnspace.Enabled = false;
            txthr.Enabled = false;
            txtmin.Enabled = false;
            txtproduction.Enabled = false;
            radio_bind();
            
            drpeditiontype.Enabled = false;
            txtsegment.Enabled = false;
            txtshortname.Enabled = false;
            ddlspeciality.Enabled = false;

            lblcirc.Attributes.Add("OnClick", "javascript:return opencirc();");
            lbedit.Attributes.Add("OnClick", "javascript:return openedit();"); //for popup
            lblfont.Attributes.Add("OnClick", "javascript:return openfont();"); //for popup

            btnNew.Attributes.Add("OnClick", "javascript:return editionnew();");
            btnSave.Attributes.Add("OnClick", "javascript:return editionsave();");
            btnModify.Attributes.Add("OnClick", "javascript:return editionmodify();");
            btnDelete.Attributes.Add("OnClick", "javascript:return editiondelete();");
            btnQuery.Attributes.Add("OnClick", "javascript:return editionquery();");
            btnExecute.Attributes.Add("OnClick", "javascript:return editionexecute();");
            btnCancel.Attributes.Add("OnClick", "javascript:return editioncancel('EditorMaster');");
            btnfirst.Attributes.Add("OnClick", "javascript:return editionfirst();");
            btnprevious.Attributes.Add("OnClick", "javascript:return editionprevious();");
            btnnext.Attributes.Add("OnClick", "javascript:return editionnext();");
            btnlast.Attributes.Add("OnClick", "javascript:return editionlast();");
            btnExit.Attributes.Add("OnClick", "javascript:return editionexit();");

            CheckBox8.Attributes.Add("OnClick", "javascript:return checkedunchecked('CheckBox8');");
            CheckBox1.Attributes.Add("OnClick", "javascript:return checkedunchecked1('CheckBox1');");
            CheckBox2.Attributes.Add("OnClick", "javascript:return checkedunchecked1('CheckBox2');");
            CheckBox3.Attributes.Add("OnClick", "javascript:return checkedunchecked1('CheckBox3');");
            CheckBox4.Attributes.Add("OnClick", "javascript:return checkedunchecked1('CheckBox4');");
            CheckBox5.Attributes.Add("OnClick", "javascript:return checkedunchecked1('CheckBox5');");
            CheckBox6.Attributes.Add("OnClick", "javascript:return checkedunchecked1('CheckBox6');");
            CheckBox7.Attributes.Add("OnClick", "javascript:return checkedunchecked1('CheckBox7');");

            CheckBox1.Attributes.Add("OnClick", "javascript:return fillchk_chkbox();");
            CheckBox2.Attributes.Add("OnClick", "javascript:return fillchk_chkbox();");
            CheckBox3.Attributes.Add("OnClick", "javascript:return fillchk_chkbox();");
            CheckBox4.Attributes.Add("OnClick", "javascript:return fillchk_chkbox();");
            CheckBox5.Attributes.Add("OnClick", "javascript:return fillchk_chkbox();");
            CheckBox6.Attributes.Add("OnClick", "javascript:return fillchk_chkbox();");
            CheckBox7.Attributes.Add("OnClick", "javascript:return fillchk_chkbox();");
            //CheckBox8.Attributes.Add("OnClick", "javascript:return fillchk_chkbox();");

            txtEditionName.Attributes.Add("OnBlur", "javascript:return ClientUpperCase('txtEditionName');");
            txtAlias.Attributes.Add("OnBlur", "javascript:return ClientUpperCase('txtAlias');");
            txtEditonCode.Attributes.Add("OnBlur", "javascript:return ClientUpperCase2('txtEditonCode');");
            txtEditionName.Attributes.Add("OnChange", "javascript:return autoornot();");
            txtcountry.Attributes.Add("OnChange", "javascript:return addcount();");
            drpPubName.Attributes.Add("OnChange", "javascript:return filledit();");
            drperiodicity.Attributes.Add("OnChange", "javascript:return chkbox_periodicity();");

            drpcity.Attributes.Add("OnChange", "javascript:return autoornot();");
            txtsizeheight.Attributes.Add("OnBlur", "javascript:return fillheight();");
            txtsizewidth.Attributes.Add("OnBlur", "javascript:return fillwidth();");
            txtsizeheight.Attributes.Add("OnChange", "javascript:return chkheight('txtsizeheight');");
            txtsizewidth.Attributes.Add("OnChange", "javascript:return chkwidth('txtsizewidth');");
            /*txtcountry.Attributes.Add("onkeypress", "return keySort(this);");
            drpPubName.Attributes.Add("onkeypress", "return keySort(this);");
            drpcity.Attributes.Add("onkeypress", "return keySort(this);");
            druom.Attributes.Add("onkeypress", "return keySort(this);");
            drperiodicity.Attributes.Add("onkeypress", "return keySort(this);");*/
            txtgutterspace.Attributes.Add("OnChange", "javascript:return checkgutter();");
            txtcolumnspace.Attributes.Add("OnChange", "javascript:return checkcolumn();");
            txtmin.Attributes.Add("OnChange", "javascript:return chkmins();");
            drpeditiontype.Attributes.Add("OnChange", "javascript:return fillname();");
            txtcirculation.Attributes.Add("OnChange", "javascript:return chkcirculations();");
            // txtAlias.Attributes.Add("OnBlur", "javascript:return fillalias();");
            //new change
            txtnoofcol.Attributes.Add("onchange", "javascript:return givetheperidicity();");
            txthr.Attributes.Add("OnBlur", "javascript:return chkhor();");
            txtmin.Attributes.Add("OnBlur", "javascript:return chkmin();");
            txtEditonCode.Attributes.Add("OnBlur", "javascript:return chkecod();");

            txtsegment.Attributes.Add("onkeydown", "javascript:return fillsegment(event)");
            lstsegment.Attributes.Add("onkeydown", "javascript:return onclicksegment(event)");
            lstsegment.Attributes.Add("onclick", "javascript:return onclicksegment(event)");
            txtgutterspace.Attributes.Add("onkeypress", "javascript:return compare()");
            txtcolumnspace.Attributes.Add("onkeypress", "javascript:return compare1()");


            txt1.Attributes.Add("onblur", "javascript:return txtckeckvalue(this.id,event);");
            txt2.Attributes.Add("onblur", "javascript:return txtckeckvalue(this.id,event);");
            txt3.Attributes.Add("onblur", "javascript:return txtckeckvalue(this.id,event);");
            txt4.Attributes.Add("onblur", "javascript:return txtckeckvalue(this.id,event);");
            txt5.Attributes.Add("onblur", "javascript:return txtckeckvalue(this.id,event);");
            txt6.Attributes.Add("onblur", "javascript:return txtckeckvalue(this.id,event);");
            txt7.Attributes.Add("onblur", "javascript:return txtckeckvalue(this.id,event);");
            txt8.Attributes.Add("onblur", "javascript:return txtckeckvalue(this.id,event);");

             }
             if (btnNew.Enabled == false)
                 btnNew.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[0].ToString();
             if (btnSave.Enabled == false)
                 btnSave.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[1].ToString();
             if (btnModify.Enabled == false)
                 btnModify.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[2].ToString();
             if (btnQuery.Enabled == false)
                 btnQuery.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[3].ToString();
             if (btnExecute.Enabled == false)
                 btnExecute.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[4].ToString();
             if (btnCancel.Enabled == false)
                 btnCancel.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[5].ToString();
             if (btnfirst.Enabled == false)
                 btnfirst.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[6].ToString();
             if (btnprevious.Enabled == false)
                 btnprevious.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[7].ToString();
             if (btnnext.Enabled == false)
                 btnnext.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[8].ToString();
             if (btnlast.Enabled == false)
                 btnlast.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[9].ToString();
             if (btnDelete.Enabled == false)
                 btnDelete.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[10].ToString();
             if (btnExit.Enabled == false)
                 btnExit.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[11].ToString();
             btnNew.Focus();
    }
   
    //Function to check main type.......................
    [Ajax.AjaxMethod]
    //PubName,CodeName,CityName,compcode,userid
    public DataSet editiontypecheck(string pub,string type ,string city, string compcode, string userid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster typechk = new NewAdbooking.Classes.EditorMaster();
            ds = typechk.editiontypecheck(pub, type, city, compcode, userid);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster typechk = new NewAdbooking.classesoracle.EditorMaster();
            ds = typechk.editiontypecheck(pub, type, city, compcode, userid);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster typechk = new NewAdbooking.classmysql.EditorMaster();
            ds = typechk.editiontypecheck(pub, type, city, compcode, userid);
            return ds;
        }
    }
    ///************************************************
    //*********** This function is used to check edition code*****************//
    [Ajax.AjaxMethod]
    //		public DataSet editioncodecheck(string EditonCode,string compcode,string userid)
    public DataSet editioncodecheck(string EditonCode, string compcode, string userid, string editionalias)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster codechk = new NewAdbooking.Classes.EditorMaster();

            ds = codechk.editioncodecheck(EditonCode, compcode, userid, editionalias);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster codechk = new NewAdbooking.classesoracle.EditorMaster();
            ds = codechk.editioncodecheck(EditonCode, compcode, userid, editionalias);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster codechk = new NewAdbooking.classmysql.EditorMaster();
            ds = codechk.editioncodecheck(EditonCode, compcode, userid, editionalias);
            return ds;
        }
    }

    //************This function is used to insert record in database***********//

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    //		public DataSet insert(string PubName,string CityName,string EditionName,string Alias,string EditonCode,string compcode,string userid)
    public DataSet insert(string PubName, string CityName, string EditionName, string Alias, string EditonCode, string compcode, string userid, string country, string circulation, string uom, string column, string height, string width, string area, string periodicity, string gutter, string col_space, string hr, string min, string prod, string type, string noofcol, string printcent, string ip, string segment, string grpsave, string SHORTNAME, string epaper, string spename)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.EditorMaster insert = new NewAdbooking.Classes.EditorMaster();
                ds = insert.InsertValue(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, hr, min, prod, type, noofcol, printcent, segment, grpsave, SHORTNAME, epaper, spename);
                //Session["firstdate"] = null;
                //Session["seconddate"] = null;
                //   return ds;
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.EditorMaster insert = new NewAdbooking.classesoracle.EditorMaster();
                ds = insert.InsertValue(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, hr, min, prod, type, noofcol, printcent, segment, grpsave, SHORTNAME, epaper,spename);
                // return ds;
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "websp_editorinsert_websp_editorinsert_p";
                string[] parameterValueArray = { PubName, CityName, EditonCode, EditionName, Alias, userid, compcode, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, hr, min, prod, type, noofcol, printcent, segment, grpsave, SHORTNAME, epaper, spename };
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else
            {
                NewAdbooking.classmysql.EditorMaster insert = new NewAdbooking.classmysql.EditorMaster();
                ds = insert.InsertValue(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, hr, min, prod, type, printcent);
                //return ds;
            }
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string EditonCode1 = "Inserted Edition " + EditonCode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','Edition','" + err.Replace("'", "''") + "','Edition Creation','" + EditonCode1;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
        return ds;
    }

    //************This function is used to delete record from database***********//

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    //		public DataSet deleteedition(string EditonCode,string compcode,string userid)
     public void deleteedition(string EditonCode, string compcode, string userid, string ip)
     {
         DataSet ds = new DataSet();
         string err = "";
         try
         {

             if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
             {
                 NewAdbooking.Classes.EditorMaster del = new NewAdbooking.Classes.EditorMaster();

                 ds = del.deleteedition(EditonCode, compcode, userid);
             }
             else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
             {
                 NewAdbooking.classesoracle.EditorMaster del = new NewAdbooking.classesoracle.EditorMaster();
                 ds = del.deleteedition(EditonCode, compcode, userid);
             }
             else
             {
                 NewAdbooking.classmysql.EditorMaster del = new NewAdbooking.classmysql.EditorMaster();
                 ds = del.deleteedition(EditonCode, compcode, userid);
             }
             //return ds;
         }
         catch (Exception e)
         {
             err = e.Message;
         }
         string EditonCode3 = "Deleted Edition " + EditonCode;
         clsconnection dconnect = new clsconnection();
         string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','Edition','" + err.Replace("'", "''") + "','Edition Deletion','" + EditonCode3;
         sqldd = sqldd + "',";
         sqldd = sqldd + "'" + ip + "')";
         dconnect.executenonquery1(sqldd);
        // return ds;
    }

    //**********This function is used to modify existing record in database**********//

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    //		public DataSet modify(string PubName,string CityName,string EditionName,string Alias,string EditonCode,string compcode,string userid)
    public DataSet modify(string PubName, string CityName, string EditionName, string Alias, string EditonCode, string compcode, string userid, string country, string circulation, string uom, string column, string height, string width, string area, string periodicity, string gutter, string col_space, string hr, string min, string prod, string type, string noofcol, string printcent, string ip, string segmentcode, string grpsave, string SHORTNAME, string epaper, string specialityname)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {

            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.EditorMaster modify = new NewAdbooking.Classes.EditorMaster();
                ds = modify.ModifyValue(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, hr, min, prod, type, noofcol, printcent, segmentcode, grpsave, SHORTNAME, epaper, specialityname);
                //Session["firstdate"] = null;
                //Session["seconddate"] = null;

                //return ds;
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.EditorMaster modify = new NewAdbooking.classesoracle.EditorMaster();
                ds = modify.ModifyValue(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, hr, min, prod, type, noofcol, printcent, segmentcode, grpsave, SHORTNAME, epaper, specialityname);
                //return ds;
            }
            else
            {
                NewAdbooking.classmysql.EditorMaster modify = new NewAdbooking.classmysql.EditorMaster();
                ds = modify.ModifyValue(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, hr, min, prod, type, noofcol, printcent);
                // return ds;
            }
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string EditonCode2 = "Modified Edition " + EditonCode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','Edition','" + err.Replace("'", "''") + "','Edition Modified','" + EditonCode2;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
        return ds;
    }

    //************This function is used to select particular record******************//
    [Ajax.AjaxMethod]
    //		public DataSet Select(string PubName,string CityName,string EditionName,string Alias,string EditonCode,string compcode,string userid)
    public DataSet Select(string PubName, string CityName, string EditionName, string Alias, string EditonCode, string compcode, string userid, string country, string circulation, string uom, string column, string height, string width, string area, string periodicity, string gutter, string col_space, string type, string segmentcode, string grpsave, string SHORTNAME, string epaper)
    {
      //  Session["firstdate"] = null;
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster sel = new NewAdbooking.Classes.EditorMaster();
            ds = sel.SelectValue(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, type, segmentcode, grpsave, SHORTNAME, epaper);

            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster sel = new NewAdbooking.classesoracle.EditorMaster();
            ds = sel.SelectValue(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, type, segmentcode, grpsave, SHORTNAME, epaper);
            return ds;
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "WEBSP_EDITORSELECT";
            string[] parameterValueArray = { PubName, CityName, EditonCode, EditionName, Alias, userid, compcode, country, circulation, uom, column, height, width, area, periodicity, gutter, col_space, type, segmentcode, grpsave, SHORTNAME, epaper };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            return ds;
        }
        return ds;
    }

    //*************This function is used to select first,previous,next and last record*************//

    [Ajax.AjaxMethod]
    //		public DataSet Selectfnpl(string PubName,string CityName,string EditionName,string Alias,string EditonCode,string compcode,string userid)
    public DataSet Selectfnpl(string PubName, string CityName, string EditionName, string Alias, string EditonCode, string compcode, string userid, string country, string circulation, string SHORTNAME)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster select = new NewAdbooking.Classes.EditorMaster();

            ds = select.Selectfnpl(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, SHORTNAME);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster select = new NewAdbooking.classesoracle.EditorMaster();
            ds = select.Selectfnpl(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation, SHORTNAME);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster select = new NewAdbooking.classmysql.EditorMaster();
            ds = select.Selectfnpl(PubName, CityName, EditionName, Alias, EditonCode, compcode, userid, country, circulation);
            return ds;
        }
    }

    //**********This is used to bind publication name***************//
   
     public void addPub()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster PubName = new NewAdbooking.Classes.EditorMaster();
            ds = PubName.Pub(hiddencompcode.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster PubName = new NewAdbooking.classesoracle.EditorMaster();
            ds = PubName.Pub(hiddencompcode.Value);
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster PubName = new NewAdbooking.classmysql.EditorMaster();
            ds = PubName.Pub(hiddencompcode.Value);
        }
            ListItem li1;
            li1 = new ListItem();
            li1.Text = "---Select Publication---";
            li1.Value = "0";
            li1.Selected = true;
            drpPubName.Items.Add(li1);

            int i;
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                drpPubName.Items.Add(li);
            }
   }
      
           
    public void addUOM()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster uom = new NewAdbooking.Classes.EditorMaster();

            ds = uom.uomname(hiddencompcode.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster uom = new NewAdbooking.classesoracle.EditorMaster();
            ds = uom.uomname(hiddencompcode.Value);
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster uom = new NewAdbooking.classmysql.EditorMaster();
            ds = uom.uomname(hiddencompcode.Value);
        }
            ListItem li1;
            li1 = new ListItem();
            li1.Text = "---Select UOM---";
            li1.Value = "0";
            li1.Selected = true;
            druom.Items.Add(li1);

            int i;
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                druom.Items.Add(li);
            }
        }
      
        

    //**********This is used to bind periodicity***************//

    public void addperiod()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster periodcity = new NewAdbooking.Classes.EditorMaster();

            ds = periodcity.periodic(hiddencompcode.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster periodcity = new NewAdbooking.classesoracle.EditorMaster();
            ds = periodcity.periodic(hiddencompcode.Value);
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster periodcity = new NewAdbooking.classmysql.EditorMaster();
            ds = periodcity.periodic(hiddencompcode.Value);
        }
            ListItem li1;
            li1 = new ListItem();
            li1.Text = "---Select Periodicity---";
            li1.Value = "0";
            li1.Selected = true;
            drperiodicity.Items.Add(li1);

            int i;
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                drperiodicity.Items.Add(li);
            }
        }
  
            

    

    #region Web Form Designer generated code
     protected void OnInit(EventArgs e)
    {
        //
        // CODEGEN: This call is required by the ASP.NET Web Form Designer.
        //
        InitializeComponent();
        base.OnInit(e);
    }

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {

    }
    #endregion

    

    //****************This function is used to select edition code*******************//
    [Ajax.AjaxMethod]
    //		public DataSet checkedtioncode1(string hiddencompcode,string editoncode,string userid1)
     public DataSet checkedtioncode1(string hiddencompcode, string editoncode, string userid1)
     {
         DataSet ds = new DataSet();
         if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
         {
             NewAdbooking.Classes.EditorMaster supliment = new NewAdbooking.Classes.EditorMaster();

             ds = supliment.checksupcode(hiddencompcode, editoncode, userid1);
             return ds;
         }
         else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
         {
             NewAdbooking.classesoracle.EditorMaster supliment = new NewAdbooking.classesoracle.EditorMaster();
             ds = supliment.checksupcode(hiddencompcode, editoncode, userid1);
             return ds;
         }
         else
         {
             NewAdbooking.classmysql.EditorMaster supliment = new NewAdbooking.classmysql.EditorMaster();
             ds = supliment.checksupcode(hiddencompcode, editoncode, userid1);
             return ds;
         }
    }

    //*****************This function is used to modify edition days**********************//
    [Ajax.AjaxMethod]
    //		public DataSet edtiondaymodify1(string hiddencompcode,string editoncode,string CheckBox1,string CheckBox2,string CheckBox3,string CheckBox4,string CheckBox5,string CheckBox6,string CheckBox7,string CheckBox8,string userid1)
     public DataSet edtiondaymodify1(string hiddencompcode, string editoncode, string CheckBox1, string CheckBox2, string CheckBox3, string CheckBox4, string CheckBox5, string CheckBox6, string CheckBox7, string CheckBox8, string userid1)
     {
         DataSet ds = new DataSet();
         if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
         {
             NewAdbooking.Classes.EditorMaster modify = new NewAdbooking.Classes.EditorMaster();

             ds = modify.selecteditiondaymodify(hiddencompcode, editoncode, CheckBox1, CheckBox2, CheckBox3, CheckBox4, CheckBox5, CheckBox6, CheckBox7, CheckBox8, userid1);
             return ds;
         }
         else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
         {
             NewAdbooking.classesoracle.EditorMaster modify = new NewAdbooking.classesoracle.EditorMaster();
             ds = modify.selecteditiondaymodify(hiddencompcode, editoncode, CheckBox1, CheckBox2, CheckBox3, CheckBox4, CheckBox5, CheckBox6, CheckBox7, CheckBox8, userid1);
             return ds;
         }
         else
         {
             NewAdbooking.classmysql.EditorMaster modify = new NewAdbooking.classmysql.EditorMaster();
             ds = modify.selecteditiondaymodify(hiddencompcode, editoncode, CheckBox1, CheckBox2, CheckBox3, CheckBox4, CheckBox5, CheckBox6, CheckBox7, CheckBox8, userid1);
             return ds;
         }
    }


    
    //********* This function is used to save edition days******************//
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    //		public DataSet editionpubdaysave1(string hiddencompcode,string editoncode,string CheckBox1,string CheckBox2,string CheckBox3,string CheckBox4,string CheckBox5,string CheckBox6,string CheckBox7,string CheckBox8,string userid1)
    public DataSet editionpubdaysave1(string hiddencompcode, string editoncode, string CheckBox1, string CheckBox2, string CheckBox3, string CheckBox4, string CheckBox5, string CheckBox6, string CheckBox7, string CheckBox8, string userid1)
     {    
         DataSet ds = new DataSet();
        string adtype1= Session["adtypecode"].ToString();
         if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
         {
             NewAdbooking.Classes.EditorMaster save = new NewAdbooking.Classes.EditorMaster();

             ds = save.editiondaysave(hiddencompcode, editoncode, CheckBox1, CheckBox2, CheckBox3, CheckBox4, CheckBox5, CheckBox6, CheckBox7, CheckBox8, userid1, adtype1);
             return ds;
         }
         else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
         {
             NewAdbooking.classesoracle.EditorMaster save = new NewAdbooking.classesoracle.EditorMaster();
             ds = save.editiondaysave(hiddencompcode, editoncode, CheckBox1, CheckBox2, CheckBox3, CheckBox4, CheckBox5, CheckBox6, CheckBox7, CheckBox8, userid1, adtype1);
             return ds;
         }
         else
         {
             NewAdbooking.classmysql.EditorMaster save = new NewAdbooking.classmysql.EditorMaster();
             ds = save.editiondaysave(hiddencompcode, editoncode, CheckBox1, CheckBox2, CheckBox3, CheckBox4, CheckBox5, CheckBox6, CheckBox7, CheckBox8, userid1, adtype1);
             return ds;
         }
    }

  


   


//*****This function is used to bind country name*************//

    public void countryname()
    {
        txtcountry.Items.Clear();
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Master name = new NewAdbooking.Classes.Master();

            ds = name.adcountryname(Session["compcode"].ToString());
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Master name = new NewAdbooking.classesoracle.Master();
            ds = name.adcountryname(Session["compcode"].ToString());
        }
        else
        {
            NewAdbooking.classmysql.Master name = new NewAdbooking.classmysql.Master();
            ds = name.adcountryname(Session["compcode"].ToString());
        }

            ListItem li1;
            li1 = new ListItem();
            li1.Text = "-----Select Country-----";
            li1.Value = "0";
            li1.Selected = true;
            txtcountry.Items.Add(li1);

            int i;
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                txtcountry.Items.Add(li);
            }
        }
 
   //***** This function is used to bind city according to country************//
   /* [Ajax.AjaxMethod]
    public DataSet addcou(string txtcountry)
    {
        NewAdbooking.Classes.Master firstAgency = new NewAdbooking.Classes.Master();
        DataSet ds = new DataSet();
        ds = firstAgency.countcity(txtcountry);
        return ds;
    }*/

    //****************************************************************************
    //***** This function is used to bind city according to country************//
    [Ajax.AjaxMethod]
    public DataSet addcou(string txtcountry)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster firstAgency = new NewAdbooking.Classes.EditorMaster();

            ds = firstAgency.countcity(txtcountry);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster firstAgency = new NewAdbooking.classesoracle.EditorMaster();
            ds = firstAgency.countcity(txtcountry);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster firstAgency = new NewAdbooking.classmysql.EditorMaster();
            ds = firstAgency.countcity(txtcountry);
            return ds;
        }
    }


    //***********This function is used to check edition code according to particular publication name************//
   
    [Ajax.AjaxMethod]
    public DataSet editmaster(string str,string strpub,string strcity)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster chk = new NewAdbooking.Classes.EditorMaster();

            ds = chk.autoeditcode(str, strpub, strcity);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster chk = new NewAdbooking.classesoracle.EditorMaster();
            ds = chk.autoeditcode(str, strpub, strcity);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster chk = new NewAdbooking.classmysql.EditorMaster();
            ds = chk.autoeditcode(str, strpub, strcity);
            return ds;
        }

    }

    //***********This function is used to find city name and publication name ************//
   
    [Ajax.AjaxMethod]
    public DataSet findcity(string city, string pubname)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster find = new NewAdbooking.Classes.EditorMaster();

            ds = find.findcity(city, pubname);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster find = new NewAdbooking.classesoracle.EditorMaster();
            ds = find.findcity(city, pubname);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster find = new NewAdbooking.classmysql.EditorMaster();
            ds = find.findcity(city, pubname);
            return ds;
        }

    }

    
 [Ajax.AjaxMethod]
    public DataSet enablechkbox(string pubname)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster find = new NewAdbooking.Classes.EditorMaster();

            ds = find.enablechkbox(pubname);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster find = new NewAdbooking.classesoracle.EditorMaster();
            ds = find.enablechkbox(pubname);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster find = new NewAdbooking.classmysql.EditorMaster();
            ds = find.enablechkbox(pubname);
            return ds;
        }

    }

    //***********This function is used to check edition code according to particular publication name************//

    [Ajax.AjaxMethod]
    public DataSet editmaster1(string str, string strpub)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster chk = new NewAdbooking.Classes.EditorMaster();

            ds = chk.autoeditcode1(str, strpub);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster chk = new NewAdbooking.classesoracle.EditorMaster();
            ds = chk.autoeditcode1(str, strpub);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster chk = new NewAdbooking.classmysql.EditorMaster();
            ds = chk.autoeditcode1(str, strpub);
            return ds;
        }

    }

    //New Change jay

    [Ajax.AjaxMethod]

    public DataSet chkperiodicty(string periodicty, string publication, string edit_period, string mod, string editcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster chkperiodicty = new NewAdbooking.Classes.EditorMaster();

            ds = chkperiodicty.chkperiodicty(periodicty,publication,edit_period,mod,editcode);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster chkperiodicty = new NewAdbooking.classesoracle.EditorMaster();
            ds = chkperiodicty.chkperiodicty(periodicty, publication, edit_period, mod, editcode);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster chkperiodicty = new NewAdbooking.classmysql.EditorMaster();
            ds = chkperiodicty.chkperiodicty(periodicty);
            return ds;
        }


    }


    [Ajax.AjaxMethod]

    public DataSet chkperiodicty_edition(string edition)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster chkperiodicty = new NewAdbooking.Classes.EditorMaster();

            ds = chkperiodicty.chkperiodicty_edition(edition);

            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster chkperiodicty = new NewAdbooking.classesoracle.EditorMaster();
            ds = chkperiodicty.chkperiodicty_edition(edition);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster chkperiodicty = new NewAdbooking.classmysql.EditorMaster();
            ds = chkperiodicty.chkperiodicty_edition(edition);
            return ds;
        }


    }

    [Ajax.AjaxMethod]

    public void popinsert(string txteditionname, string txtdate, string txtaddate, string compcode, string userid, string editcode, string year)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster insertgrid = new NewAdbooking.Classes.EditorMaster();

            ds = insertgrid.inserteditname(txteditionname, txtdate, txtaddate, compcode, userid, editcode, year);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster insertgrid = new NewAdbooking.classesoracle.EditorMaster();
            ds = insertgrid.inserteditname(txteditionname, txtdate, txtaddate, compcode, userid, editcode, year);
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster insertgrid = new NewAdbooking.classmysql.EditorMaster();
            ds = insertgrid.inserteditname(txteditionname, txtdate, txtaddate, compcode, userid, editcode);
        }
        //Session["firstdate"] = null;
        //Session["seconddate"] = null;




    }

    [Ajax.AjaxMethod]
    public DataSet bindspace(string pubcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster bind_space = new NewAdbooking.Classes.EditorMaster();
            ds = bind_space.space(pubcode);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster bind_space = new NewAdbooking.classesoracle.EditorMaster();
            ds = bind_space.space(pubcode);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster bind_space = new NewAdbooking.classmysql.EditorMaster();
            ds = bind_space.space(pubcode);
            return ds;
        }
    }

    //function for circulations
    [Ajax.AjaxMethod]
    public DataSet circulation(string pub, string city, string compcode, string userid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster chkcirc = new NewAdbooking.Classes.EditorMaster();

            ds = chkcirc.chkcirculations(pub, city, compcode, userid);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster chkcirc = new NewAdbooking.classesoracle.EditorMaster();
            ds = chkcirc.chkcirculations(pub, city, compcode, userid);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster chkcirc = new NewAdbooking.classmysql.EditorMaster();
            ds = chkcirc.chkcirculations(pub, city, compcode, userid);
            return ds;
        }
    }
//-----------------------------New Change--------------------------------------------------------------------
    protected void txtnoofcol_TextChanged(object sender, EventArgs e)
    {

    }

    [Ajax.AjaxMethod]
    public DataSet chkperiodicityno(string pub, string edit, string period, string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster chkperiod = new NewAdbooking.Classes.EditorMaster();
            ds = chkperiod.chkperiodicitynumber(pub, edit, period, compcode);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster chkperiod = new NewAdbooking.classesoracle.EditorMaster();
            ds = chkperiod.chkperiodicitynumber(pub, edit, period, compcode);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster chkperiod = new NewAdbooking.classmysql.EditorMaster();
            ds = chkperiod.chkperiodicitynumber(pub, edit, period, compcode);
            return ds;
        }
      
    }



    [Ajax.AjaxMethod]

    public DataSet ecodechk(string compcode,string ecode)
    {
        DataSet ds = new DataSet();
        string extra1 = "";
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster chkperiodicty = new NewAdbooking.Classes.EditorMaster();

            ds = chkperiodicty.editioncodedub(compcode, ecode,extra1);

            return ds;
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "ADD_CHKEDITCODE";
            string[] parameterValueArray = { compcode, ecode, extra1 };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else 
        {
            NewAdbooking.classesoracle.EditorMaster chkperiodicty = new NewAdbooking.classesoracle.EditorMaster();
            ds = chkperiodicty.editioncodedub(compcode, ecode, extra1);
            
        }


        return ds;

    }



 //--------------------------------------------------------------------------------------
    [Ajax.AjaxMethod]
    public DataSet bind_segment(string compcode, string dateformat, string extra1, string extra2)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster typechk = new NewAdbooking.Classes.EditorMaster();
            ds = typechk.segmentbind(compcode, dateformat,extra1,extra2);
            
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster typechk = new NewAdbooking.classesoracle.EditorMaster();
            ds = typechk.segmentbind(compcode, dateformat, extra1, extra2);
            
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "FA_VOUCHERS_VIEW_FA_SEGMENT_TYPE_MAST_p";
            string[] parameterValueArray = { compcode, dateformat, extra1, extra2 };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
        
    }

    /////////////////////////

    [Ajax.AjaxMethod]
    public DataSet getcentername(string compcode, string centcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster rpt = new NewAdbooking.Classes.EditorMaster();

            ds = rpt.getcostcentname(compcode, centcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster rpt = new NewAdbooking.classesoracle.EditorMaster();

            ds = rpt.getcostcentname(compcode, centcode);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "FA_GET_SEGMENT_NAME";
            string[] parameterValueArray = { compcode, centcode };
            NewAdbooking.classmysql.Master obj = new NewAdbooking.classmysql.Master();
            ds = obj.BindCommanFunction(procedureName, parameterValueArray);
        }
        return ds;

    }



    [Ajax.AjaxMethod]
    //		public DataSet editionpubdaysave1(string hiddencompcode,string editoncode,string CheckBox1,string CheckBox2,string CheckBox3,string CheckBox4,string CheckBox5,string CheckBox6,string CheckBox7,string CheckBox8,string userid1)
    public DataSet editionpubtxtsave1(string hiddencompcode, string editoncode, string txt1, string txt2, string txt3, string txt4, string txt5, string txt6, string txt7, string userid1)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster save = new NewAdbooking.Classes.EditorMaster();
            ds = save.editiontxtsave(hiddencompcode, editoncode, txt1, txt2, txt3, txt4, txt5, txt6, txt7, userid1);
         
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster save = new NewAdbooking.classesoracle.EditorMaster();
            ds = save.editiontxtsave(hiddencompcode, editoncode, txt1, txt2, txt3, txt4, txt5, txt6, txt7, userid1);
         
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
       {
           string procedureName = "editiontxtsave_editiontxtsave_p";
           string[] parameterValueArray = { hiddencompcode, editoncode, txt1, txt2, txt3, txt4, txt5, txt6, txt7, userid1 };
           NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
           ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
       }
        return ds;
    }


    [Ajax.AjaxMethod]
    public DataSet edtiontxtmodify1(string hiddencompcode, string editoncode, string txt1, string txt2, string txt3, string txt4, string txt5, string txt6, string txt7,  string userid1)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster modify = new NewAdbooking.Classes.EditorMaster();
            ds = modify.selecteditiontxtmodify(hiddencompcode, editoncode, txt1, txt2, txt3, txt4, txt5, txt6, txt7, userid1);
           
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster modify = new NewAdbooking.classesoracle.EditorMaster();
            ds = modify.selecteditiontxtmodify(hiddencompcode, editoncode, txt1, txt2, txt3, txt4, txt5, txt6, txt7, userid1);

        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "editiontxtsave_editiontxtmodify";
            string[] parameterValueArray = { hiddencompcode, editoncode, txt1, txt2, txt3, txt4, txt5, txt6, txt7, userid1 };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet checkedtiontxt(string hiddencompcode, string editoncode, string userid1)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster supliment = new NewAdbooking.Classes.EditorMaster();
            ds = supliment.checkedtiontxt(hiddencompcode, editoncode, userid1);
           
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster supliment = new NewAdbooking.classesoracle.EditorMaster();
            ds = supliment.checkedtiontxt(hiddencompcode, editoncode, userid1);
            
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "editiontxtsave_checkedtiontxt";
            string[] parameterValueArray = { hiddencompcode, editoncode, userid1 };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet mainsaveinfo(string seq, string comcode, string crcuno, string rdrno, string state, string dist, string city, string editioncode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.editionmast_circulation supost = new NewAdbooking.Classes.editionmast_circulation();
            ds = supost.saveinfomain(seq, comcode, crcuno, rdrno ,state, dist, city, editioncode);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "SAVE_CICU_MAIN";
            string[] parameterValueArray = { seq, comcode, crcuno, rdrno, state, dist, city, editioncode };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            NewAdbooking.classesoracle.EditorMaster voucherent = new NewAdbooking.classesoracle.EditorMaster();
            ds = voucherent.saveinfomain(seq, comcode, crcuno, rdrno, state, dist, city, editioncode);
        }
         
        return ds;
    }
    public void addspeciality()
    {
        ddlspeciality.Items.Clear();
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster spename = new NewAdbooking.Classes.EditorMaster();
            ds = spename.spname(hiddencompcode.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster PubName = new NewAdbooking.classesoracle.EditorMaster();
            ds = PubName.spname(hiddencompcode.Value);
        }
        else
        {
            NewAdbooking.classmysql.EditorMaster spename = new NewAdbooking.classmysql.EditorMaster();
            ds = spename.spname(hiddencompcode.Value);
        }
         ListItem li1;
        li1 = new ListItem();
        li1.Text = "---Select Speciality---";
        li1.Value = "0";
        li1.Selected = true;
        ddlspeciality.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            ddlspeciality.Items.Add(li);
        }
    }


    public void radio_bind()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.EditorMaster radiobind = new NewAdbooking.Classes.EditorMaster();

            ds = radiobind.filldatatype(hiddencompcode.Value, hiddenuserid.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.EditorMaster radiobind = new NewAdbooking.classesoracle.EditorMaster();
            ds = radiobind.filldatatype(hiddencompcode.Value, hiddenuserid.Value);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            string procedureName = "bindadtypeforedition";
            string[] parameterValueArray = { hiddencompcode.Value, hiddenuserid.Value };
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {//bindadtypeforedition
            NewAdbooking.classmysql.pop radiobind = new NewAdbooking.classmysql.pop();
            ds = radiobind.filldatapay(hiddencompcode.Value, hiddenuserid.Value);
        }

        string adcode = "";
        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem ls = new ListItem();
        
            ls.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            ls.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
        
            chklistsubmit.Items.Add(ls);
           

            //Checking 4 user has selected any value  or not
            string[] myvalue;
            if (Session["MySelectedValue"] != null)
            {
                myvalue = Session["MySelectedValue"].ToString().Split(',');
                for (int k = 0; k < myvalue.Length - 1; k++)
                {
                    if (ls.Value == myvalue[k])
                    {
                        chklistsubmit.Items[i].Selected = true;
                    }
                }
            }

        }
       
    }

      protected void btnSubmit_Click(object sender, EventArgs e)

    {
        string adcode = "";
        foreach (ListItem li in chklistsubmit.Items)

        {
            if (li.Selected)

            {
                if (adcode == "")
                    adcode = li.Value;
                else
                    adcode = adcode + "," + li.Value;

            }
            hdncodetype.Value = adcode;
        }
        Session["adtypecode"] = adcode;
        hdncodetype.Value = Session["adtypecode"].ToString();
     
    }

      [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
      public string flagadtype()
      {
          string rr = "";
       //   hdncodetype.Value = Session["adtypecode"].ToString();
          rr = HttpContext.Current.Session["adtypecode"].ToString();
          return rr;

      }
}