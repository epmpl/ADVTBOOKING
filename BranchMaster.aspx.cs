using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class BranchMaster : System.Web.UI.Page
{
    string dateformat, userid, username, compcode;

    protected void Page_Load(object sender, System.EventArgs e)
    {

        Response.Expires = -1;

        if (Session["compcode"] == null)
        {

            Response.Write("<script>alert('Your session has been Expired');window.close();</script>");
            return;
        }
        ip1.Value = Request.ServerVariables["REMOTE_ADDR"];
        Ajax.Utility.RegisterTypeForAjax(typeof(BranchMaster));


        pagedef();

        userid = Session["userid"].ToString();
        hiddenuserid.Value = userid;

        username = Session["Username"].ToString();
        hiddenusername.Value = username;

        compcode = Session["compcode"].ToString();
        hiddencompcode.Value = compcode;

        dateformat = Session["dateformat"].ToString();
        hiddenDateFormat.Value = dateformat;

        hiddenauto.Value = Session["autogenerated"].ToString();



        DataSet ds = new DataSet();
        ds.ReadXml(Server.MapPath("XML/button.xml"));

        btnNew.ImageUrl = ds.Tables[0].Rows[0].ItemArray[0].ToString();
        btnSave.ImageUrl = ds.Tables[0].Rows[0].ItemArray[1].ToString();
        btnModify.ImageUrl = ds.Tables[0].Rows[0].ItemArray[2].ToString();
        btnQuery.ImageUrl = ds.Tables[0].Rows[0].ItemArray[3].ToString();
        btnExecute.ImageUrl = ds.Tables[0].Rows[0].ItemArray[4].ToString();
        btnCancel.ImageUrl = ds.Tables[0].Rows[0].ItemArray[5].ToString();
        btnfirst.ImageUrl = ds.Tables[0].Rows[0].ItemArray[6].ToString();
        btnprevious.ImageUrl = ds.Tables[0].Rows[0].ItemArray[7].ToString();
        btnnext.ImageUrl = ds.Tables[0].Rows[0].ItemArray[8].ToString();
        btnlast.ImageUrl = ds.Tables[0].Rows[0].ItemArray[9].ToString();
        btnDelete.ImageUrl = ds.Tables[0].Rows[0].ItemArray[10].ToString();
        btnExit.ImageUrl = ds.Tables[0].Rows[0].ItemArray[11].ToString();

        DataSet ds1 = new DataSet();
        ds1.ReadXml(Server.MapPath("XML/BranchMaster.xml"));
        BranchCode.Text = ds1.Tables[0].Rows[0].ItemArray[0].ToString();
        BranchName.Text = ds1.Tables[0].Rows[0].ItemArray[1].ToString();
        Alias.Text = ds1.Tables[0].Rows[0].ItemArray[2].ToString();
        branchn.Text = ds1.Tables[0].Rows[0].ItemArray[17].ToString();
        Address1.Text = ds1.Tables[0].Rows[0].ItemArray[3].ToString();
        Street.Text = ds1.Tables[0].Rows[0].ItemArray[4].ToString();
        City.Text = ds1.Tables[0].Rows[0].ItemArray[5].ToString();
        PinCode.Text = ds1.Tables[0].Rows[0].ItemArray[6].ToString();
        District.Text = ds1.Tables[0].Rows[0].ItemArray[7].ToString();
        State.Text = ds1.Tables[0].Rows[0].ItemArray[8].ToString();
        Country.Text = ds1.Tables[0].Rows[0].ItemArray[9].ToString();
        Phone.Text = ds1.Tables[0].Rows[0].ItemArray[10].ToString();
        Fax.Text = ds1.Tables[0].Rows[0].ItemArray[11].ToString();
        EmailId.Text = ds1.Tables[0].Rows[0].ItemArray[12].ToString();
        Zone.Text = ds1.Tables[0].Rows[0].ItemArray[13].ToString();
        Region.Text = ds1.Tables[0].Rows[0].ItemArray[14].ToString();
        lbpubcenter.Text = ds1.Tables[0].Rows[0].ItemArray[15].ToString();
        lblboxadd.Text = ds1.Tables[0].Rows[0].ItemArray[16].ToString();
        txtdept.Text = ds1.Tables[0].Rows[0].ItemArray[18].ToString();
        txtdept1.Text = ds1.Tables[0].Rows[0].ItemArray[19].ToString();
        txtdept2.Text = ds1.Tables[0].Rows[0].ItemArray[20].ToString();
        txtdept3.Text = ds1.Tables[0].Rows[0].ItemArray[21].ToString();
        txtdept4.Text = ds1.Tables[0].Rows[0].ItemArray[22].ToString();
        txtdept5.Text = ds1.Tables[0].Rows[0].ItemArray[23].ToString();
        lblGSTIN.Text = ds1.Tables[0].Rows[0].ItemArray[24].ToString();

        lblacountholder.Text = ds1.Tables[0].Rows[0].ItemArray[25].ToString();
        lblbankname.Text = ds1.Tables[0].Rows[0].ItemArray[26].ToString();
        lblbankacount.Text = ds1.Tables[0].Rows[0].ItemArray[27].ToString();
        lblbankbranch.Text = ds1.Tables[0].Rows[0].ItemArray[28].ToString();
        lblbankcity.Text = ds1.Tables[0].Rows[0].ItemArray[29].ToString();
        lblifsc.Text = ds1.Tables[0].Rows[0].ItemArray[30].ToString();
        DataSet comm_nam = new DataSet();
        // Read in the XML file
        comm_nam.ReadXml(Server.MapPath("XML/Comm_detail.xml"));
        lblintegration.Text = comm_nam.Tables[0].Rows[0].ItemArray[12].ToString();


        if (btnNew.Enabled == false)
            btnNew.ImageUrl = ds.Tables[1].Rows[0].ItemArray[0].ToString();
        if (btnSave.Enabled == false)
            btnSave.ImageUrl = ds.Tables[1].Rows[0].ItemArray[1].ToString();
        if (btnModify.Enabled == false)
            btnModify.ImageUrl = ds.Tables[1].Rows[0].ItemArray[2].ToString();
        if (btnQuery.Enabled == false)
            btnQuery.ImageUrl = ds.Tables[1].Rows[0].ItemArray[3].ToString();
        if (btnExecute.Enabled == false)
            btnExecute.ImageUrl = ds.Tables[1].Rows[0].ItemArray[4].ToString();
        if (btnCancel.Enabled == false)
            btnCancel.ImageUrl = ds.Tables[1].Rows[0].ItemArray[5].ToString();
        if (btnfirst.Enabled == false)
            btnfirst.ImageUrl = ds.Tables[1].Rows[0].ItemArray[6].ToString();
        if (btnprevious.Enabled == false)
            btnprevious.ImageUrl = ds.Tables[1].Rows[0].ItemArray[7].ToString();
        if (btnnext.Enabled == false)
            btnnext.ImageUrl = ds.Tables[1].Rows[0].ItemArray[8].ToString();
        if (btnlast.Enabled == false)
            btnlast.ImageUrl = ds.Tables[1].Rows[0].ItemArray[9].ToString();
        if (btnDelete.Enabled == false)
            btnDelete.ImageUrl = ds.Tables[1].Rows[0].ItemArray[10].ToString();
        if (btnExit.Enabled == false)
            btnExit.ImageUrl = ds.Tables[1].Rows[0].ItemArray[11].ToString();
        btnNew.Focus();

        //drppubcenter.SelectedValue = "0";
        // txtbranchcode.Text ="";
        // txtbranchname.Text ="";
        // txtalias.Text = " ";
        // Textnick.Text = " ";
        // txtaddress.Text = " ";
        // txtstreet.Text = " ";
        // txtcountry.SelectedValue = "0";
        // drpcity.SelectedValue = "0";
        // txtpin.Text = " ";
        // txtdist.Text = " ";
        // txtstate.Text = " ";
        // drpzone.SelectedValue = "0";
        // drpregion.SelectedValue = "0";
        // txtphone1.Text = " ";
        // txtfax.Text = " ";
        // txtemail.Text = " ";
        // txtboxadd.Text = " ";
        // txtemail.Text = " ";

        if (!Page.IsPostBack)
        {
            addcit();
            addregion();
            adzone();
            adcountry();
            drppubcenter.Attributes.Add("OnChange", "javascript:return chkbranch();");
            txtbranchname.Attributes.Add("OnBlur", "javascript:return uppercase1('txtbranchname');");
            txtalias.Attributes.Add("OnBlur", "javascript:return uppercase2('txtalias');");
            txtbranchcode.Attributes.Add("OnBlur", "javascript:return uppercase2('txtbranchcode');");
            txtaddress.Attributes.Add("OnBlur", "javascript:return uppercase4('txtaddress');");
            txtstreet.Attributes.Add("OnBlur", "javascript:return uppercase5('txtstreet');");

            drpcity.Attributes.Add("OnBlur", "javascript:return citydist();");
            txtcountry.Attributes.Add("OnBlur", "javascript:return addcount_branch(this);");
            // txtcountry.Attributes.Add("onkeydown", "javascript:return addcount_branch(this);");

            btnNew.Attributes.Add("OnClick", "javascript:return brnew();");
            btnSave.Attributes.Add("OnClick", "javascript:return brsave();");
            btnQuery.Attributes.Add("OnClick", "javascript:return brquery();");
            btnExecute.Attributes.Add("OnClick", "javascript:return brexe();");
            btnfirst.Attributes.Add("OnClick", "javascript:return brfirst();");
            btnnext.Attributes.Add("OnClick", "javascript:return brnext();");
            btnlast.Attributes.Add("OnClick", "javascript:return brlast();");
            btnprevious.Attributes.Add("OnClick", "javascript:return brpre();");
            btnModify.Attributes.Add("OnClick", "javascript:return brmodify();");
            btnCancel.Attributes.Add("OnClick", "javascript:return brcancle('BranchMaster');");
            btnExit.Attributes.Add("OnClick", "javascript:return brexit();");
            btnDelete.Attributes.Add("OnClick", "javascript:return branchdelete();");
            lbcontdetails.Attributes.Add("OnClick", "javascript:return openpopup();");

            txtbranchname.Attributes.Add("OnChange", "javascript:return autoornot();");
            txtcountry.Attributes.Add("onkeypress", "return keySort(this);");
            drpcity.Attributes.Add("onkeypress", "return keySort(this);");
            drpregion.Attributes.Add("onkeypress", "return keySort(this);");
            drpzone.Attributes.Add("onkeypress", "return keySort(this);");
            //  txtbranchcode.Attributes.Add("OnBlur", "javascript:return checkcode();");


            txtemail.Attributes.Add("OnBlur", "javascript:return checkEmail();");
            fillPubCenter();
        }

    }

    #region Web Form Designer generated code
    protected void OnInit(EventArgs e)
    {
        //
        // CODEGEN: This call is required by the ASP.NET Web Form Designer.
        //
        InitializeComponent();
        base.OnInit(e);
    }

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {

    }
    #endregion
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void blanksession()
    {
        Session["branchsave"] = null;
    }

    public DataSet addcit()
    {
        drpcity.Items.Clear();

        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "clientfillcity";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "clientfillcity.clientfillcity_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "clientfillcity_clientfillcity_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-----Select City-----";
        li1.Value = "0";
        li1.Selected = true;
        drpcity.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                drpcity.Items.Add(li);
            }
        }
        return ds;
    }


    public void addregion()
    {
        DataSet ds = new DataSet();
        string comp_code = Session["compcode"].ToString();
        string[] parameterValueArray = new string[] { comp_code };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "regionbind";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "regionbind.regionbind_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "regionbind_regionbind_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-----Select Region-----";
        li1.Value = "0";
        li1.Selected = true;
        drpregion.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                drpregion.Items.Add(li);
            }
        }

    }


    public void adzone()
    {
        DataSet ds = new DataSet();
        string comp_code = Session["compcode"].ToString();
        string[] parameterValueArray = new string[] { comp_code };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "zonebind";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "zonebind.zonebind_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }

        else
        {
            string procedureName = "zonebind_zonebind_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }

        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-----Select Zone-----";
        li1.Value = "0";
        li1.Selected = true;
        drpzone.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                drpzone.Items.Add(li);
            }
        }

    }

    public void adcountry()
    {
        DataSet ds = new DataSet();
        string comp_code = Session["compcode"].ToString();
        string[] parameterValueArray = new string[] { comp_code };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "adcountryname";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "adcountryname.adcountryname_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "adcountryname_adcountryname_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "---Select Country---";
        li1.Value = "0";
        li1.Selected = true;
        txtcountry.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                txtcountry.Items.Add(li);
            }
        }

    }

    [Ajax.AjaxMethod]
    public DataSet addcou(string txtcountry)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { txtcountry };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "fillcity";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "fillcity.fillcity_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "fillcity_fillcity_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }

    [Ajax.AjaxMethod]
    //		public DataSet citysel(string city)
    public DataSet citysel(string city)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { city };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "fillstaedistcountry";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "fillstaedistcountry.fillstaedistcountry_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "fillstaedistcountry_fillstaedistcountry_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }

    //		public void pagedef()
    public void pagedef()
    {
        btnNew.Enabled = true;
        btnSave.Enabled = false;
        btnModify.Enabled = false;
        btnDelete.Enabled = false;
        btnQuery.Enabled = true;
        btnExecute.Enabled = false;
        btnCancel.Enabled = true;
        btnfirst.Enabled = false;
        btnprevious.Enabled = false;
        btnnext.Enabled = false;
        btnlast.Enabled = false;
        btnExit.Enabled = true;

        txtbranchcode.Enabled = false;
        txtbranchname.Enabled = false;
        txtalias.Enabled = false;
        txtaddress.Enabled = false;
        txtstreet.Enabled = false;
        drpcity.Enabled = false;
        txtdist.Enabled = false;
        txtstate.Enabled = false;
        txtcountry.Enabled = false;
        txtfax.Enabled = false;
        txtpin.Enabled = false;
        txtphone2.Enabled = false;
        txtphone1.Enabled = false;
        txtfinphone1.Enabled = false;
        txtfinphone2.Enabled = false;
        txtcollphone1.Enabled = false;
        txtcollphone2.Enabled = false;
        txtcirphone1.Enabled = false;
        txtcirphone2.Enabled = false;
        txtnpphone1.Enabled = false;
        txtnpphone2.Enabled = false;
        txtstphone1.Enabled = false;
        txtstphone2.Enabled = false;
        txtemail.Enabled = false;
        txtGSTIN.Enabled = false;
        txtpanno.Enabled = false;
        drpregion.Enabled = false;
        drpzone.Enabled = false;
        lbcontdetails.Enabled = false;
        drppubcenter.Enabled = false;
        txtboxadd.Enabled = false;
        txtifsc.Enabled = false;
        txtbankcity.Enabled = false;
        txtbankbranch.Enabled = false;
        txtbankacount.Enabled = false;
        txtbankname.Enabled = false;
        txtholder.Enabled = false;
    }

    [Ajax.AjaxMethod]
    public void chkbranch(string compcode, string userid, string branchcode, string branchname, string alias)
    {
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet chkpubcatcode(string str)
    {
        DataSet ds = new DataSet();
        string comp_code = Session["compcode"].ToString();
        string[] parameterValueArray = new string[] { str, comp_code };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "chkpubcatcode";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "chkpubcatcode";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "chkpubcatcode";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet chkbranchcode(string str, string pubcent)
    {
        DataSet ds = new DataSet();
        string code = "";
        if (str.Length > 2)
        {
            code = str.Substring(0, 2);
        }
        else
        {
            code = str;
        }
        string comp_code = Session["compcode"].ToString();
        string[] parameterValueArray = new string[] { str, code, pubcent, comp_code };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "branchchkcodename";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "branchchkcodename.branchchkcodename_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "branchchkcodename_branchchkcodename_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet insertbranch(string compcode, string userid, string branchcode, string branchname, string alias, string address, string street, string city, string dist, string state, string country, string fax, string pin, string phone1, string phone2, string email, string region, string zone, string boxadd, string Branchnick, string branchaccont, string finphone1, string finphone2, string collph1, string collph2, string cirph1, string cirph2, string npph1, string npph2, string stph1, string stph2, string integration, string GSTIN, string pan, string accont_holder, string bank_name, string bank_account, string bank_branchcode, string bank_citycode, string bank_ifsccode)
    {
        DataSet ds = new DataSet();
        string comp_code = Session["compcode"].ToString();
        string[] parameterValueArray = new string[] { compcode, userid, branchcode, branchname, alias, address, street, city, dist, state, country, fax, pin, phone1, phone2, email, region, zone, boxadd, Branchnick, branchaccont, finphone1, finphone2, collph1, collph2, cirph1, cirph2, npph1, npph2, stph1, stph2, integration, GSTIN, pan, accont_holder, bank_name, bank_account, bank_branchcode, bank_citycode, bank_ifsccode };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "branchinsert";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "branchinsert.branchinsert_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "branchinsert_branchinsert_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet updatebranch(string compcode, string userid, string branchcode, string branchname, string alias, string address, string street, string city, string dist, string state, string country, string fax, string pin, string phone1, string phone2, string email, string bregion, string bzone, string pubcenter, string ip, string boxadd, string Branchnick, string finphone1, string finphone2, string collph1, string collph2, string cirph1, string cirph2, string npph1, string npph2, string stph1, string stph2, string integration, string gstin, string pan, string accont_holder, string bank_name, string bank_account, string bank_branchcode, string bank_citycode, string bank_ifsccode)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            string[] parameterValueArray = new string[] { compcode, userid, branchcode, branchname, alias, address, street, city, dist, state, country, fax, pin, phone1, phone2, email, bregion, bzone, pubcenter, boxadd, Branchnick, null, finphone1, finphone2, collph1, collph2, cirph1, cirph2, npph1, npph2, stph1, stph2, integration, gstin, pan, accont_holder, bank_name, bank_account, bank_branchcode, bank_citycode, bank_ifsccode };
            //  string[] parameterValueArray = new string[] { userid, branchcode, branchname, alias, address, street, city, dist, state, country, fax, pin, phone1, phone2, email, bregion, bzone, pubcenter, boxadd, Branchnick,null, finphone1, finphone2, collph1, collph2, cirph1, cirph2, npph1, npph2, stph1, stph2, integration };
            if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
            {
                string procedureName = "branchupdate";
                NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                string procedureName = "branchupdate.branchupdate_p";
                NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else
            {
                string procedureName = "branchupdate_branchupdate_p";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

            }
            return ds;

        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string branchcode11 = "Modified Branch " + branchcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["UserId"] + "','Branch','" + err.Replace("'", "''") + "','Bracch Updated','" + branchcode11;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
        return ds;
    }


    [Ajax.AjaxMethod]
    //		public DataSet exebranch(string compcode,string userid,string branchcode,string branchname,string alias,string city)
    public DataSet exebranch(string compcode, string userid, string branchcode, string branchname, string alias, string country, string city, string pubcenter, string dateformat)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { compcode, userid, branchcode, branchname, alias, country, city, pubcenter };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "branchexe";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "branchexe.branchexe_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "branchexe_branchexe_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }

    [Ajax.AjaxMethod]
    //		public DataSet fnplbranch(string compcode,string userid)
    public DataSet fnplbranch(string compcode, string userid)
    {

        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { compcode, userid };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "branchexe";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "branchfnpl.branchfnpl_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "branchfnpl_branchfnpl_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }


    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    //		public DataSet delet(string compcode,string userid,string branchcode)
    public void delet(string compcode, string userid, string branchcode, string ip)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            //DataSet ds = new DataSet();
            string[] parameterValueArray = new string[] { compcode, userid, branchcode };
            if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
            {
                string procedureName = "branchdel";
                NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                string procedureName = "branchdel.branchdel_p";
                NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else
            {
                string procedureName = "branchdel_branchdel_p";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

            }
            //return ds;
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string branchcode2 = "Deleted Branch " + branchcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["UserId"] + "','Branch','" + err.Replace("'", "''") + "','Bracch Deleted','" + branchcode2;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
    }

    protected void drpcity_SelectedIndexChanged(object sender, System.EventArgs e)
    {

    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        string compcode = Session["compcode"].ToString();
        string userid = Session["userid"].ToString();
        string branchcode = txtbranchcode.Text;
        string branchcode1 = hiddenbranch.Value;
        string branchname = txtbranchname.Text;
        string alias = txtalias.Text;

        string address = txtaddress.Text;
        string street = txtstreet.Text;
        string city = hiddencity.Value;

        string dist = hiddendist.Value;
        string state = hiddenstate.Value;
        string country = txtcountry.SelectedValue;

        string fax = txtfax.Text;
        string pin = txtpin.Text;
        string phone1 = txtphone1.Text;

        string phone2 = txtphone2.Text;
        string finphone1 = txtfinphone1.Text;
        string finphone2 = txtfinphone2.Text;
        string collph1 = txtcollphone1.Text;
        string collph2 = txtcollphone2.Text;
        string cirph1 = txtcirphone1.Text;
        string cirph2 = txtcirphone2.Text;
        string npph1 = txtnpphone1.Text;
        string npph2 = txtnpphone2.Text;
        string stph1 = txtstphone1.Text;
        string stph2 = txtstphone2.Text;
        string email = txtemail.Text;
        string GSTIN = txtGSTIN.Text;
        string pan = txtpanno.Text;
        string zone = drpzone.SelectedValue;
        string region = drpregion.SelectedValue;
        string pubcenter = drppubcenter.SelectedValue;
        string boxadd = txtboxadd.Text;
        string Branchnick = Textnick.Text;
        string branchaccont = "";
        string integration = txtintegration.Text;
     
        string accont_holder = txtholder.Text;
        string bank_name = txtbankname.Text;
        string bank_account = txtbankacount.Text;
        string bank_branchcode = txtbankbranch.Text;
        string bank_citycode = txtbankcity.Text;
        string bank_ifsccode = txtifsc.Text;
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            // DataSet ds = new DataSet();
            string[] parameterValueArray = new string[] { compcode, userid, branchcode, branchname, alias, address, street, city, dist, state, country, fax, pin, phone1, phone2, email, region, zone, boxadd, Branchnick, branchaccont, finphone1, finphone2, collph1, collph2, cirph1, cirph2, npph1, npph2, stph1, stph2, integration, pubcenter, GSTIN, pan, accont_holder, bank_name, bank_account, bank_branchcode, bank_citycode, bank_ifsccode  };
            if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
            {
                string procedureName = "branchinsert";
                NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                string procedureName = "branchinsert.branchinsert_p";
                NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else
            {
                string procedureName = "branchinsert_branchinsert_p1";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

            }
            //return ds;

        }
        catch (Exception k)
        {
            err = k.Message;
        }
        string branchcode111 = "Inserted Branch " + branchcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["UserId"] + "','Branch','" + err.Replace("'", "''") + "','Bracch Created','" + branchcode111;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + Request.ServerVariables["REMOTE_ADDR"] + "')";
        dconnect.executenonquery1(sqldd);

        DataSet db = (DataSet)Session["branchsave"];
        if (db != null)
        {
            int er = db.Tables[0].Rows.Count;
            int gf = db.Tables.Count;
            for (int b = 0; b <= gf - 1; b++)
            {
                string contactperson = db.Tables[b].Rows[0].ItemArray[0].ToString();
                string txtdesignation = db.Tables[b].Rows[0].ItemArray[1].ToString();
                string txtdob = chkdateformat(db.Tables[b].Rows[0].ItemArray[2].ToString());
                string txtphoneno = db.Tables[b].Rows[0].ItemArray[3].ToString();
                string txtext = db.Tables[b].Rows[0].ItemArray[4].ToString();
                string txtfaxno = db.Tables[b].Rows[0].ItemArray[5].ToString();
                string mail = db.Tables[b].Rows[0].ItemArray[6].ToString();



                DataSet ds1 = new DataSet();
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
                {
                    NewAdbooking.Classes.BranchMaster contactinsert = new NewAdbooking.Classes.BranchMaster();

                    ds1 = contactinsert.insertcontact(contactperson, txtdesignation, txtdob, txtphoneno, txtext, txtfaxno, mail, userid, branchcode1, compcode);
                }

                else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.BranchMaster contactinsert = new NewAdbooking.classesoracle.BranchMaster();

                    ds1 = contactinsert.insertcontact(contactperson, txtdesignation, txtdob, txtphoneno, txtext, txtfaxno, mail, userid, branchcode1, compcode);

                }
                else
                {
                    NewAdbooking.classmysql.BranchMaster contactinsert = new NewAdbooking.classmysql.BranchMaster();
                    ds1 = contactinsert.insertcontact(contactperson, txtdesignation, txtdob, txtphoneno, txtext, txtfaxno, mail, userid, branchcode1, compcode);
                }




            }
        }
        else
        {
            txtbranchcode.Text = "";
            txtbranchname.Text = "";
            txtalias.Text = "";

            txtaddress.Text = "";
            txtstreet.Text = "";
            drpcity.SelectedValue = "0";

            txtdist.Text = "";
            txtstate.Text = "";
            txtcountry.SelectedValue = "0";

            txtfax.Text = "";
            txtpin.Text = "";
            txtphone1.Text = "";

            txtphone2.Text = "";
            txtfinphone1.Text = "";
            txtfinphone2.Text = "";
            txtcollphone1.Text = "";
            txtcollphone2.Text = "";
            txtcirphone1.Text = "";
            txtcirphone2.Text = "";
            txtnpphone1.Text = "";
            txtnpphone2.Text = "";
            txtstphone1.Text = "";
            txtstphone2.Text = "";
            txtemail.Text = "";
            drpzone.SelectedValue = "0";
            drpregion.SelectedValue = "0";
            Session["branchsave"] = null;
            return;
        }
        Session["branchsave"] = null;

        txtbranchcode.Text = "";
        txtbranchname.Text = "";
        txtalias.Text = "";

        txtaddress.Text = "";
        txtstreet.Text = "";
        drpcity.SelectedValue = "0";

        txtdist.Text = "";
        txtstate.Text = "";
        txtcountry.SelectedValue = "0";

        txtfax.Text = "";
        txtpin.Text = "";
        txtphone1.Text = "";

        txtphone2.Text = "";
        txtfinphone1.Text = "";
        txtfinphone2.Text = "";
        txtcollphone1.Text = "";
        txtcollphone2.Text = "";
        txtcirphone1.Text = "";
        txtcirphone2.Text = "";
        txtnpphone1.Text = "";
        txtnpphone2.Text = "";
        txtstphone1.Text = "";
        txtstphone2.Text = "";
        txtemail.Text = "";
        drpzone.SelectedValue = "0";
        drpregion.SelectedValue = "0";

        txtifsc.Text = "";
        txtbankcity.Text = "";
        txtbankbranch.Text = "";
        txtbankacount.Text = "";
        txtbankname.Text = "";
        txtholder.Text = "";


        btnNew.Enabled = true;
        btnQuery.Enabled = true;
        btnCancel.Enabled = true;
        btnExit.Enabled = true;

        btnSave.Enabled = false;
        btnModify.Enabled = false;
        btnDelete.Enabled = false;
        btnExecute.Enabled = false;
        btnfirst.Enabled = false;
        btnnext.Enabled = false;
        btnprevious.Enabled = false;
        btnlast.Enabled = false;
        lbcontdetails.Enabled = false;


        ScriptManager.RegisterClientScriptBlock(this, typeof(BranchMaster), "cancel", "brcancle('BranchMaster');", true);


    }

    protected void AspNetMessageBox(string strMessage)
    {
        string strAlert = "";
        strAlert = "alert('" + strMessage + "')";
        ScriptManager.RegisterClientScriptBlock(this, typeof(BranchMaster), "ShowAlert", strAlert, true);

    }

    protected string chkdateformat(string datevalue)
    {
        string dateformat = Session["dateformat"].ToString();
        string txtdob = "";
        if (dateformat == "dd/mm/yyyy")
        {
            if (datevalue != "")
            {
                string[] txt1 = datevalue.Split('/');
                string dd = txt1[0];
                string mm = txt1[1];
                string yy = txt1[2];
                txtdob = mm + '/' + dd + '/' + yy;
            }
        }

        else if (dateformat == "yyyy/mm/dd")
        {
            if (datevalue != "")
            {
                string[] txt1 = datevalue.Split('/');
                string yy = txt1[0];
                string mm = txt1[1];
                string dd = txt1[2];
                txtdob = mm + '/' + dd + '/' + yy;
            }
        }

        else if (dateformat == "mm/dd/yyyy")
        {
            txtdob = datevalue;
        }
        return txtdob;
    }

    private void fillPubCenter()
    {
        //DataSet ds;
        DataSet ds = new DataSet();
        drppubcenter.Items.Clear();

        string comp_code = Session["compcode"].ToString();
        string[] parameterValueArray = new string[] { comp_code };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "websp_pubcenter_new";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "Bind_PubCentName.Bind_PubCentName_p";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "Bind_PubCentName_Bind_PubCentName_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
             ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }


        ListItem li1;
        li1 = new ListItem();
        li1.Text = "Select Center";
        li1.Value = "0";
        li1.Selected = true;
        drppubcenter.Items.Add(li1);
        string[] drptext;
        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            if (ds.Tables[0].Rows[i].ItemArray[1].ToString().IndexOf("(") > 0)
            {
                drptext = ds.Tables[0].Rows[i].ItemArray[1].ToString().Split('(');
                li.Text = drptext[0];
            }
            else
            {
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            }
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drppubcenter.Items.Add(li);
        }

    }
    //======================================================//
    [Ajax.AjaxMethod]
    public DataSet chkdel(string compcode, string branchcode, string branchname, string alias)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { compcode, branchcode, branchname, alias };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "CHECKBRANCHEXIST";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "CHECKBRANCHEXIST";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "CHECKBRANCHEXIST";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }
    //======================================================//

    [Ajax.AjaxMethod]
    public DataSet chkbranchname(string str)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { str };
        if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
        {
            string procedureName = "chkbranchname";
            NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            string procedureName = "chkbranchname";
            NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        else
        {
            string procedureName = "chkbranchname";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

        }
        return ds;
    }
}