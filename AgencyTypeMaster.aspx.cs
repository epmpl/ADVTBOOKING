using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;


public partial class AgencyTypeMaster : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        //  Response.Expires = -1;


        // Put user code to initialize the page here
        Session["agency_type_slab"] = null;
        Response.Expires = -1;
        Response.Buffer = true;
        Response.ExpiresAbsolute = DateTime.Now.AddDays(-1d);
        Response.Expires = -1500;
        Response.CacheControl = "no-cache";
        btnNew.Focus();

        if (Session["compcode"] != null)
        {
            hiddencompcode.Value = Session["compcode"].ToString();
            hiddenuserid.Value = Session["userid"].ToString();
            hiddenauto.Value = Session["autogenerated"].ToString();


            ////Response.Redirect("login.aspx");
            //Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            //return;
        }

        else
        {
            //Response.Redirect("login.aspx");
            Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            return;

        }
        ip1.Value = Request.ServerVariables["REMOTE_ADDR"];
        //This code reads the Label name from the xml file
        DataSet objDataSet = new DataSet();
        // Read in the XML file
        objDataSet.ReadXml(Server.MapPath("XML/AgTypeMaster.xml"));
        AgencyTypeCode.Text = objDataSet.Tables[0].Rows[0].ItemArray[0].ToString();
        AgencyTypeName.Text = objDataSet.Tables[0].Rows[0].ItemArray[1].ToString();
        Alias.Text = objDataSet.Tables[0].Rows[0].ItemArray[2].ToString();
        EffectiveFrom.Text = objDataSet.Tables[0].Rows[0].ItemArray[3].ToString();
        EffectiveTill.Text = objDataSet.Tables[0].Rows[0].ItemArray[4].ToString();
        CommissionRate.Text = objDataSet.Tables[0].Rows[0].ItemArray[5].ToString();
        CommissionApllyOn.Text = objDataSet.Tables[0].Rows[0].ItemArray[6].ToString();
        CreditDays.Text = objDataSet.Tables[0].Rows[0].ItemArray[7].ToString();
        Adcat.Text = objDataSet.Tables[0].Rows[0].ItemArray[8].ToString();
        lblmrvno.Text = objDataSet.Tables[0].Rows[0].ItemArray[9].ToString();
        lblpamtargettable.Text = objDataSet.Tables[0].Rows[0].ItemArray[10].ToString();
        lblmonthenddate.Text = objDataSet.Tables[0].Rows[0].ItemArray[11].ToString();
        lblcommisionreq.Text = objDataSet.Tables[0].Rows[0].ItemArray[12].ToString();



        DataSet ds = new DataSet();
        ds.ReadXml(Server.MapPath("XML/button.xml"));

        btnNew.ImageUrl = ds.Tables[0].Rows[0].ItemArray[0].ToString();
        btnSave.ImageUrl = ds.Tables[0].Rows[0].ItemArray[1].ToString();
        btnModify.ImageUrl = ds.Tables[0].Rows[0].ItemArray[2].ToString();
        btnQuery.ImageUrl = ds.Tables[0].Rows[0].ItemArray[3].ToString();
        btnExecute.ImageUrl = ds.Tables[0].Rows[0].ItemArray[4].ToString();
        btnCancel.ImageUrl = ds.Tables[0].Rows[0].ItemArray[5].ToString();
        btnfirst.ImageUrl = ds.Tables[0].Rows[0].ItemArray[6].ToString();
        btnprevious.ImageUrl = ds.Tables[0].Rows[0].ItemArray[7].ToString();
        btnnext.ImageUrl = ds.Tables[0].Rows[0].ItemArray[8].ToString();
        btnlast.ImageUrl = ds.Tables[0].Rows[0].ItemArray[9].ToString();
        btnDelete.ImageUrl = ds.Tables[0].Rows[0].ItemArray[10].ToString();
        btnExit.ImageUrl = ds.Tables[0].Rows[0].ItemArray[11].ToString();

        ///////////////////////

        hiddencomcode.Value = Session["compcode"].ToString();
        hiddencompcode.Value = Session["compcode"].ToString();
        hiddenuserid.Value = Session["userid"].ToString();
        hiddendateformat.Value = Session["DateFormat"].ToString();
        hiddenusername.Value = Session["Username"].ToString();
        hdnconntype.Value = ConfigurationSettings.AppSettings["ConnectionType"].ToString();

        Ajax.Utility.RegisterTypeForAjax(typeof(AgencyTypeMaster));


        btnNew.Enabled = true;
        btnSave.Enabled = false;
        btnModify.Enabled = false;
        btnDelete.Enabled = false;
        btnQuery.Enabled = true;
        btnExecute.Enabled = false;
        btnCancel.Enabled = true;
        btnfirst.Enabled = false;
        btnprevious.Enabled = false;
        btnnext.Enabled = false;
        btnlast.Enabled = false;
        btnExit.Enabled = true;

        txtagencycode.Enabled = false;
        txtagencyname.Enabled = false;
        txtalias.Enabled = false;
        txtcreditdays.Enabled = false;
        drpcommdetail.Enabled = false;
        txtefffrom.Enabled = false;
        txtefftill.Enabled = false;
        txtcommrate.Enabled = false;
        drpmrvno.Enabled = false;
        txttargettable.Enabled = false;
        drpmonthenddate.Enabled = false;
       
        if (!Page.IsPostBack)
        {



            agencytypslab.Attributes.Add("OnClick", "javascript:return agency_typ_slab();");
            txtcreditdays.Attributes.Add("OnChange", "javascript:return chklimit();");
            txtagencycode.Attributes.Add("OnBlur", "javascript:return uppercase1();");
            txtagencyname.Attributes.Add("OnBlur", "javascript:return uppercase2();");
            txtalias.Attributes.Add("OnBlur", "javascript:return uppercase3();");
            txtcommrate.Attributes.Add("OnBlur", "javascript:return amount(this);");
            btnNew.Attributes.Add("OnClick", "javascript:return atmNewclick();");
            btnSave.Attributes.Add("OnClick", "javascript:return atmSaveclick();");
            btnModify.Attributes.Add("OnClick", "javascript:return atmModifyclick();");
            btnDelete.Attributes.Add("OnClick", "javascript:return atmDeleteclick();");
            btnQuery.Attributes.Add("OnClick", "javascript:return atmQueryclick();");
            btnExecute.Attributes.Add("OnClick", "javascript:return atmExecuteclick();");
            btnCancel.Attributes.Add("OnClick", "javascript:return atmCancelclick('AgencyTypeMaster');");
            btnfirst.Attributes.Add("OnClick", "javascript:return atmfirstclick();");
            btnprevious.Attributes.Add("OnClick", "javascript:return atmpreviousclick();");
            btnnext.Attributes.Add("OnClick", "javascript:return atmnextclick();");
            btnlast.Attributes.Add("OnClick", "javascript:return atmlastclick();");
            btnExit.Attributes.Add("OnClick", "javascript:return atmExitclick();");

            txtefffrom.Attributes.Add("OnChange", "javascript:return checkdate(this);");
            txtefftill.Attributes.Add("OnChange", "javascript:return checkdate(this);");
            txtagencyname.Attributes.Add("onchange", "javascript:return autoornot();");
            bindadcat();
        }
        if (btnNew.Enabled == false)
            btnNew.ImageUrl = ds.Tables[1].Rows[0].ItemArray[0].ToString();
        if (btnSave.Enabled == false)
            btnSave.ImageUrl = ds.Tables[1].Rows[0].ItemArray[1].ToString();
        if (btnModify.Enabled == false)
            btnModify.ImageUrl = ds.Tables[1].Rows[0].ItemArray[2].ToString();
        if (btnQuery.Enabled == false)
            btnQuery.ImageUrl = ds.Tables[1].Rows[0].ItemArray[3].ToString();
        if (btnExecute.Enabled == false)
            btnExecute.ImageUrl = ds.Tables[1].Rows[0].ItemArray[4].ToString();
        if (btnCancel.Enabled == false)
            btnCancel.ImageUrl = ds.Tables[1].Rows[0].ItemArray[5].ToString();
        if (btnfirst.Enabled == false)
            btnfirst.ImageUrl = ds.Tables[1].Rows[0].ItemArray[6].ToString();
        if (btnprevious.Enabled == false)
            btnprevious.ImageUrl = ds.Tables[1].Rows[0].ItemArray[7].ToString();
        if (btnnext.Enabled == false)
            btnnext.ImageUrl = ds.Tables[1].Rows[0].ItemArray[8].ToString();
        if (btnlast.Enabled == false)
            btnlast.ImageUrl = ds.Tables[1].Rows[0].ItemArray[9].ToString();
        if (btnDelete.Enabled == false)
            btnDelete.ImageUrl = ds.Tables[1].Rows[0].ItemArray[10].ToString();
        if (btnExit.Enabled == false)
            btnExit.ImageUrl = ds.Tables[1].Rows[0].ItemArray[11].ToString();

    }
    //public static string GetDateTime(this DateTime? date)
    //{
    //    if (date.HasValue)
    //        return date.Value.ToString("dd-MMM-yyyy hh:mm tt");
    //    return string.Empty;
    //}
   
    public void bindadcat()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster bind = new NewAdbooking.Classes.BookingMaster();

            ds = bind.advdatacategory(Session["compcode"].ToString(), "adtype");

        }

        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.BookingMaster bind = new NewAdbooking.classesoracle.BookingMaster();

                ds = bind.advdatacategory(Session["compcode"].ToString(), "adtype");

            }
            else
            {
                NewAdbooking.classmysql.BookingMaster bind = new NewAdbooking.classmysql.BookingMaster();

                ds = bind.advdatacategory(Session["compcode"].ToString(), "adtype");


            }


        int i;
        ListItem li1;
        li1 = new ListItem();
        drpadcat.Items.Clear();
        li1.Text = "Select Ad Category";
        li1.Value = "0";
        li1.Selected = true;
        drpadcat.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                drpadcat.Items.Add(li);

            }
        }

    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet atmsave(string companycode, string code, string name, string alias, string UserId, string txtefffrom, string txtefftill, string commrate, string commapply, string creditdays, string adcat, string uniqueid, string ip, string mrvno, string PAM_TARGET_TABLENAME, string monthdate, string comm_req)
    //		override public DataSet atmsave(string companycode,string code,string name,string alias,string UserId,string effectivefrom,string effectivetill,string commrate,string commapply)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.AgencyTypeMaster save = new NewAdbooking.Classes.AgencyTypeMaster();

                ds = save.atmsave(companycode, code, name, alias, UserId, txtefffrom, txtefftill, commrate, commapply, creditdays, adcat, uniqueid, mrvno, PAM_TARGET_TABLENAME, monthdate, comm_req);
                // return ds;
            }
            else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.AgencyTypeMaster save = new NewAdbooking.classesoracle.AgencyTypeMaster();

                        ds = save.atmsave(companycode, code, name, alias, UserId, txtefffrom, txtefftill, commrate, commapply, creditdays, adcat, uniqueid, mrvno, PAM_TARGET_TABLENAME, monthdate, comm_req);
                    //   return ds;
                }
                else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
                {
            
                    string procedureName = "atm_Save_atm_Save_p";
                    string[] parameterValueArray = { companycode, code, name, alias, UserId, ConvertToDateTime(txtefffrom), ConvertToDateTime(txtefftill), commrate, commapply, creditdays, uniqueid, adcat, mrvno, PAM_TARGET_TABLENAME, monthdate, comm_req };
                    NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                    ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
                }
                //else
                //{
                //    NewAdbooking.classmysql.AgencyTypeMaster save = new NewAdbooking.classmysql.AgencyTypeMaster();
                //    ds = save.atmsave(companycode, code, name, alias, UserId, txtefffrom, txtefftill, commrate, commapply, creditdays, adcat, uniqueid);
                //    //return ds;
                //}
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string companycode1 = "Inserted AgencyType " + uniqueid;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','AgencyType','" + err.Replace("'", "''") + "','AgencyType Created','" + companycode1;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
        return ds;

    }
   
    public string ConvertToDateTime(string strDateTime)
    {
        string dtFinaldate; string sDateTime;
        string hddndateformat = Session["DateFormat"].ToString();
        try {
            if (hddndateformat == "dd/mm/yyyy")
        {
            string[] sDate = strDateTime.Split('/');
            sDateTime = sDate[2] + '/' + sDate[0] + '/' + sDate[1];
            dtFinaldate = sDateTime;
        }
        else
        {
            dtFinaldate = Convert.ToDateTime(strDateTime).ToString();
        }
        }
        catch (Exception e)
        {
            string[] sDate = strDateTime.Split('/');
            sDateTime = sDate[2] + '/' + sDate[0] + '/' + sDate[1];
            dtFinaldate = sDateTime;
        }
        return dtFinaldate;
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet atmmodify(string companycode, string agcode, string name, string alias, string UserId, string effectivefrom, string effectivetill, string commrate, string commdetail, string creditdays, string adcat, string uniqueid, string ip, string mrvno, string PAM_TARGET_TABLENAME, string monthdate, string comm_req)
    //		override public DataSet atmmodify(string companycode,string code,string name,string alias,string UserId,string effectivefrom,string effectivetill,string commrate,string commdetail)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.AgencyTypeMaster mod = new NewAdbooking.Classes.AgencyTypeMaster();

                ds = mod.atmmodify(companycode, agcode, name, alias, UserId, effectivefrom, effectivetill, commrate, commdetail, creditdays, adcat, uniqueid, mrvno, PAM_TARGET_TABLENAME, monthdate, comm_req);
                //   return ds;
            }
            else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.AgencyTypeMaster mod = new NewAdbooking.classesoracle.AgencyTypeMaster();

                    ds = mod.atmmodify(companycode, agcode, name, alias, UserId, effectivefrom, effectivetill, commrate, commdetail, creditdays, adcat, uniqueid, mrvno, PAM_TARGET_TABLENAME, monthdate, comm_req);
                    //     return ds;
                }
                else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
                {
                    string procedureName = "atm_Modify_atm_Modify_p";
             //       string[] parameterValueArray = { companycode, agcode, name, alias, UserId, effectivefrom, effectivetill, commrate, commdetail, creditdays, adcat, uniqueid, mrvno, PAM_TARGET_TABLENAME, monthdate, comm_req };
                    string[] parameterValueArray = { companycode, agcode, name, alias, ConvertToDateTime(effectivefrom).ToString(), ConvertToDateTime(effectivetill).ToString(), commrate, commdetail, creditdays, adcat, uniqueid, UserId, mrvno, PAM_TARGET_TABLENAME, monthdate, comm_req };
                    NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                    ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
                }
                //else
                //{
                //    NewAdbooking.classmysql.AgencyTypeMaster mod = new NewAdbooking.classmysql.AgencyTypeMaster();
                //    ds = mod.atmmodify(companycode, agcode, name, alias, UserId, effectivefrom, effectivetill, commrate, commdetail, creditdays, adcat, uniqueid);
                //    //return ds;
                //}
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string companycode2 = "Modified AgencyType " + uniqueid;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','AgencyType','" + err.Replace("'", "''") + "','AgencyType Updated','" + companycode2;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
        return ds;
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void atmdelete(string companycode, string code, string name, string alias, string UserId, string uniqueid, string ip)
    //		override public DataSet atmdelete(string companycode,string code,string name,string alias,string UserId)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.AgencyTypeMaster del = new NewAdbooking.Classes.AgencyTypeMaster();

                ds = del.atmdelete(companycode, code, name, alias, UserId, uniqueid);
            }
            else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.AgencyTypeMaster del = new NewAdbooking.classesoracle.AgencyTypeMaster();

                    ds = del.atmdelete(companycode, code, name, alias, UserId, uniqueid);
                }
                else
                {
                    NewAdbooking.classmysql.AgencyTypeMaster del = new NewAdbooking.classmysql.AgencyTypeMaster();
                    ds = del.atmdelete(companycode, code, name, alias, UserId, uniqueid);
                }
            //return ds;
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string companycode3 = "Deleted AgencyType " + uniqueid;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','AgencyType','" + err.Replace("'", "''") + "','AgencyType Deleted','" + companycode3;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);

    }
    [Ajax.AjaxMethod]
    public DataSet atmexecute_new(string companycode, string code, string name, string alias, string UserId)
    //		override public DataSet atmexecute(string companycode,string code,string name,string alias,string UserId)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.AgencyTypeMaster exe = new NewAdbooking.Classes.AgencyTypeMaster();
            ds = exe.atmexecute(companycode, code, name, alias, UserId);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.AgencyTypeMaster exe = new NewAdbooking.classesoracle.AgencyTypeMaster();
                ds = exe.atmexecute(companycode, code, name, alias, UserId);
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "atm_Execute_atm_Execute_p";
                string[] parameterValueArray = { companycode, code, name, alias, UserId };
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet atmexecute(string companycode, string code, string name, string alias, string UserId)
    //		override public DataSet atmexecute(string companycode,string code,string name,string alias,string UserId)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.AgencyTypeMaster exe = new NewAdbooking.Classes.AgencyTypeMaster();
            ds = exe.atmexecute(companycode, code, name, alias, UserId);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.AgencyTypeMaster exe = new NewAdbooking.classesoracle.AgencyTypeMaster();
                ds = exe.atmexecute(companycode, code, name, alias, UserId);
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "atm_Execute_atm_Execute_p";
                string[] parameterValueArray = { companycode, code, name, alias, UserId };
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet atmexecute1(string companycode, string code, string name, string alias, string UserId)
    //		override public DataSet atmexecute1(string companycode,string code,string name,string alias,string UserId)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.AgencyTypeMaster exe1 = new NewAdbooking.Classes.AgencyTypeMaster();

            ds = exe1.atmexecute1(companycode, code, name, alias, UserId);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.AgencyTypeMaster exe1 = new NewAdbooking.classesoracle.AgencyTypeMaster();

                ds = exe1.atmexecute1(companycode, code, name, alias, UserId);
                return ds;
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                string procedureName = "atm_Execute_atm_Execute_p";
                string[] parameterValueArray = { companycode, code, name, alias, UserId };
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);

            }
        return ds;
            //else
            //{
            //    NewAdbooking.classmysql.AgencyTypeMaster exe1 = new NewAdbooking.classmysql.AgencyTypeMaster();

            //    ds = exe1.atmexecute1(companycode, code, name, alias, UserId);
            //    return ds;
            //}
    }

    /*		[Ajax.AjaxMethod]
            public DataSet atmfpnl()
    //		override public DataSet atmfpnl()
            {
                DataSet ds = new DataSet();
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
                {
                    NewAdbooking.Classes.AgencyTypeMaster fst = new NewAdbooking.Classes.AgencyTypeMaster();

                    ds = fst.atmfpnl();
                    return ds;
                }
                else
                {
                    NewAdbooking.classmysql.AgencyTypeMaster fst = new NewAdbooking.classmysql.AgencyTypeMaster();

                    ds = fst.atmfpnl();
                    return ds;
                }
            }  */

    [Ajax.AjaxMethod]

    public DataSet chkatmcode(string companycode, string UserId, string agcode, string agename)
    //		override public DataSet chkatmcode(string companycode,string UserId,string code)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.AgencyTypeMaster chkatm = new NewAdbooking.Classes.AgencyTypeMaster();

            ds = chkatm.chkatmcode(companycode, UserId, agcode, agename);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.AgencyTypeMaster chkatm = new NewAdbooking.classesoracle.AgencyTypeMaster();

                ds = chkatm.chkatmcode(companycode, UserId, agcode, agename);
                return ds;
            }
            else
            {
                NewAdbooking.classmysql.AgencyTypeMaster chkatm = new NewAdbooking.classmysql.AgencyTypeMaster();
                ds = chkatm.chkatmcode(companycode, UserId, agcode, agename);
                return ds;
            }
    }
    //Pankaj//

    [Ajax.AjaxMethod]
    public DataSet chkagencytype(string str)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.AgencyTypeMaster chk = new NewAdbooking.Classes.AgencyTypeMaster();

            ds = chk.agtypecode(str);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.AgencyTypeMaster chk = new NewAdbooking.classesoracle.AgencyTypeMaster();

                ds = chk.agtypecode(str);
                return ds;
            }
            else
            {
                NewAdbooking.classmysql.AgencyTypeMaster chk = new NewAdbooking.classmysql.AgencyTypeMaster();

                ds = chk.agtypecode(str);
                return ds;
            }

    }

    [Ajax.AjaxMethod]
    public DataSet   chkslab11(string compcode, string agtype)
    {
      //  string state = "";

        //if (Session["agency_type_slab"] == null)
        //{
        //    state = "False";
        //}
        //else {
        //    state = "true";
        //}
   DataSet ds = new DataSet();
   if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
   {
       NewAdbooking.Classes.AgencyTypeMaster chk = new NewAdbooking.Classes.AgencyTypeMaster();

       ds = chk.chkslab(compcode, agtype);

   }
   else
       if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
       {
           NewAdbooking.classesoracle.AgencyTypeMaster chk = new NewAdbooking.classesoracle.AgencyTypeMaster();

           ds = chk.chkslab(compcode, agtype);
           //   return ds;
       }
       else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "mysql")
       {
           string procedureName = "websp_agency_type_chkslab";
           string[] parameterValueArray = { compcode, agtype };
           NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
           ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
       }
       
   return ds;

    }

    }









