using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data.SqlClient;
public partial class Booking_Audit1 : System.Web.UI.Page
{
    int i = 0;
    int j = 0;
    string booking_audit_new = "";
    string enbldsbl;
    protected void Page_Load(object sender, EventArgs e)
    {
        Response.Expires = -1;
        DataGrid1.Visible = true;
       // Session["compcode"] = "HT001";
        if (Session["compcode"] == null)
        {
            Response.Redirect("login.aspx");
            Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            return;
        }
        hiddencomcode.Value =  Session["compcode"].ToString();
        hiddencompcode.Value = Session["compcode"].ToString();
        hiddenuserid.Value = Session["userid"].ToString();
        hiddendateformat.Value = Session["dateformat"].ToString();
        hiddenusername.Value =  Session["Username"].ToString();
        hiddenauto.Value = Session["autogenerated"].ToString();
        hiddenagency.Value = Session["agency_name"].ToString();
        hiddenbk_audit.Value = Session["audit"].ToString();

        hdnbranch.Value = Session["revenue"].ToString();
        //Session["revenue"]

        hdncenter.Value = Session["center"].ToString();
      
        hiddenserverip.Value = Request.ServerVariables["REMOTE_ADDR"].ToString();



        Ajax.Utility.RegisterTypeForAjax(typeof(Booking_Audit1));
        if (!Page.IsPostBack)
        {
            form1.Attributes.Add("onload", "javascript:return display();");
            btnsubmit.Attributes.Add("OnClick", "javascript:return executeclick();");
            btnExit.Attributes.Add("OnClick", "javascript:return exitclick();");
           //Chkselectall.Attributes.Add("OnClick", "javascript:return selectall();");
            btnrefresh.Attributes.Add("OnClick", "javascript:return refresh();");
            btnmodify.Attributes.Add("OnClick", "javascript:return openbookingModify();");
            btnpreview.Attributes.Add("OnClick","javascript:return openPrev();");
           drprevenu.Attributes.Add("OnChange", "javascript:return bindQBC();");

          //  form1.Attributes.Add("onload", "javascript:return bindQBC();");
            drpadtype.Attributes.Add("OnChange", "javascript:return bindcategory_package();");
            drprate.Attributes.Add("onclick", "javascript:return fetch_categary(this.value);");
            btnclear.Attributes.Add("OnClick", "javascript:return cleardata();");
            btnbookingaudit.Attributes.Add("OnClick", "javascript:return bookingaudit2();");
            btnsave1.Attributes.Add("OnClick", "javascript:return save1();");

            //txtvalidityfrom.Attributes.Add("OnChange", "javascript:return checkdate(this);");
            //txttilldate.Attributes.Add("OnChange", "javascript:return checkdate(this);");
            drppackage.Attributes.Add("onclick", "javascript:return fetch_package(this.value);");
            drpuom.Attributes.Add("onclick", "javascript:return fetch_uom(this.value);");
         
           // dpadcatgory.Attributes.Add("onchange", "javascript:return fetch_categary();");

            lstclient.Attributes.Add("onclick", "javascript:return insertclient(event);");
           
            
            lstagency.Attributes.Add("onclick", "javascript:return insertagency(this.value);");
            lstsection.Attributes.Add("onclick", "javascript:return insertagency(this.value);");


            drprevenu.Text = Session["center"].ToString();

            //bindbranch(hiddenuserid.Value);
           adtypedata(Session["compcode"].ToString());
           fillPubCenter(Session["compcode"].ToString());
           bindpackage();
           btnaudit.Enabled = false;
           btnpreview.Enabled = false;
           btnunaudit.Enabled = false;
           btnsave1.Enabled = false;
           DataSet dprv = new DataSet();

           if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
           {

               FourCPlus.AdBooking.BookingMaster.Sql.BookingMaster prev = new FourCPlus.AdBooking.BookingMaster.Sql.BookingMaster();
               dprv = prev.prevbooking(Session["compcode"].ToString(), Session["userid"].ToString(), "CL0");
           }
           else
               if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
               {
                   FourCPlus.AdBooking.BookingMaster.Oracle.BookingMaster prev = new FourCPlus.AdBooking.BookingMaster.Oracle.BookingMaster();
                   dprv = prev.prevbooking(Session["compcode"].ToString(), Session["userid"].ToString(), "CL0");

               }
               else
               {
                    string procedureName = "gettheprevbooking_gettheprevbooking_p";
                    NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                    string[] parameterValueArray = new string[] { Session["compcode"].ToString(), Session["userid"].ToString(), "CL0" };
                    dprv = obj.DynamicBindProcedure(procedureName, parameterValueArray);
               }
           if (Session["agency_name"].ToString() == "0" || Session["agency_name"].ToString() == "" )
           {
               txt_agency.Text = "";
               hidden_agency.Value = "";
               txtagency.Enabled = true;
           }
           else
           {
               txtagency.Enabled = false;
               txtagency.ReadOnly = true;
               string [] ag = dprv.Tables[5].Rows[0].ItemArray[0].ToString().Split('(');
               string ag1 = ag[0].ToString()+"---";
               txt_agency.Text = ag1;
               hidden_agency.Value = ag[1].Replace(")", "");
           }
        }


        //********************************For Label****************************************/
        DataSet ds = new DataSet();
        ds.ReadXml(Server.MapPath("XML/Booking_Audit1.xml"));
        lblvfrm.Text = ds.Tables[0].Rows[0].ItemArray[0].ToString();
        lblvalidtill.Text = ds.Tables[0].Rows[0].ItemArray[1].ToString();
        //lblagenysubcode.Text = ds.Tables[0].Rows[0].ItemArray[2].ToString();
        lblagency.Text = ds.Tables[0].Rows[0].ItemArray[2].ToString();
        lbluom.Text = ds.Tables[0].Rows[0].ItemArray[3].ToString();
        lblagreedrate.Text = ds.Tables[0].Rows[0].ItemArray[4].ToString();
        lblclient.Text = ds.Tables[0].Rows[0].ItemArray[5].ToString();
       //lbladdress1.Text = ds.Tables[0].Rows[0].ItemArray[6].ToString();
        lblpackage.Text = ds.Tables[0].Rows[0].ItemArray[6].ToString();
      //lbladdress2.Text = ds.Tables[0].Rows[0].ItemArray[7].ToString();
        lblagreedamount.Text = ds.Tables[0].Rows[0].ItemArray[7].ToString();
      //lblstatus.Text = ds.Tables[0].Rows[0].ItemArray[8].ToString();
        lblpaymode.Text = ds.Tables[0].Rows[0].ItemArray[8].ToString();
        lblpublichdate.Text = ds.Tables[0].Rows[0].ItemArray[9].ToString();
      //lblcredit.Text = ds.Tables[0].Rows[0].ItemArray[10].ToString();
        lbldiscount.Text = ds.Tables[0].Rows[0].ItemArray[10].ToString();
        lblrono.Text = ds.Tables[0].Rows[0].ItemArray[11].ToString();
        lblnoofinsertion.Text = ds.Tables[0].Rows[0].ItemArray[12].ToString();
        lblpositionpremium.Text = ds.Tables[0].Rows[0].ItemArray[13].ToString();
        lblrostatus.Text = ds.Tables[0].Rows[0].ItemArray[14].ToString();
      //lblkeyno.Text = ds.Tables[0].Rows[0].ItemArray[15].ToString();
        lblpaid.Text = ds.Tables[0].Rows[0].ItemArray[15].ToString();
        lblspecialdiscount.Text = ds.Tables[0].Rows[0].ItemArray[16].ToString();
     //lblexezone.Text = ds.Tables[0].Rows[0].ItemArray[17].ToString();
        lblexecutivename.Text = ds.Tables[0].Rows[0].ItemArray[17].ToString();
        lblcontractname.Text = ds.Tables[0].Rows[0].ItemArray[18].ToString();
        lblspacediscount.Text = ds.Tables[0].Rows[0].ItemArray[19].ToString();
        lbloutstanding.Text = ds.Tables[0].Rows[0].ItemArray[20].ToString();
     //lblbrand.Text = ds.Tables[0].Rows[0].ItemArray[21].ToString();
        lblheight.Text = ds.Tables[0].Rows[0].ItemArray[21].ToString();
     //lblproduct.Text = ds.Tables[0].Rows[0].ItemArray[22].ToString();
        lblspecialcharge.Text = ds.Tables[0].Rows[0].ItemArray[22].ToString();
        lblretainername.Text = ds.Tables[0].Rows[0].ItemArray[23].ToString();
        lbllines.Text = ds.Tables[0].Rows[0].ItemArray[24].ToString();
        lbladdagecomm.Text = ds.Tables[0].Rows[0].ItemArray[25].ToString();
     //lblnocolumns.Text = ds.Tables[0].Rows[0].ItemArray[26].ToString();
        lblbookingtype.Text = ds.Tables[0].Rows[0].ItemArray[26].ToString();
        lblpageposition.Text = ds.Tables[0].Rows[0].ItemArray[27].ToString();
        lblgrossamt.Text = ds.Tables[0].Rows[0].ItemArray[28].ToString();
    //lblcurrency.Text = ds.Tables[0].Rows[0].ItemArray[29].ToString();
        lblcolourtype.Text = ds.Tables[0].Rows[0].ItemArray[29].ToString();
        lblpositionpre.Text = ds.Tables[0].Rows[0].ItemArray[30].ToString();
        lblretainercommission.Text = ds.Tables[0].Rows[0].ItemArray[31].ToString();
        lbladcategory.Text = ds.Tables[0].Rows[0].ItemArray[32].ToString();
        lblarea.Text = ds.Tables[0].Rows[0].ItemArray[33].ToString();
        lblagtradediscount.Text = ds.Tables[0].Rows[0].ItemArray[34].ToString();
        lbladsubcat1.Text = ds.Tables[0].Rows[0].ItemArray[35].ToString();
        lblschemetype.Text = ds.Tables[0].Rows[0].ItemArray[36].ToString();
        lblbillamount.Text = ds.Tables[0].Rows[0].ItemArray[37].ToString();
        lbladsubcat2.Text = ds.Tables[0].Rows[0].ItemArray[38].ToString();
        lblratecode.Text = ds.Tables[0].Rows[0].ItemArray[39].ToString();
        lbladsubcat3.Text = ds.Tables[0].Rows[0].ItemArray[40].ToString();
        lblcardrate.Text = ds.Tables[0].Rows[0].ItemArray[41].ToString();
        lbladsubcat4.Text = ds.Tables[0].Rows[0].ItemArray[42].ToString();
        lblcardamount.Text = ds.Tables[0].Rows[0].ItemArray[43].ToString();
        lblremarks.Text = ds.Tables[0].Rows[0].ItemArray[44].ToString();
        lblSumAmt.Text = ds.Tables[0].Rows[0].ItemArray[45].ToString();
        lblPagePrem.Text = ds.Tables[0].Rows[0].ItemArray[46].ToString();

        lbl_section.Text = ds.Tables[0].Rows[0].ItemArray[48].ToString();
        lbagency.Text = ds.Tables[0].Rows[0].ItemArray[49].ToString();
        lbClient.Text = ds.Tables[0].Rows[0].ItemArray[50].ToString();
        lblbremark.Text=ds.Tables[0].Rows[0].ItemArray[51].ToString();
        lblcaption.Text=ds.Tables[0].Rows[0].ItemArray[52].ToString();
        lbltranslationcrg.Text = ds.Tables[0].Rows[0].ItemArray[53].ToString();
        lblboxcharg.Text = ds.Tables[0].Rows[0].ItemArray[54].ToString();
        lblbooktyp.Text = ds.Tables[0].Rows[0].ItemArray[55].ToString();
        lbboxcharges.Text = ds.Tables[0].Rows[0].ItemArray[56].ToString();
        lblagencyaddres.Text = ds.Tables[0].Rows[0].ItemArray[58].ToString();
        lbalert.Text = ds.Tables[0].Rows[0].ItemArray[59].ToString();
        lblcgst.Text = ds.Tables[0].Rows[0].ItemArray[60].ToString();
        lblsgst.Text = ds.Tables[0].Rows[0].ItemArray[61].ToString();
        lbligst.Text = ds.Tables[0].Rows[0].ItemArray[62].ToString();
   txtagency.ReadOnly = true;
   txtratecode.ReadOnly = true;
   txtclient.ReadOnly = true;
   txtadsubcat4.ReadOnly = true;
   txtcardrate.ReadOnly = true;
   txtagtradediscount.ReadOnly = true;
   txtagreedamount.ReadOnly = true;
   txtarea.ReadOnly = true;
   txtagreedrate.ReadOnly = true;
   txtgrossamt.ReadOnly = true;
   txtcardamount.ReadOnly = true;
   txtcontractname.ReadOnly = true;
   txtaddagecomm.ReadOnly = true;
   txtpackage.ReadOnly = true;
   txtdiscount.ReadOnly = true;
   txtpageposition.ReadOnly = true;
   txtexecutivename.ReadOnly = true;
   txtlines.ReadOnly = true;
   txtbookingtype.ReadOnly = true;
   txtheight.ReadOnly = true;
   txtcolourtype.ReadOnly = true;

   txtwidth.ReadOnly = true;
   txtspecialdiscount.ReadOnly = true;
   txtdiscount.ReadOnly = true;
   txtagreedrate.ReadOnly = true;
   txtschemetype.ReadOnly = true;
   txtpositionpre.ReadOnly = true;
   txtpaid.ReadOnly = true;
   txtpublishdate.ReadOnly = true;
   txtpositionpremium.ReadOnly = true;
   txtretainercommission.ReadOnly = true;
   txtadcategory.ReadOnly = true;
   txtadsubcat1.ReadOnly = true;
   txtuom.ReadOnly = true;
   txtoutstanding.ReadOnly = true;
   txtadsubcat2.ReadOnly = true;
   txtspecialcharge.ReadOnly = true;
   txtadsubcat3.ReadOnly = true;
   txtrono.ReadOnly = true;
   txtrostatus.ReadOnly = true;
   txtretainername.ReadOnly = true;
   txtpaymode.ReadOnly = true;
   txtnoofinsertion.ReadOnly = true;
   txtspacediscount.ReadOnly = true;
   txtbillamount.ReadOnly = true;     
   txtremarks.Enabled = false;
  // btnmodify.Enabled = false;
   btnrefresh.Enabled = false;


   //txtagencysubcode.Enabled = false;
   //txtagency.Enabled = false;
   //txtheight.Enabled = false;

txtdiscountamt.ReadOnly = true;
txtPagePrem.ReadOnly = true;
txtPagePremamt.ReadOnly = true;
txtpositionpremiumamt.ReadOnly = true;
txtspecialdiscount.ReadOnly = true;
txtspecialdiscountamt.ReadOnly = true;
txtspacediscount.ReadOnly = true;
txtspacediscountamt.ReadOnly = true;
txtSumAmt.ReadOnly = true;
txtretainercommissionamt.ReadOnly = true;
txtagtradediscountamt.ReadOnly = true;

txtaddagecommamt.ReadOnly = true;



    }


    public void bindpackage()
    {

        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "Select Package";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drppackage.Items.Add(li1);


    }
   
    protected void btnsubmit_Click(object sender, EventArgs e)
    {
        DataSet ds = new DataSet();
        string revcenter = drprevenu.SelectedValue;
       string branch2 = hiddenbranch.Value;
        string abc_cat = hdnexecutivetxt.Value;
        string pack_code = hdn_package.Value;

        if (drpaudit.SelectedValue == "unaudit" || drpaudit.SelectedValue == "modified")
        {
            btnbookingaudit.Enabled = true;
            btnunaudit.Enabled = false;

        }
        else
        {

            btnbookingaudit.Enabled = false;
            btnunaudit.Enabled = true;
        }
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Booking_Audit1 abc = new NewAdbooking.Classes.Booking_Audit1();
            ds = abc.bindgrid(Session["dateformat"].ToString(), txttilldate.Text, txtvalidityfrom.Text, revcenter, drpadtype.SelectedValue, drpaudit.SelectedValue, branch2, abc_cat, hiddenuserid.Value, Session["compcode"].ToString(), pack_code, hidden_agency.Value, hidden_client.Value, hidden_section.Value, drpbooktyp.SelectedValue, hdn_uom.Value, Drpdatebasedon.SelectedValue, txtBookingId.Text);
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Booking_Audit1 abc = new NewAdbooking.classesoracle.Booking_Audit1();
            ds = abc.bindgrid(Session["dateformat"].ToString(), txttilldate.Text, txtvalidityfrom.Text, revcenter, drpadtype.SelectedValue, drpaudit.SelectedValue, branch2, abc_cat, hiddenuserid.Value, Session["compcode"].ToString(), pack_code, hidden_agency.Value, hidden_client.Value, hidden_section.Value, drpbooktyp.SelectedValue, hdn_uom.Value, Drpdatebasedon.SelectedValue, txtBookingId.Text);
        }
        else
        {
            string procedureName = "bindaudit_bindaudit_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { txtvalidityfrom.Text, txttilldate.Text, Session["dateformat"].ToString(), revcenter, drpadtype.SelectedValue, drpaudit.SelectedValue, branch2, abc_cat, hiddenuserid.Value, Session["compcode"].ToString(), pack_code, hidden_agency.Value, hidden_client.Value, hidden_section.Value, drpbooktyp.SelectedValue, hdn_uom.Value, Drpdatebasedon.SelectedValue, "", "", txtBookingId.Text };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
       


        Session["RowLen"] = ds.Tables[0].Rows.Count;
        hidden1.Value = Session["RowLen"].ToString();
        if (hidden1.Value == "0")
        {
            ScriptManager.RegisterClientScriptBlock(this, typeof(Booking_Audit1), "cc", "checklenthnew()", true);
        }
        DataGrid1.DataSource = ds;
        DataGrid1.DataBind();
    }

    [Ajax.AjaxMethod]
    public DataSet execute(string bookingid, string compcode, string adtype, string dateformat)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Booking_Audit1 executebullet = new NewAdbooking.Classes.Booking_Audit1();
            ds = executebullet.executeauditmast1(bookingid, compcode, adtype, dateformat,"");
        }
        else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Booking_Audit1 executebullet = new NewAdbooking.classesoracle.Booking_Audit1();
            ds = executebullet.executeauditmast1(bookingid, compcode, adtype, dateformat, "");
            //NewAdbooking.classesoracle.adsubcat executebullet = new NewAdbooking.classesoracle.adsubcat();
            //ds = executebullet.addcategoryname();
        }
        else
        {
            string procedureName = "executebookingdispaudit_executebookingdispaudit_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { compcode, bookingid, adtype, dateformat, "", "", "", "", "" };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }
    
    [Ajax.AjaxMethod]
    public DataSet getPackageName(string compcode, string pkg_code)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.BillingClass.Classes.publish_audit objpkg = new NewAdbooking.BillingClass.Classes.publish_audit();
            ds = objpkg.clsPackageName(compcode, pkg_code);        
           
        }
        else if(ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Booking_Audit1 objpkg = new NewAdbooking.classesoracle.Booking_Audit1();
            ds = objpkg.clsPackageName(compcode,pkg_code);           
        }
        else
        {
            string procedureName = "websp_PackageName_websp_PackageName_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { compcode, pkg_code };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }




    [Ajax.AjaxMethod]
    public DataSet getcategory(string compcode, string pkg_code)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.BillingClass.Classes.publish_audit objpkg = new NewAdbooking.BillingClass.Classes.publish_audit();
           ds = objpkg.bind_category(compcode, pkg_code);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.BillingClass.classesoracle.billing_save objpkg = new NewAdbooking.BillingClass.classesoracle.billing_save();
            ds = objpkg.bind_category(compcode, pkg_code);
        }
        else
        {
            string procedureName = "audit_cate_audit_cate_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { compcode, pkg_code };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }

    public void adtypedata(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Booking_Audit1 bind = new NewAdbooking.Classes.Booking_Audit1();
            ds = bind.adtypbind(compcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Booking_Audit1 bind = new NewAdbooking.classesoracle.Booking_Audit1();
            ds = bind.adtypbind(compcode);
        }
         else
        {
            string procedureName = "advtypbind_advtypbind_p";
        NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
        string[] parameterValueArray = new string[] { compcode};
        ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
      

        int i;
        ListItem li1;

        li1 = new ListItem();
        drpadtype.Items.Clear();
        li1.Text = "-Select Ad Type-";
        li1.Value = "0";
        li1.Selected = true;
        drpadtype.Items.Add(li1);

        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            drpadtype.Items.Add(li);


        }

    }




    public void bindbranch(string userid)
    {

        DataSet ds = new DataSet();

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
           NewAdbooking.BillingClass.Classes.publish_audit bind = new NewAdbooking.BillingClass.Classes.publish_audit();
           ds = bind.bindbranch();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {

            NewAdbooking.BillingClass.classesoracle.session_billing bind = new NewAdbooking.BillingClass.classesoracle.session_billing();
            ds = bind.bindbranch_userwise(userid);
        }
        else
        {
            string procedureName = "bind_branch_branchwise_bind_branch_branchwise_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { userid };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }

        int i;
        ListItem li1;

        li1 = new ListItem();
        drpbranch.Items.Clear();
        //li1.Text = "-Select Branch-";
		li1.Text = "--Select Branch--";
        li1.Value = "0";
        li1.Selected = true;
        drpbranch.Items.Add(li1);

        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drpbranch.Items.Add(li);


        }
        drpbranch.SelectedValue = Session["revenue"].ToString();

    }
    private void fillPubCenter(string compcode)
    {
        DataSet ds;
       if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.BillingClass.Classes.session_billing logindetail = new NewAdbooking.BillingClass.Classes.session_billing();
            ds = logindetail.getPubCenter();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.login logindetail = new NewAdbooking.classesoracle.login();

                ds = logindetail.getPubCenter_company(compcode);

            }
       else
       {
           string procedureName = "Bind_PubCentName_Bind_PubCentName_p";
           NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
           string[] parameterValueArray = new string[] { compcode };
           ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
       }
    
      
     
        drprevenu.Items.Clear();
        ListItem li1;
        
        
      
        li1 = new ListItem();
        li1.Text = "All";
        li1.Value = "All";
        li1.Selected = true;
        drprevenu.Items.Add(li1);
        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drprevenu.Items.Add(li);
        }
        

    }
    protected void btnclear_Click(object sender, EventArgs e)
    {
        //txttilldate.Text = "";
        //txtvalidityfrom.Text = "";
    }
    protected void DataGrid1_ItemDataBound(object sender, DataGridItemEventArgs e)
    {
        hidattach1.Value = "";
        if (drpaudit.SelectedValue == "audit")
        {
            txtremarks.Enabled =false;
        }
        else
        {
            txtremarks.Enabled = true ;
        }

        hiddenrowcount.Value = Session["RowLen"].ToString();
        if (e.Item.ItemType == ListItemType.Header)
        {
            e.Item.Cells[0].Text = "<input type='checkbox' enabled=true id='checkall' onclick=\"javascript:return selectAll();\" />";     
        }
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            if (e.Item.Cells[3].Text == "N")
                enbldsbl = "disabled";
            else
                enbldsbl = "";

            string str = "chk" + j;
            if(e.Item.Cells[11].Text != "&nbsp;")
                e.Item.Cells[0].Text = "<input type='checkbox' id=" + str + " disabled   value=" + e.Item.Cells[4].Text + "  />";
            else
                e.Item.Cells[0].Text = "<input type='checkbox'"+enbldsbl+" id=" + str + "   value=" + e.Item.Cells[4].Text + "  />";

            if (drpaudit.SelectedValue == "audit")
            {
                if (e.Item.Cells[8].Text != "&nbsp;")
                {
                    e.Item.Cells[2].Text = "<img src=\"images/flag.gif\" ></img>";

                }
            }
            string bookingid=  e.Item.Cells[3].Text ;
            e.Item.Cells[4].Text = "<a id='cio" + i + "' style=\"cursor:hand;color:blue\" onClick=\"openbooking('" + e.Item.Cells[4].Text + "','cio" + i + "','" + hiddenrowcount.Value + "','" + e.Item.Cells[11].Text + "','')\">" + e.Item.Cells[4].Text + "</a>";
           // e.Item.Cells[14].Text = "<a id='cio" + i + "' style=\"cursor:hand;color:blue\" onClick=\"openattach1('" + e.Item.Cells[14].Text + "','cio" + i + "','" + hiddenrowcount.Value + "','" + e.Item.Cells[13].Text + "','')\">" + e.Item.Cells[14].Text + "</a>";
//  ==========************ To Showing Attatchment on Name click *********====================//
            string attatch = e.Item.Cells[14].Text;
            if (attatch != "" && attatch != "&nbsp;")
            {
                string[] attatchstr = attatch.Split(',');
                for (int a1=0; a1 < attatchstr.Length; a1++)
                {
                    if(hidattach1.Value =="")
                        hidattach1.Value = "<a style=\"cursor:Pointer;color:blue\" onClick=\"openattach1('" + attatchstr[a1].ToString() + "')\">" + attatchstr[a1].ToString() + "</a>";
                    else
                        hidattach1.Value =hidattach1.Value+"," +"<a style=\"cursor:Pointer;color:blue\" onClick=\"openattach1('" + attatchstr[a1].ToString() + "')\">" + attatchstr[a1].ToString() + "</a>";
                }
                e.Item.Cells[14].Text = hidattach1.Value;
            }
            string attatch1 = e.Item.Cells[15].Text;
            if (attatch1 != "" && attatch1 != "&nbsp;")
            {
                string[] attatchstr1 = attatch1.Split(',');
                for (int a1 = 0; a1 < attatchstr1.Length; a1++)
                {
                    if (hidattach11.Value == "")
                        hidattach11.Value = "<a style=\"cursor:Pointer;color:blue\" onClick=\"openattach11('" + attatchstr1[a1].ToString() + "')\">" + attatchstr1[a1].ToString() + "</a>";
                    else
                        hidattach11.Value = hidattach11.Value + "," + "<a style=\"cursor:Pointer;color:blue\" onClick=\"openattach11('" + attatchstr1[a1].ToString() + "')\">" + attatchstr1[a1].ToString() + "</a>";
                }
                e.Item.Cells[15].Text = hidattach11.Value;
            }
//=======================*************************=========================================//
            i = i + 1;
            e.Item.Cells[1].Text = i.ToString();  
            j++;



            //if (e.Item.Cells[6].Text != "&nbsp;")
            //{

            //    if ((e.Item.Cells[6].Text != "") || (e.Item.Cells[6].Text != null))
            //    {
            //        e.Item.Cells[6].Text = "Attached".ToString();

            //    }
            //}
        

           
           

        }
        //if (e.Item.ItemType == ListItemType.Footer)
        //{
        //    e.Item.Cells[1].Text = "Total".ToString();
        //    e.Item.Cells[3].Text = i.ToString();
        //}
    }
  
    protected void btnaudit_Click1(object sender, EventArgs e)
    {

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Booking_Audit1 clsaudit = new NewAdbooking.Classes.Booking_Audit1();
            clsaudit.updateaudit(hiddenbookingid.Value, hiddenusername.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Booking_Audit1 clsaudit = new NewAdbooking.classesoracle.Booking_Audit1();
            clsaudit.updateaudit(hiddenbookingid.Value, hiddenusername.Value);
        }
        else
        {
            string procedureName = "updateauditbooking_updateauditbooking_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { hiddenbookingid.Value, hiddenusername.Value };
             obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }

        ScriptManager.RegisterClientScriptBlock(this, typeof(Booking_Audit1), "sa", "clear_button();", true);

        btnsubmit_Click(sender, e);
        
        txtagency.Text = "";
        txtclient.Text = "";
        txtadsubcat2.Text = "";
        txtcardrate.Text = "";
        txtagreedamount.Text = "";
        txtretainername.Text = "";
        txtpaymode.Text = "";
        txtaddagecomm.Text = "";
        txtpageposition.Text = "";
        txtrono.Text = "";
        txtrostatus.Text = "";
        txtgrossamt.Text = "";
        txtspecialcharge.Text = "";
        txtexecutivename.Text = "";
        txtbookingtype.Text = "";
        txtoutstanding.Text = "";
        txtadcategory.Text = "";
        txtpositionpre.Text = "";
        txtarea.Text = "";
        txtretainercommission.Text = "";
        txtuom.Text = "";
        txtagtradediscount.Text = "";
        txtpositionpremium.Text = "";
        txtadsubcat1.Text = "";
        txtheight.Text = "";
        txtwidth.Text = "";
        txtpackage.Text = "";
        txtcolourtype.Text = "";
        txtnoofinsertion.Text = "";
        txtpublishdate.Text = "";
        txtcontractname.Text = "";
        txtschemetype.Text = "";
        txtpaid.Text = "";
        txtcardamount.Text = "";
        txtspecialdiscount.Text = "";
        txtdiscount.Text = "";
        txtagreedrate.Text = "";
        txtlines.Text = "";
        txtspacediscount.Text = "";
        txtadsubcat3.Text = "";
        txtadsubcat4.Text = "";
        txtratecode.Text = "";
        txtbillamount.Text = "";
        txtremarks.Text = "";
        txtdiscountamt.Text = "";
        txtPagePrem.Text = "";
        txtPagePremamt.Text = "";
        txtpositionpremiumamt.Text = "";
        txtspecialdiscount.Text = "";
        txtspecialdiscountamt.Text = "";
         txtspacediscount.Text = "";
         txtspacediscountamt.Text = "";
         txtSumAmt.Text = "";
       txtretainercommissionamt.Text = ""; 
       txtagtradediscountamt.Text = "";
       txtaddagecommamt.Text = "";
       txt_eyecater.Text = "";
       txt_eyecaterprem.Text = "";


    }

    [Ajax.AjaxMethod]
    public DataSet fetch_date_data(string pcomp_code, string pformname, string puserid, string pentry_date, string pdateformat, string pextra1, string pextra2)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = new string[] { pcomp_code, pformname, puserid, pentry_date, pdateformat, pextra1, pextra2 };
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.BillingClass.Classes.session_billing abcd = new NewAdbooking.BillingClass.Classes.session_billing();
            ds = abcd.ad_get_backdays_validate(pcomp_code, pformname, puserid, pentry_date, pdateformat, pextra1, pextra2);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {

            NewAdbooking.BillingClass.classesoracle.session_billing abcd = new NewAdbooking.BillingClass.classesoracle.session_billing();
            ds = abcd.ad_get_backdays_validate(pcomp_code, pformname, puserid, pentry_date, pdateformat, pextra1, pextra2);
        }
        else
        {
           string procedureName = "ad_get_backdays_validate";
           NewAdbooking.classmysql.Master obj = new NewAdbooking.classmysql.Master();
           ds = obj.BindCommanFunction(procedureName, parameterValueArray);
           
        }
          
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet fillQBC(string userid)
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Booking_Audit1 logindetail = new NewAdbooking.Classes.Booking_Audit1();

            ds = logindetail.bindbranch_userwise(userid);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            
        {
            NewAdbooking.BillingClass.classesoracle.session_billing bind = new NewAdbooking.BillingClass.classesoracle.session_billing();
            ds = bind.bindbranch_userwise(userid);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
        NewAdbooking.classmysql.login logindetail = new NewAdbooking.classmysql.login();

        ds = logindetail.getQBC(userid); 
        }
        else 
        {
        string procedureName = "bind_branch_branchwise_bind_branch_branchwise_p";
        NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
        string[] parameterValueArray = new string[] { userid };
        ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }

    protected void DataGrid1_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    [Ajax.AjaxMethod]

    public void updateStatus2(string booking_id, string auditname, string serverip, string userid)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.BillingClass.Classes.publish_audit up = new NewAdbooking.BillingClass.Classes.publish_audit();
                ds = up.update1(booking_id, auditname);
            }
            
            else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.Booking_Audit1 up = new NewAdbooking.classesoracle.Booking_Audit1();
                    ds = up.update1(booking_id, auditname);
                }
                 else 
                {
                string procedureName = "updateauditbooking_updateauditbooking_p";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                string[] parameterValueArray = new string[] { booking_id, auditname };
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
                }
        }
        catch (Exception e)
        {
            err = e.Message;

        }
        string adcatcode2 = "Booking Audit " + booking_id;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1 ,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + userid + "','Booking Audit','" + err.Replace("'", "''") + "','Booking audit','" + adcatcode2;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + serverip + "')";
        dconnect.executenonquery1(sqldd);
        

    }

    protected void btnaudit_Click3(object sender, EventArgs e)
    {
        btnsubmit_Click(sender, e);
    }
   /* protected void btnmodify_Click(object sender, EventArgs e)
    {
        txtagency.Text = "";
        txtclient.Text = "";
        txtadsubcat2.Text = "";
        txtcardrate.Text = "";
        txtagreedamount.Text = "";
        txtretainername.Text = "";
        txtpaymode.Text = "";
        txtaddagecomm.Text = "";
        txtpageposition.Text = "";
        txtrono.Text = "";
        txtrostatus.Text = "";
        txtgrossamt.Text = "";
        txtspecialcharge.Text = "";
        txtexecutivename.Text = "";
        txtbookingtype.Text = "";
        txtoutstanding.Text = "";
        txtadcategory.Text = "";
        txtpositionpre.Text = "";
        txtarea.Text = "";
        txtretainercommission.Text = "";
        txtuom.Text = "";
        txtagtradediscount.Text = "";
        txtpositionpremium.Text = "";
        txtadsubcat1.Text = "";
        txtheight.Text = "";
        txtwidth.Text = "";
        txtpackage.Text = "";
        txtcolourtype.Text = "";
        txtnoofinsertion.Text = "";
        txtpublishdate.Text = "";
        txtcontractname.Text = "";
        txtschemetype.Text = "";
        txtpaid.Text = "";
        txtcardamount.Text = "";
        txtspecialdiscount.Text = "";
        txtdiscount.Text = "";
        txtagreedrate.Text = "";
        txtlines.Text = "";
        txtspacediscount.Text = "";
        txtadsubcat3.Text = "";
        txtadsubcat4.Text = "";
        txtratecode.Text = "";
        txtbillamount.Text = "";
        txtremarks.Text = "";

    }*/
    protected void btnunaudit_Click(object sender, EventArgs e)
    {

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.BillingClass.Classes.publish_audit clsaudit = new NewAdbooking.BillingClass.Classes.publish_audit();
            clsaudit.unaudit(hiddenbookingid.Value, hiddenusername.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Booking_Audit1 clsaudit = new NewAdbooking.classesoracle.Booking_Audit1();
            clsaudit.unaudit(hiddenbookingid.Value, hiddenusername.Value);
        }
        else
        {
            string procedureName = "unauditbooking_unauditbooking_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { hiddenbookingid.Value, hiddenusername.Value };
            obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        btnsubmit_Click(sender, e);

        txtagency.Text = "";
        txtclient.Text = "";
        txtadsubcat2.Text = "";
        txtcardrate.Text = "";
        txtagreedamount.Text = "";
        txtretainername.Text = "";
        txtpaymode.Text = "";
        txtaddagecomm.Text = "";
        txtpageposition.Text = "";
        txtrono.Text = "";
        txtrostatus.Text = "";
        txtgrossamt.Text = "";
        txtspecialcharge.Text = "";
        txtexecutivename.Text = "";
        txtbookingtype.Text = "";
        txtoutstanding.Text = "";
        txtadcategory.Text = "";
        txtpositionpre.Text = "";
        txtarea.Text = "";
        txtretainercommission.Text = "";
        txtuom.Text = "";
        txtagtradediscount.Text = "";
        txtpositionpremium.Text = "";
        txtadsubcat1.Text = "";
        txtheight.Text = "";
        txtwidth.Text = "";
        txtpackage.Text = "";
        txtcolourtype.Text = "";
        txtnoofinsertion.Text = "";
        txtpublishdate.Text = "";
        txtcontractname.Text = "";
        txtschemetype.Text = "";
        txtpaid.Text = "";
        txtcardamount.Text = "";
        txtspecialdiscount.Text = "";
        txtdiscount.Text = "";
        txtagreedrate.Text = "";
        txtlines.Text = "";
        txtspacediscount.Text = "";
        txtadsubcat3.Text = "";
        txtadsubcat4.Text = "";
        txtratecode.Text = "";
        txtbillamount.Text = "";
        txtremarks.Text = "";

    }
    [Ajax.AjaxMethod]

    public void save(string remarks, string cioid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.BillingClass.Classes.publish_audit up = new NewAdbooking.BillingClass.Classes.publish_audit();
            ds = up.save1(remarks, cioid);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Booking_Audit1 up = new NewAdbooking.classesoracle.Booking_Audit1();
                ds = up.save1(remarks, cioid);
            }
            else
            {
                string procedureName = "saveremark5_saveremark5_p";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                string[] parameterValueArray = new string[] { remarks, cioid };
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }

    }



    [Ajax.AjaxMethod]
    public DataSet bindpackagenew(string adtype, string compcode)
    {
        DataSet ds = new DataSet();

        if (ConfigurationSettings.AppSettings["Connectiontype"].ToString() == "orcl")
        {

            NewAdbooking.BillingClass.classesoracle.billing_save bindopackage = new NewAdbooking.BillingClass.classesoracle.billing_save();
            ds = bindopackage.packagebind_NEW(compcode, adtype);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.BillingClass.Classes.session_billing bindopackage = new NewAdbooking.BillingClass.Classes.session_billing();
            ds = bindopackage.packagebind_NEW(compcode, adtype);
        }
        else
        {
            string procedureName = "Bindpackage_new";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { compcode, adtype };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;

    }

    [Ajax.AjaxMethod]
    public DataSet bindagencyname(string compcode, string agency)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.BillingClass.Classes.billing_save bindagen = new NewAdbooking.BillingClass.Classes.billing_save();

            ds = bindagen.bindagencycode(compcode, agency);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {

            NewAdbooking.BillingClass.classesoracle.billing_save bindagen = new NewAdbooking.BillingClass.classesoracle.billing_save();

            ds = bindagen.agencyxls(compcode, agency);
        }
        else
        {
            string procedureName = "bindagencyforxls_bindagencyforxls_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { compcode, agency };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindclientname(string compcode, string client)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {


            NewAdbooking.Classes.BookingMaster clsbooking = new NewAdbooking.Classes.BookingMaster();

            ds = clsbooking.getClientName(compcode, client);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster clsbooking = new NewAdbooking.classesoracle.BookingMaster();

            ds = clsbooking.getClientName(compcode, client, "0");
            
        }
        else
        {
            string procedureName = "websp_getclientName_websp_getclientName_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { compcode, client, "0","" };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }


    [Ajax.AjaxMethod]
    public DataSet section_name (string section_name)
{

        DataSet ds = new DataSet();

        if(ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
        NewAdbooking.Classes.Booking_Audit1 abc = new NewAdbooking.Classes.Booking_Audit1();
        ds = abc.getsection(section_name);
        }

        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
        NewAdbooking.classesoracle.Booking_Audit1 abc = new NewAdbooking.classesoracle.Booking_Audit1();
        ds = abc.getsection(section_name);
        }
        else
        {
            string procedureName = "getSectionCode";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { section_name };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
}
    [Ajax.AjaxMethod]
    public DataSet binduom(string compcode, string adtye)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Adsize binduom = new NewAdbooking.Classes.Adsize();
            ds = binduom.uombind(compcode, adtye);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Adsize binduom = new NewAdbooking.classesoracle.Adsize();
            ds = binduom.uombind(compcode, adtye);
        }
        else
        {
            string procedureName = "uomadsize_uomadsize_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { compcode, adtye };
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }

        return ds;
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet getagencyRemark(string compcode, string bookingid, string agency, string client, string type1)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster bindagenname = new NewAdbooking.Classes.BookingMaster();
            ds = bindagenname.bindgencyRemark(compcode, bookingid, agency, client, type1);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster bindagenname = new NewAdbooking.classesoracle.BookingMaster();
            ds = bindagenname.bindgencyRemark(compcode, bookingid, agency, client, type1);

        }
        else
        {
            string procedureName = "ADB_GETAGENCY_ADD";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            string[] parameterValueArray = new string[] { compcode, bookingid, agency, client, type1 ,null};
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }
}
