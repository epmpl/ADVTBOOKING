using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using FourCPlus.AdBooking.BookingMaster.Oracle;
using FourCPlus.AdBooking.BookingMaster.Sql;

public partial class Ratemaster : System.Web.UI.Page
{
    string formname = "";
     string dateformat = "";
    string userid = "";
    string compcode = "";
    string rateradio = "";
    string message,  validfromdate,validtill;
    string dd, mm, yyyy, dd1, mm1, yyyy1,cont,bwcode;
    static int FlagStatus,fpnl;
    string getpremrate="";
    string type_ = "";
    
    /////////////this is declared as to check whether user is saving or doing query if saving then this value is 0 indicating 
    ////////////that we are saving the data 
    static string chkquery, saveormodify, gbratecode, gbadtype, gbcurrency, gbratetype, gbcolor, gbuom, gpkgcode,gbscheme;
    ////////////////////////////////////////////////
    ////////////this int is for autogenerated
    int cou = 0;
    ////////////this is to declare the dataset for execute 
    static DataSet executequery = new DataSet();
    static DataSet chkedition = new DataSet();
    int z=0;
    
    DataGridItemEventArgs e1;
    ///////////////////////////////////////////////
    public void advcat(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.CombinationMaster bind = new NewAdbooking.Classes.CombinationMaster();
            ds = bind.advdatacategory(compcode);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.CombinationMaster bind = new NewAdbooking.classesoracle.CombinationMaster();
                ds = bind.advdatacategory(compcode);
            }
        else
            {
                string[] parameterValueArray = new string[] { compcode };
                string procedureName = "websp_advcategory_websp_advcategory_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.CombinationMaster bind = new NewAdbooking.classmysql.CombinationMaster();
            //ds = bind.advdatacategory(compcode);
        }
        int i;
        ListItem li1;
        li1 = new ListItem();
        drpadcategory.Items.Clear();
        li1.Text = "-Select Category-";
        li1.Value = "0";
        li1.Selected = true;
        drpadcategory.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                drpadcategory.Items.Add(li);

            }
        }


    }
    public void adtypedata(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.CombinationMaster bind = new NewAdbooking.Classes.CombinationMaster();
            ds = bind.adtypbind(compcode);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.CombinationMaster bind = new NewAdbooking.classesoracle.CombinationMaster();
                ds = bind.adtypbind(compcode);

            }
        else
            {
                string[] parameterValueArray = new string[] { compcode };
                string procedureName = "advtypbind_advtypbind_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.CombinationMaster bind = new NewAdbooking.classmysql.CombinationMaster();
            //ds = bind.adtypbind(compcode);
        }
      

        int i;
        ListItem li1;

        li1 = new ListItem();
        drpadtype.Items.Clear();
        li1.Text = "-Select Ad Type-";
        li1.Value = "0";
        li1.Selected = true;
        drpadtype.Items.Add(li1);

        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            drpadtype.Items.Add(li);


        }

    }
    public void scheme(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster bind = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = bind.bindscheme(compcode);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bind = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                ds = bind.bindscheme(compcode);

            }
        else
            {
                string[] parameterValueArray = new string[] { compcode };
                string procedureName = "schemebind_schemebind_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster bind = new NewAdbooking.classmysql.RateMaster();
            //ds = bind.bindscheme(compcode);

        }
        int i;
        ListItem li1;

        li1 = new ListItem();
        drpscheme.Items.Clear();
        li1.Text = "--Select Scheme--";
        li1.Value = "0";
        li1.Selected = true;
        drpscheme.Items.Add(li1);
        string name = "";
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            if (name != ds.Tables[0].Rows[i].ItemArray[1].ToString())
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                drpscheme.Items.Add(li);
            }
            name = ds.Tables[0].Rows[i].ItemArray[1].ToString();

        }

    }


    protected void Page_Load(object sender, EventArgs e)
    {   
        Response.Expires = -1;
        Session["rateinsert"] = null;
        if (Session["compcode"] == null)
        {
            //Response.Redirect("login.aspx");
            Response.Write("<script>alert(\"Your Session has been expired\");window.close();</script>");
            return;
        }
        hdnconfigclient.Value = ConfigurationSettings.AppSettings["CLIENTNAME"].ToString();
        if (rateradio == "")
        {
            rateradio = Session["rateradio"].ToString();
        }
        if (!Page.IsPostBack)
        {
            DataSet dspref = new DataSet();
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                FourCPlus.AdBooking.BookingMaster.Sql.RateMaster Show_NoAd = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
                dspref = Show_NoAd.getSoloRateAuto_Pref(Session["compcode"].ToString());
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster Show_NoAd = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                dspref = Show_NoAd.getSoloRateAuto_Pref(Session["compcode"].ToString());
            }
            else
            {
                string[] parameterValueArray = new string[] { Session["compcode"].ToString() };
                string procedureName = "getSoloRateAuto_Pref";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                dspref = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            if (dspref.Tables.Count > 0 && dspref.Tables[0].Rows.Count > 0)
            {
                hidsoloauto.Value = dspref.Tables[0].Rows[0].ItemArray[0].ToString();
            }
           
            hiddenprem.Value = Session["premtype"].ToString();
            hiddenDecimal.Value = Session["decimal"].ToString();
            hiddencurrency.Value = Session["currency"].ToString();
            drpcurrency.SelectedValue = Session["currency"].ToString();
            hiddenbranch.Value = Session["revenue"].ToString();
            hiddenCenter.Value = Session["center"].ToString();
            rateradio = Convert.ToString(Session["rateradio"]);
            hiddseesion.Value = rateradio;
            compcode = Convert.ToString(Session["compcode"].ToString());
            userid = Convert.ToString(Session["userid"]);
            hiddenuserid.Value = userid;
            hiddencompcode.Value = Session["compcode"].ToString();
            hiddenusername.Value = Session["username"].ToString();
            hiddenbreakup.Value = Session["breakup"].ToString();
            // Session["solorate"] = "solo";
            hiddensolo.Value = Session["solorate"].ToString();


            if (rateradio == "company")
            {
                type_ = "company";
                hiddentype_agency.Value = "company";
            }
            else if (rateradio == "agency")
            {
                type_ = "agency";
                hiddentype_agency.Value = "agency";
            }

            else if (rateradio == "both")
            {
                if (rbHindustan.Checked == true)
                {
                    type_ = "company";
                    hiddentype_agency.Value = "company";
                }
                else
                {
                    type_ = "agency";
                    hiddentype_agency.Value = "agency";
                }

            }

            Ajax.Utility.RegisterTypeForAjax(typeof(Ratemaster));
            if (Session["compcode"] == null)
            {
                //Response.Redirect("login.aspx");
                Response.Write("<script>alert(\"Your Session Has Been Expired\");window.close();</script>");
                return;

            }
            dateinsert chkdate = new dateinsert();
            formname = "Ratemaster";
            // dateformat = Session["dateformat"].ToString();
            hiddendateformat.Value = Session["dateformat"].ToString();
            dateformat = Session["dateformat"].ToString();
            bwcode = Session["bwcode"].ToString();
            hdncon.Value = ConfigurationSettings.AppSettings["ConnectionType"].ToString();
            DataSet objDataSet = new DataSet();
            // Read in the XML file
            objDataSet.ReadXml(Server.MapPath("XML/ratemaster.xml"));
            lblratecode.Text = objDataSet.Tables[0].Rows[0].ItemArray[0].ToString();
            lbladtype.Text = objDataSet.Tables[0].Rows[0].ItemArray[1].ToString();
            lbladcategory.Text = objDataSet.Tables[0].Rows[0].ItemArray[2].ToString();
            lbladsubcategory.Text = objDataSet.Tables[0].Rows[0].ItemArray[3].ToString();
            lblrategroupcode.Text = objDataSet.Tables[0].Rows[0].ItemArray[4].ToString();
            lblcurrency.Text = objDataSet.Tables[0].Rows[0].ItemArray[5].ToString();
            lblpkgcode.Text = objDataSet.Tables[0].Rows[0].ItemArray[6].ToString();

            lblpkgdesc.Text = objDataSet.Tables[0].Rows[0].ItemArray[7].ToString();

            lblvalidfrom.Text = objDataSet.Tables[0].Rows[0].ItemArray[10].ToString();
            lblvalidto.Text = objDataSet.Tables[0].Rows[0].ItemArray[11].ToString();
            lblconsperiod.Text = objDataSet.Tables[0].Rows[0].ItemArray[12].ToString();
            lblColor.Text = objDataSet.Tables[0].Rows[0].ItemArray[13].ToString();
            lblcolorchargestyp.Text = objDataSet.Tables[0].Rows[0].ItemArray[14].ToString();
            lblflramount.Text = objDataSet.Tables[0].Rows[0].ItemArray[15].ToString();
            lblflrdiscount.Text = objDataSet.Tables[0].Rows[0].ItemArray[16].ToString();
            lblrate.Text = objDataSet.Tables[0].Rows[0].ItemArray[17].ToString();
            lblmin.Text = objDataSet.Tables[0].Rows[0].ItemArray[18].ToString();
            lblextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[19].ToString();
            lblfocusrate.Text = objDataSet.Tables[0].Rows[0].ItemArray[20].ToString();
            lblfocusmin.Text = objDataSet.Tables[0].Rows[0].ItemArray[21].ToString();
            lblfocusextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[22].ToString();
            lblremarks.Text = objDataSet.Tables[0].Rows[0].ItemArray[23].ToString();
            lbluom.Text = objDataSet.Tables[0].Rows[0].ItemArray[24].ToString();
            lblpremium.Text = objDataSet.Tables[0].Rows[0].ItemArray[25].ToString();
            lblpremiumcharges.Text = objDataSet.Tables[0].Rows[0].ItemArray[26].ToString();
            lbweekend.Text = objDataSet.Tables[0].Rows[0].ItemArray[28].ToString();
            lbweekmin.Text = objDataSet.Tables[0].Rows[0].ItemArray[29].ToString();
            lbweekextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[30].ToString();
            lbmaxarea.Text = objDataSet.Tables[0].Rows[0].ItemArray[31].ToString();
            //btngo.Text = objDataSetbu.Tables[0].Rows[0].ItemArray[25].ToString();
            //chksolo.Text = objDataSet.Tables[0].Rows[0].ItemArray[29].ToString();
            lbedfrom.Text = objDataSet.Tables[0].Rows[0].ItemArray[38].ToString();
            lbedto.Text = objDataSet.Tables[0].Rows[0].ItemArray[39].ToString();
            lblscheme.Text = objDataSet.Tables[0].Rows[0].ItemArray[40].ToString();
            lbadscat4.Text = objDataSet.Tables[0].Rows[0].ItemArray[41].ToString();
            lbscat5.Text = objDataSet.Tables[0].Rows[0].ItemArray[42].ToString();
            lbadscat6.Text = objDataSet.Tables[0].Rows[0].ItemArray[43].ToString();
            lbfrominsert.Text = objDataSet.Tables[0].Rows[0].ItemArray[44].ToString();
            lbtoinsert.Text = objDataSet.Tables[0].Rows[0].ItemArray[45].ToString();
            lbagentyp.Text = objDataSet.Tables[0].Rows[0].ItemArray[46].ToString();
            lbclientcat.Text = objDataSet.Tables[0].Rows[0].ItemArray[47].ToString();
            /*new change ankur 17 feb*/
            lbmaxarea.Text = objDataSet.Tables[0].Rows[0].ItemArray[48].ToString();

            rbHindustan.Text = objDataSet.Tables[0].Rows[0].ItemArray[49].ToString();
            rbagency.Text = objDataSet.Tables[0].Rows[0].ItemArray[50].ToString();
            lbagencycode.Text = objDataSet.Tables[0].Rows[0].ItemArray[51].ToString();

            lblpubcenter.Text = objDataSet.Tables[0].Rows[0].ItemArray[53].ToString();

            lbratesun.Text = objDataSet.Tables[0].Rows[0].ItemArray[54].ToString();
            lbratemon.Text = objDataSet.Tables[0].Rows[0].ItemArray[55].ToString();
            lbratetue.Text = objDataSet.Tables[0].Rows[0].ItemArray[56].ToString();
            lbratewed.Text = objDataSet.Tables[0].Rows[0].ItemArray[57].ToString();
            lbratethu.Text = objDataSet.Tables[0].Rows[0].ItemArray[58].ToString();
            lbratefri.Text = objDataSet.Tables[0].Rows[0].ItemArray[59].ToString();
            lbratesat.Text = objDataSet.Tables[0].Rows[0].ItemArray[60].ToString();

            lbratesunextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[61].ToString();
            lbratemonextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[62].ToString();
            lbratetueextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[63].ToString();
            lbratewedextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[64].ToString();
            lbratethuextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[65].ToString();
            lbratefriextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[66].ToString();
            lbratesatextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[67].ToString();

            lbdayrate.Text = objDataSet.Tables[0].Rows[0].ItemArray[68].ToString();
            lbdayrateextra.Text = objDataSet.Tables[0].Rows[0].ItemArray[69].ToString();

            lblwidth.Text = objDataSet.Tables[0].Rows[0].ItemArray[70].ToString();

            lbminarea.Text = objDataSet.Tables[0].Rows[0].ItemArray[71].ToString();
            lblpriorityrate.Text = objDataSet.Tables[0].Rows[0].ItemArray[80].ToString();
            btnpriority.Text = objDataSet.Tables[0].Rows[0].ItemArray[81].ToString();
            chkvat.Text = objDataSet.Tables[0].Rows[0].ItemArray[82].ToString();
            lbAdon.Text = objDataSet.Tables[0].Rows[0].ItemArray[83].ToString();
            lbref.Text = objDataSet.Tables[0].Rows[0].ItemArray[84].ToString();
            lblcancellationcharges.Text = objDataSet.Tables[0].Rows[0].ItemArray[85].ToString();
            hiddenurl.Value = ConfigurationManager.AppSettings["TVURL"].ToString();
            lblpstionprem.Text = objDataSet.Tables[0].Rows[0].ItemArray[86].ToString();
            lbminwidth.Text = objDataSet.Tables[0].Rows[0].ItemArray[87].ToString();
            lbmaxwidth.Text = objDataSet.Tables[0].Rows[0].ItemArray[88].ToString();

            DataSet objDataSetbu = new DataSet();
            // Read in the XML file
            objDataSetbu.ReadXml(Server.MapPath("XML/button.xml"));
            btnNew.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[0].ToString();
            btnSave.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[1].ToString();
            btnModify.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[2].ToString();
            btnQuery.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[3].ToString();
            btnExecute.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[4].ToString();
            btnCancel.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[5].ToString();
            btnfirst.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[6].ToString();
            btnprevious.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[7].ToString();
            btnnext.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[8].ToString();
            btnlast.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[9].ToString();
            btnDelete.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[10].ToString();
            btnExit.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[11].ToString();

            //ScriptManager1.SetFocus(btnNew);

            hiddenprem.Value = Session["premtype"].ToString();

            fillPubCenter();

            /*  if (drppubcenter.Items.FindByValue(Session["center"].ToString()) != null)
              {
                  drppubcenter.SelectedValue = Session["center"].ToString();
              }
             */
            lball.Disabled = true;

            lblSizefrom.Text = objDataSet.Tables[0].Rows[0].ItemArray[8].ToString();
            lblsizeto.Text = objDataSet.Tables[0].Rows[0].ItemArray[9].ToString();
            //btnNew.Focus();
            lbaddon.Attributes.Add("OnClick", "javascript:return adon();");

            lstbtb.Attributes.Add("onclick", "javascript:return Clickcbbtb1(event);");
            lstbtb.Attributes.Add("onkeydown", "javascript:return Clickcbbtb1(event);");
            txtedfrom.Attributes.Add("OnKeydown", "javascript:return bindbtb(event);");

            lstprog.Attributes.Add("onclick", "javascript:return Clickprog(event);");
            lstprog.Attributes.Add("onclick", "javascript:return Clickprog(event);");
            txtedto.Attributes.Add("OnKeydown", "javascript:return bindprog(event);");

            txtvalidfrom.Attributes.Add("onkeydown", "javascript:return blank(event);");
            txtvalidto.Attributes.Add("onkeydown", "javascript:return blank1(event);");
            drppkgcode.Attributes.Add("onclick", "avascript:return chkfields(this);");
            drpcurrency.Attributes.Add("onkeypress", "return keySort(this);");
            drprategroupcode.Attributes.Add("onkeypress", "return keySort(this);");
            drpadcategory.Attributes.Add("onkeypress", "return keySort(this);");
            drpsubcategory.Attributes.Add("onkeypress", "return keySort(this);");
            hiddentextchanged.Value = "0";
            getbuttoncheck(formname);
            adtypedata(compcode);

            scheme(compcode);

            hiddenrateuniqid.Value = "";
            
            // advcat(compcode);
            bindcurrency();
            bindpackage();
            // binduom();
            bindpagePosition(hiddencompcode.Value, DateTime.Now.ToString("dd/MM/yyyy"), hiddendateformat.Value);
            bindcolor();
            bindrategroupcode();
            bindpremiumrate(drpadcategory.SelectedValue);
            bindagencytyp();
            bindclientcategory();
            btnpriority.Attributes.Add("OnClick", "javascript:return openPriorityRate();");
            txtflramount.Attributes.Add("onchange", "javascript:return chkflramount();");
           // drppremium.Attributes.Add("OnChange", "javascript:return onchange_drppremium();");
            btnSave.Attributes.Add("onclick", "javascript:return saverate();");
            btnDelete.Attributes.Add("onclick", "javascript:return deleteclick();");//return confirm('Are you sure you want to delete?');");
            btnExit.Attributes.Add("onclick", "javascript:return closerate();");
            txtvalidfrom.Attributes.Add("OnChange", "javascript:return checkdate(this);  ");
            txtvalidto.Attributes.Add("OnChange", "javascript:return checkdate(this);  ");
            //txtvalidto.Attributes.Add("onblur", "javascript:return chkfromdate();");
            txtsizeto.Attributes.Add("onchange", "javascript:return chksize()");
            txtsizefrom.Attributes.Add("onchange", "javascript:return chksizefrom()");
            txtedfrom.Attributes.Add("onchange", "javascript:return chkeditionfrom()");
            txtedto.Attributes.Add("onchange", "javascript:return chkeditionto()");
            txtminarea.Attributes.Add("onchange", "javascript:return chkminsize()");
            txtmaxarea.Attributes.Add("onchange", "javascript:return chkmaxsize()");



            txtminwidth.Attributes.Add("onchange", "javascript:return chkminwidth()");
            txtmaxwidth12.Attributes.Add("onchange", "javascript:return chkmaxwidth()");


            txtrate.Attributes.Add("onchange", "javascript:return chkratevalue('txtrate');");
            txtminrate.Attributes.Add("onchange", "javascript:return chkratevalue('txtminrate');");
            txtfocusrate.Attributes.Add("onchange", "javascript:return chkratevaluefocus('txtfocusrate');");
            txtfocusmin.Attributes.Add("onchange", "javascript:return chkratevaluefocus('txtfocusmin');");
            txtweekrate.Attributes.Add("onchange", "javascript:return chkweekrate('txtweekrate');");
            txtweekextra.Attributes.Add("onchange", "javascript:return chkweekrate('txtweekextra');");
            txtweekminrate.Attributes.Add("onchange", "javascript:return chkweekrate('txtweekminrate');");
            txtextrarate.Attributes.Add("onchange", "javascript:return chkweekrate('txtextrarate');");
            txtextrafocus.Attributes.Add("onchange", "javascript:return chkfocusrate('txtextrafocus');");
            //txtminarea.Attributes.Add("OnChange", "javascript:return checkarea();");
            //txtflramount.Attributes.Add("OnChange", "javascript:return checkamount();");
            txtflrdiscount.Attributes.Add("OnChange", "javascript:return checkdiscount();");
            txttoinsert.Attributes.Add("OnChange", "javascript:return chkinserts('txtfrominsert');");
            txtfrominsert.Attributes.Add("OnChange", "javascript:return chkfrinserts();");

            rbHindustan.Attributes.Add("onclick", "javascript:return rateforcomporagency('rbHindustan');");
            rbagency.Attributes.Add("onclick", "javascript:return rateforcomporagency('rbagency');");


            txtratesun.Attributes.Add("onchange", "javascript:return chkratevalue('txtratesun');");
            txtratemon.Attributes.Add("onchange", "javascript:return chkratevalue('txtratemon');");
            txtratetue.Attributes.Add("onchange", "javascript:return chkratevalue('txtratetue');");
            txtratewed.Attributes.Add("onchange", "javascript:return chkratevalue('txtratewed');");
            txtratethu.Attributes.Add("onchange", "javascript:return chkratevalue('txtratethu');");
            txtratefri.Attributes.Add("onchange", "javascript:return chkratevalue('txtratefri');");
            txtratesat.Attributes.Add("onchange", "javascript:return chkratevalue('txtratesat');");

            txtratesunextra.Attributes.Add("onchange", "javascript:return chkratevalue('txtratesunextra');");
            txtratemonextra.Attributes.Add("onchange", "javascript:return chkratevalue('txtratemonextra');");
            txtratetueextra.Attributes.Add("onchange", "javascript:return chkratevalue('txtratetueextra');");
            txtratewedextra.Attributes.Add("onchange", "javascript:return chkratevalue('txtratewedextra');");
            txtratethuextra.Attributes.Add("onchange", "javascript:return chkratevalue('txtratethuextra');");
            txtratefriextra.Attributes.Add("onchange", "javascript:return chkratevalue('txtratefriextra');");
            txtratesatextra.Attributes.Add("onchange", "javascript:return chkratevalue('txtratesatextra');");

            btnNew.Attributes.Add("OnClick", "javascript:return newclick();");

            btnCancel.Attributes.Add("OnClick", "javascript:return cancelclick();");
            btnQuery.Attributes.Add("OnClick", "javascript:return queryclick();");
            btnExecute.Attributes.Add("OnClick", "javascript:return executeclick();");
            btnModify.Attributes.Add("OnClick", "javascript:return modifyclick();");
            btnSave.Attributes.Add("OnClick", "javascript:return saveclick();");

            drpadtype.Attributes.Add("OnChange", "javascript:return onchage_adtype();");

            drpadcategory.Attributes.Add("OnBlur", "javascript:return onchange_cat();");

            drpsubcategory.Attributes.Add("OnBlur", "javascript:return onchange_subcat();");
            drpadscat4.Attributes.Add("OnBlur", "javascript:return onchange_cat4();");
            drpadscat5.Attributes.Add("OnBlur", "javascript:return onchange_cat5();");

            btnfirst.Attributes.Add("OnClick", "javascript:return firstclick();");
            btnprevious.Attributes.Add("OnClick", "javascript:return prevclick();");
            btnnext.Attributes.Add("OnClick", "javascript:return nextclick();");
            btnlast.Attributes.Add("OnClick", "javascript:return lastclick();");

            drppkgcode.Attributes.Add("OnChange", "javascript:return onchange_drppkgcode();");

            drpuom.Attributes.Add("OnChange", "javascript:return onchange_uom();");

            drppubcenter.Attributes.Add("OnChange", "javascript:return onchange_center();");

            txtratecode.Attributes.Add("onkeydown", "javascript:return ratecodef2(event);");
            lstratecode.Attributes.Add("onclick", "javascript:return onclicratecode(event);");
            lstratecode.Attributes.Add("onkeydown", "javascript:return onclicratecode(event);");

            btngo.Attributes.Add("OnClick", "javascript:return showdetails();");
            btnAdon.Attributes.Add("OnClick", "javascript:return display();");
            txtcancellationcharges.Attributes.Add("OnChange", "javascript:return allamount121();");
            bindagencycode();
       //     binddest();

            if (Request.QueryString["refid"] != null)
            {
                txtref.Text = Request.QueryString["refid"].ToString();
                addonrow.Attributes.Add("style", "display:block;");
                drpAdon.SelectedValue = "Y";
            }
            else
            {
                addonrow.Attributes.Add("style", "display:none;");
                drpAdon.SelectedValue = "N";
            }


            // drpcurrency.SelectedValue = "0";
           // ScriptManager1.SetFocus(btnNew);
          //  btnNew.Focus();
            //if (saveormodify == "0")
            // { 5

            /*DataSet ds = new DataSet();
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
                //ds = binddescrip.description(drppkgcode.SelectedValue, Session["compcode"].ToString(), txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, txtvalidfrom.Text, txtvalidto.Text, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, Session["decimal"].ToString(), drpclientcat.SelectedValue, txtminarea.Text);
                ds = binddescrip.description(drppkgcode.SelectedValue, Session["compcode"].ToString(), txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, txtvalidfrom.Text, txtvalidto.Text, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, Session["decimal"].ToString(), drpclientcat.SelectedValue, txtminarea.Text, type_, drpagencycode.SelectedValue);
                rategrid.DataSource = ds;
                rategrid.DataBind();
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                //ds = binddescrip.description(drppkgcode.SelectedValue, Session["compcode"].ToString(), txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, txtvalidfrom.Text, txtvalidto.Text, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, Session["decimal"].ToString(), drpclientcat.SelectedValue, txtminarea.Text);
                ds = binddescrip.description(drppkgcode.SelectedValue, Session["compcode"].ToString(), txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, txtvalidfrom.Text, txtvalidto.Text, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, Session["decimal"].ToString(), drpclientcat.SelectedValue, txtminarea.Text, type_, drpagencycode.SelectedValue, Session["dateformat"].ToString(), drppubcenter.SelectedValue);
                rategrid.DataSource = ds;
                rategrid.DataBind();
            }*/
        }
        DataSet objDataSetbu1 = new DataSet();
        // Read in the XML file
        objDataSetbu1.ReadXml(Server.MapPath("XML/button.xml"));
        if (btnNew.Enabled == false)
            btnNew.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[0].ToString();
        if (btnSave.Enabled == false)
            btnSave.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[1].ToString();
        if (btnModify.Enabled == false)
            btnModify.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[2].ToString();
        if (btnQuery.Enabled == false)
            btnQuery.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[3].ToString();
        if (btnExecute.Enabled == false)
            btnExecute.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[4].ToString();
        if (btnCancel.Enabled == false)
            btnCancel.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[5].ToString();
        if (btnfirst.Enabled == false)
            btnfirst.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[6].ToString();
        if (btnprevious.Enabled == false)
            btnprevious.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[7].ToString();
        if (btnnext.Enabled == false)
            btnnext.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[8].ToString();
        if (btnlast.Enabled == false)
            btnlast.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[9].ToString();
        if (btnDelete.Enabled == false)
            btnDelete.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[10].ToString();
        if (btnExit.Enabled == false)
            btnExit.ImageUrl = objDataSetbu1.Tables[1].Rows[0].ItemArray[11].ToString();
       
    }
    public void bindagencycode()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Createuser currencycode = new NewAdbooking.Classes.Createuser();
            ds = currencycode.currency();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Createuser currencycode = new NewAdbooking.classesoracle.Createuser();
            ds = currencycode.currency();
        }
        else
        {
            string[] parameterValueArray = new string[] { Session["compcode"].ToString() };
            string procedureName = "login_getCurrencycode_login_getCurrencycode_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.Createuser currencycode = new NewAdbooking.classmysql.Createuser();
            //ds = currencycode.currency();
        }
        drpagencycode.Items.Clear();
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "Select Agency";
        li1.Value = "0";
        li1.Selected = true;
        drpagencycode.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[1].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[1].Rows[i].ItemArray[0].ToString();
            li.Value = ds.Tables[1].Rows[i].ItemArray[1].ToString();
            drpagencycode.Items.Add(li);
        }
    }


    ///////////// bind premium code

    public void bindclientcategory()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster client = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            drpclientcat.Items.Clear();
            ds = client.bindclientcat(Session["compcode"].ToString());
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster client = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                drpclientcat.Items.Clear();
                ds = client.bindclientcat(Session["compcode"].ToString());

            }
        else
            {
                drpclientcat.Items.Clear();
                string[] parameterValueArray = new string[] { Session["compcode"].ToString() };
                string procedureName = "Rate_bindclientcat_Rate_bindclientcat_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster client = new NewAdbooking.classmysql.RateMaster();            
            //ds = client.bindclientcat(Session["compcode"].ToString());
        }
      
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "--Select--";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drpclientcat.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                drpclientcat.Items.Add(li);
            }

        }

    }

    public void bindagencytyp()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Master agent = new NewAdbooking.Classes.Master();
            drpagentyp.Items.Clear();
            ds = agent.addagent_typ(Session["userid"].ToString(), Session["compcode"].ToString());
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Master agent = new NewAdbooking.classesoracle.Master();
                drpagentyp.Items.Clear();
                ds = agent.addagent_typ(Session["userid"].ToString(), Session["compcode"].ToString());

            }
        else
            {
                drpagentyp.Items.Clear();
                string[] parameterValueArray = new string[] { Session["userid"].ToString(), Session["compcode"].ToString() };
                string procedureName = "Websp_agent_Websp_agent_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.Master agent = new NewAdbooking.classmysql.Master();
            //drpagentyp.Items.Clear();
            //ds = agent.addagent_typ(Session["userid"].ToString(), Session["compcode"].ToString());
        }
   
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "--Select--";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drpagentyp.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                drpagentyp.Items.Add(li);
            }

        }

    }

    public void bindpremiumrate(string catcode)
    {

        DataSet dx = new DataSet();
        try{
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster bindrate = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            dx = bindrate.premiumbindcatwise(Session["compcode"].ToString(),catcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bindrate = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            dx = bindrate.premiumbindcatwise(Session["compcode"].ToString(), catcode);
        }
        else
        {
            string[] parameterValueArray = new string[] { Session["compcode"].ToString(), catcode };
            string procedureName = "bindpremiumcatwise_bindpremiumcatwise_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            dx = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster bindrate = new NewAdbooking.classmysql.RateMaster();
            //dx = bindrate.premiumbindcatwise(Session["compcode"].ToString(),catcode);
        }
        drppremium.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Premium-";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drppremium.Items.Add(li1);

        if (dx.Tables[0].Rows.Count > 0)
        {
            for (i = 0; i < dx.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = dx.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Value = dx.Tables[0].Rows[i].ItemArray[1].ToString();
                //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                drppremium.Items.Add(li);
            }

        }
        }
        catch (Exception ex)
        {
           
        }
    
    }


    ///////////////bind rate group code
    private void bindrategroupcode()
    {
        DataSet dx = new DataSet();       
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.pop bindrate = new NewAdbooking.Classes.pop();
                dx = bindrate.ratebind(Session["compcode"].ToString());
            }
            else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.pop bindrate = new NewAdbooking.classesoracle.pop();
                    dx = bindrate.ratebind(Session["compcode"].ToString());
                }
                else
                {
                    string[] parameterValueArray = new string[] { Session["compcode"].ToString() };
                    string procedureName = "bindrateforpreferrence_bindrateforpreferrence_p";
                    NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                    dx = sms.DynamicBindProcedure(procedureName, parameterValueArray);
                    //NewAdbooking.classmysql.pop bindrate = new NewAdbooking.classmysql.pop();
                    //dx = bindrate.ratebind(Session["compcode"].ToString());
                }
            drprategroupcode.Items.Clear();
            int i;
            ListItem li1;
            li1 = new ListItem();
            li1.Text = "-Select Rate Group Code-";
            li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
            li1.Selected = true;
            drprategroupcode.Items.Add(li1);

            if (dx.Tables[0].Rows.Count > 0)
            {
                for (i = 0; i < dx.Tables[0].Rows.Count; i++)
                {
                    ListItem li;
                    li = new ListItem();
                    li.Text = dx.Tables[0].Rows[i].ItemArray[0].ToString();
                    li.Value = dx.Tables[0].Rows[i].ItemArray[1].ToString();
                    //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                    drprategroupcode.Items.Add(li);
                }

            }
            hiddenrategroupcode.Value = Session["ratecode"].ToString();
            drprategroupcode.SelectedValue = Session["ratecode"].ToString();
       
    }


    //////////////////////////////////bind color
    private void bindcolor()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindcolor = new NewAdbooking.Classes.Contract();
            ds = bindcolor.colorbind(Session["compcode"].ToString(), Session["userid"].ToString());
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract bindcolor = new NewAdbooking.classesoracle.Contract();
                ds = bindcolor.colorbind(Session["compcode"].ToString(), Session["userid"].ToString());

            }
        else
            {
                string[] parameterValueArray = new string[] { Session["compcode"].ToString(), Session["userid"].ToString() };
                string procedureName = "bindcolor_bindcolor_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.Contract bindcolor = new NewAdbooking.classmysql.Contract();
            //ds = bindcolor.colorbind(Session["compcode"].ToString(), Session["userid"].ToString());
        }
    
        drpcolor.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Color-";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drpcolor.Items.Add(li1);

        if (ds.Tables[0].Rows.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                drpcolor.Items.Add(li);
                
            }

        }


    }
    ////////////////bind uom

    private void binduom()
    {
        string value = "";
        ///////if in adtype classied is selected than 1 is pass and then the uom drop down is bind from uom_mast where uom type is 3 and if not then not by 3
        if (drpadtype.SelectedItem.Text == "CLASSIFIED")
        {
            value = "1";

        }
        else
        {
            value = "0";
        }
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binduom = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString(), value);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binduom = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString(), value);
            }
        else
            {
                string[] parameterValueArray = new string[] { Session["compcode"].ToString(), Session["userid"].ToString(), value };
                string procedureName = "binduomforrate_binduomforrate_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster binduom = new NewAdbooking.classmysql.RateMaster();
            //ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString(), value);
        }   
        drpuom.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select UOM-";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drpuom.Items.Add(li1);
        if (ds.Tables[0].Rows.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                drpuom.Items.Add(li);
            }
        }
    }

    /////////////////bind the currency
    private void bindcurrency()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract curr = new NewAdbooking.Classes.Contract();
            ds = curr.currencybind(Session["compcode"].ToString(), Session["userid"].ToString());
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract curr = new NewAdbooking.classesoracle.Contract();
                ds = curr.currencybind(Session["compcode"].ToString(), Session["userid"].ToString());
            }
        else
            {
                string[] parameterValueArray = new string[] { Session["compcode"].ToString(), Session["userid"].ToString() };
                string procedureName = "bindcurrency_bindcurrency_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.Contract curr = new NewAdbooking.classmysql.Contract();
            //ds = curr.currencybind(Session["compcode"].ToString(), Session["userid"].ToString());
        }
        drpcurrency.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Currency-";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drpcurrency.Items.Add(li1);
        if (ds.Tables[0].Rows.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                drpcurrency.Items.Add(li);
            }
        }
        //hiddenrategroupcode.Value = Session["currency"].ToString();
        drpcurrency.SelectedValue = Session["currency"].ToString();
    }
    ////////////////////bind package
    private void bindpackage()
    {
        DataSet ds = new DataSet();
        string adtype = drpadtype.SelectedValue;

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindopackage = new NewAdbooking.Classes.Contract();
            ds = bindopackage.packagebind(Session["compcode"].ToString(), Session["userid"].ToString());
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bindopackage = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = bindopackage.packagebind(Session["compcode"].ToString(), adtype, drppubcenter.SelectedValue,0);
        }
        else
        {
            string[] parameterValueArray = new string[] { Session["compcode"].ToString(), adtype, drppubcenter.SelectedValue, "0" };
            string procedureName = "bindpackage_rate_bindpackage_rate_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.Contract bindopackage = new NewAdbooking.classmysql.Contract();
            //ds = bindopackage.packagebind(Session["compcode"].ToString(), Session["userid"].ToString());
        }        
        drppkgcode.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Package Code-";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drppkgcode.Items.Add(li1);

        if (ds.Tables[0].Rows.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                drppkgcode.Items.Add(li);
            }

        }


    }

    
    protected void btnExit_Click(object sender, EventArgs e)
    {

    }
  


    protected void AspNetMessageBox(string strMessage)
    {
        //strMessage = adminResource.GetStringFromResource(strMessage);
        string strAlert = "";
        strAlert = "alert('" + strMessage + "')";
        ScriptManager.RegisterClientScriptBlock(this, typeof(Ratemaster), "ShowAlert", strAlert, true);
    }


    public void getbuttoncheck(string formname)
    {
        DataSet butt = new DataSet();
        formname = "Ratemaster";
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.classlibraryforbutton getpermission = new NewAdbooking.Classes.classlibraryforbutton();
            butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.classlibraryforbutton getpermission = new NewAdbooking.classesoracle.classlibraryforbutton();
                butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);
            }
        else
            {
                string[] parameterValueArray = new string[] { Session["compcode"].ToString(), Session["userid"].ToString(), formname };
                string procedureName = "Websp_Showpermission_Websp_Showpermission_P";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                butt = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.classlibraryforbutton getpermission = new NewAdbooking.classmysql.classlibraryforbutton();
            //butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);
        }
        string id = butt.Tables[0].Rows[0].ItemArray[0].ToString();
        if (id != "0")
        {
            //var id = ds.Tables[0].Rows[0].button_id;
            if (id == "0" || id == "8")
            {

                FlagStatus = 0;
                hiddenFlagStatus.Value = "0";

                btnNew.Enabled = false;
                btnQuery.Enabled = false;
                btnExecute.Enabled = false;
                btnCancel.Enabled = false;
                btnExit.Enabled = false;
                btnDelete.Enabled = false;
                btnModify.Enabled = false;

                btnSave.Enabled = false;
                btnModify.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                //window.location.href = 'EnterPage.aspx';
                //alert("You Are Not Authorised To See This Form");
                //FlagStatus = 0;
                //

            }
            if (id == "1" || id == "9")
            {
                btnNew.Enabled = true;
                btnQuery.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnExecute.Enabled = false;

                btnSave.Enabled = false;
                btnModify.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                FlagStatus = 1;
                hiddenFlagStatus.Value = "1";

            }
            if (id == "2" || id == "10")
            {

                btnNew.Enabled = false;
                btnExecute.Enabled = false;
                btnQuery.Enabled = true;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnModify.Enabled = true;

                btnSave.Enabled = false;
                btnfirst.Enabled = true;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExit.Enabled = true;
                FlagStatus = 2;
                hiddenFlagStatus.Value = "2";

            }
            if (id == "3" || id == "11")
            {
                btnNew.Enabled = true;
                btnQuery.Enabled = true;
                btnExecute.Enabled = false;
                btnDelete.Enabled = false;
                btnModify.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;


                btnSave.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;

                FlagStatus = 3;
                hiddenFlagStatus.Value = "3";


            }
            if (id == "4" || id == "12")
            {
                btnNew.Enabled = false;
                btnQuery.Enabled = true;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExecute.Enabled = false;

                btnNew.Enabled = false;
                btnExecute.Enabled = false;
                btnDelete.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;


                btnModify.Enabled = false;

                btnSave.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                FlagStatus = 4;

                hiddenFlagStatus.Value = "4";

            }
            if (id == "5" || id == "13")
            {
                btnNew.Enabled = true;
                btnSave.Enabled = false;
                btnQuery.Enabled = true;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExecute.Enabled = false;
                btnModify.Enabled = false;
                FlagStatus = 5;
                hiddenFlagStatus.Value = "5";

            }
            if (id == "6" || id == "14")
            {
                btnNew.Enabled = false;
                btnSave.Enabled = false;
                btnQuery.Enabled = true;
                btnModify.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExecute.Enabled = false;

                FlagStatus = 6;
                hiddenFlagStatus.Value = "6";
            }
            if (id == "7" || id == "15")
            {
                btnNew.Enabled = true;
                btnSave.Enabled = false;
                btnQuery.Enabled = true;
                btnModify.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExecute.Enabled = false;
                FlagStatus = 7;

                hiddenFlagStatus.Value = "7";
            }
        }
    }
    public void chkstatus(int FlagStatus)
    {
        if (FlagStatus == 0 || FlagStatus == 8)
        {
            btnNew.Enabled = false;
            btnQuery.Enabled = false;
            btnDelete.Enabled = false;
            btnSave.Enabled = false;
            btnExecute.Enabled = false;
            btnCancel.Enabled = false;
            btnModify.Enabled = false;

            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
            btnExit.Enabled = false;
        }
        if (FlagStatus == 1 || FlagStatus == 9)
        {
            btnNew.Enabled = false;
            btnQuery.Enabled = false;
            btnDelete.Enabled = false;
            btnSave.Enabled = true;
            btnExecute.Enabled = false;
            btnCancel.Enabled = true;
            btnModify.Enabled = false;

            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
            btnExit.Enabled = true;
        }
        if (FlagStatus == 2 || FlagStatus == 10)
        {
            btnExecute.Enabled = true;
            btnQuery.Enabled = false;
            btnDelete.Enabled = false;
            btnNew.Enabled = false;
            btnCancel.Enabled = true;
            btnExecute.Enabled = false;
            btnModify.Enabled = false;
            btnExit.Enabled = true;

            btnSave.Enabled = false;
            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
            btnExit.Enabled = true;
        }
        if (FlagStatus == 3 || FlagStatus == 11)
        {
            btnNew.Enabled = false;
            btnQuery.Enabled = false;
            btnExecute.Enabled = false;
            btnDelete.Enabled = false;
            btnCancel.Enabled = true;
            btnExit.Enabled = true;
            btnModify.Enabled = false;
            btnSave.Enabled = true;
            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
        }
        if (FlagStatus == 4 || FlagStatus == 12)
        {
            btnNew.Enabled = false;
            btnExecute.Enabled = false;
            btnDelete.Enabled = false;
            btnCancel.Enabled = true;
            btnExit.Enabled = true;
            btnModify.Enabled = false;
            btnSave.Enabled = false;
            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
        }
        if (FlagStatus == 5 || FlagStatus == 13)
        {
            btnNew.Enabled = false;
            btnExecute.Enabled = false;
            btnDelete.Enabled = false;
            btnCancel.Enabled = true;
            btnExit.Enabled = true;
            btnModify.Enabled = false;
            btnSave.Enabled = false;
            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
        }
        if (FlagStatus == 6 || FlagStatus == 14)
        {
            btnNew.Enabled = false;
            btnExecute.Enabled = false;
            btnDelete.Enabled = false;
            btnCancel.Enabled = true;
            btnExit.Enabled = true;            
            btnModify.Enabled = false;
            btnSave.Enabled = false;
            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
        }
        if (FlagStatus == 7 || FlagStatus == 15)
        {
            btnNew.Enabled = false;
            btnExecute.Enabled = false;
            btnDelete.Enabled = false;
            btnCancel.Enabled = true;
            btnExit.Enabled = true;
            btnModify.Enabled = false;
            btnSave.Enabled = true;
            btnfirst.Enabled = false;
            btnnext.Enabled = false;
            btnprevious.Enabled = false;
            btnlast.Enabled = false;
        }
    }
    public void updateStatus()
    {
        chkstatus(FlagStatus);
        if (FlagStatus == 2 || FlagStatus == 3)
        {
            btnQuery.Enabled = true;
            btnExecute.Enabled = false;
            btnSave.Enabled = false;
            btnModify.Enabled = true;
            btnfirst.Enabled = true;
            btnnext.Enabled = true;
            btnprevious.Enabled = true;
            btnlast.Enabled = true;
            btnDelete.Enabled = false;
        }
        if (FlagStatus == 4)
        {
            btnDelete.Enabled = true;
            btnExecute.Enabled = false;
            btnSave.Enabled = false;
            btnQuery.Enabled = true;
            btnModify.Enabled = false;
            btnfirst.Enabled = true;
            btnnext.Enabled = true;
            btnprevious.Enabled = true;
            btnlast.Enabled = true;
        }
        if (FlagStatus == 5)
        {
            btnDelete.Enabled = true;
            btnExecute.Enabled = false;
            btnSave.Enabled = false;
            btnQuery.Enabled = true;
            btnModify.Enabled = false;
            btnfirst.Enabled = true;
            btnnext.Enabled = true;
            btnprevious.Enabled = true;
            btnlast.Enabled = true;
        }
        if (FlagStatus == 6 || FlagStatus == 7)
        {
            btnDelete.Enabled = true;
            btnExecute.Enabled = false;
            btnSave.Enabled = false;
            btnQuery.Enabled = true;
            btnModify.Enabled = true;
            btnfirst.Enabled = true;
            btnnext.Enabled = true;
            btnprevious.Enabled = true;
            btnlast.Enabled = true;
        }
    }

    public void autogenerated()
    {
        txtratecode.Enabled = false;
        string auto = "RC";
        string autogen = auto + cou;
        DataSet da = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster autocode = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            da = autocode.autogenrated(Session["compcode"].ToString(), auto);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster autocode = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                da = autocode.autogenrated(Session["compcode"].ToString(), auto);
            }
        else
            {
                string[] parameterValueArray = new string[] { Session["compcode"].ToString(), auto };
                string procedureName = "getautocoderate_getautocoderate_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                da = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster autocode = new NewAdbooking.classmysql.RateMaster();
            //da = autocode.autogenrated(Session["compcode"].ToString(), auto);
        }
        if (da.Tables[0].Rows.Count > 0 && da.Tables[0].Rows[0].ItemArray[0].ToString() != "")
        {
            string ab = da.Tables[0].Rows[0].ItemArray[0].ToString();
            int cou1 = Convert.ToInt32(ab);
            cou1++;
            txtratecode.Text = auto + cou1;
        }
        else
        {
            txtratecode.Text = autogen;
        }
    }
    public void SetProps(System.Web.UI.WebControls.DataGrid DG)
    {
        // DG.Columns[4].ItemStyle.HorizontalAlign = HorizontalAlign.Center;
        DG.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        DG.ItemStyle.HorizontalAlign = HorizontalAlign.Center;
        /****************************************************************************/
        DG.Font.Size = 8;
        DG.Font.Bold = false;
        DG.Font.Name = "tahoma";

        /******************************* Professional 2 **********************************/
        //Border Props 
        DG.GridLines = GridLines.Both;
        DG.CellPadding = 3;
        DG.CellSpacing = 0;
        DG.BorderColor = System.Drawing.Color.FromName("#CCCCCC");
        DG.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(1);


        //Header Props
        DG.HeaderStyle.BackColor = System.Drawing.Color.FromName("#7daae3");
        DG.HeaderStyle.ForeColor = System.Drawing.Color.White;
        DG.HeaderStyle.Font.Bold = true;
        DG.HeaderStyle.Font.Size = 8;

        DG.HeaderStyle.Font.Name = "tahoma";

        DG.ItemStyle.BackColor = System.Drawing.Color.FromName("#ffffff");

    }


    protected void rategrid_ItemDataBound1(object sender, DataGridItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            string text = "Text" + z;
            string rate = e.Item.Cells[1].Text;
            string minrate = e.Item.Cells[2].Text;
            string weekexrate = e.Item.Cells[3].Text;
            string focusrate = e.Item.Cells[4].Text;
            string focusminrate = e.Item.Cells[5].Text;
            string focusexrate = e.Item.Cells[6].Text;
            e.Item.Cells[1].Text = "<input id=" + text + " type=\"text\" value=" + rate + " Class=\"btextforgrid\" />";
            e.Item.Cells[2].Text = "<input id=" + text + " type=\"text\" value=" + minrate + " Class=\"btextforgrid\" />";
            e.Item.Cells[3].Text = "<input id=" + text + " type=\"text\" value=" + weekexrate + " Class=\"btextforgrid\" />";
            e.Item.Cells[4].Text = "<input id=" + text + " type=\"text\" value=" + focusrate + " Class=\"btextforgrid\" />";
            e.Item.Cells[5].Text = "<input id=" + text + " type=\"text\" value=" + focusminrate + " Class=\"btextforgrid\" />";
            e.Item.Cells[6].Text = "<input id=" + text + " type=\"text\" value=" + focusexrate + " Class=\"btextforgrid\" />";
        }
    } 

    protected void rategrid_ItemDataBound(object sender, DataGridItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            if (saveormodify == "1" )
            {
                string text = "Text" + z;
                string texta = "Texta" + z;
                string textb = "Textb" + z;
                string textc = "Textc" + z;
                string textd = "Textd" + z;
                string texte = "Texte" + z;

                string textx = "Textx" + z;
                string texty = "Texty" + z;
                string textz = "Textz" + z;

                string text_sun_rate = "Text_sun_rate" + z;
                string text_mon_rate = "text_mon_rate" + z;
                string text_tue_rate = "text_tue_rate" + z;
                string text_wed_rate = "text_wed_rate" + z;
                string text_thu_rate = "text_thu_rate" + z;
                string text_fri_rate = "text_fri_rate" + z;
                string text_sat_rate = "text_sat_rate" + z;

                string text_sun_rate_extra = "Text_sun_rate_extra" + z;
                string text_mon_rate_extra = "text_mon_rate_extra" + z;
                string text_tue_rate_extra = "text_tue_rate_extra" + z;
                string text_wed_rate_extra = "text_wed_rate_extra" + z;
                string text_thu_rate_extra = "text_thu_rate_extra" + z;
                string text_fri_rate_extra = "text_fri_rate_extra" + z;
                string text_sat_rate_extra = "text_sat_rate_extra" + z;

                string sun_rate = e.Item.Cells[1].Text;
                string mon_rate = e.Item.Cells[2].Text;
                string tue_rate = e.Item.Cells[3].Text;
                string wed_rate = e.Item.Cells[4].Text;
                string thu_rate = e.Item.Cells[5].Text;
                string fri_rate = e.Item.Cells[6].Text;
                string sat_rate = e.Item.Cells[7].Text;

                string sun_rate_extra = e.Item.Cells[8].Text;
                string mon_rate_extra = e.Item.Cells[9].Text;
                string tue_rate_extra = e.Item.Cells[10].Text;
                string wed_rate_extra = e.Item.Cells[11].Text;
                string thu_rate_extra = e.Item.Cells[12].Text;
                string fri_rate_extra = e.Item.Cells[13].Text;
                string sat_rate_extra = e.Item.Cells[14].Text;

                string rate = e.Item.Cells[15].Text;
                //string minrate = e.Item.Cells[2].Text;
                string weekendrate = e.Item.Cells[17].Text;
                string focusrate = e.Item.Cells[16].Text;
                string weekextra = e.Item.Cells[21].Text;
                string focusextra = e.Item.Cells[22].Text;
                string weekendextra = e.Item.Cells[23].Text;


                e.Item.Cells[1].Text = "<input id=" + text_sun_rate + " type=\"TextBox\" enabled value=" + sun_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[2].Text = "<input id=" + text_mon_rate + " type=\"TextBox\" enabled value=" + mon_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[3].Text = "<input id=" + text_tue_rate + " type=\"TextBox\" enabled value=" + tue_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[4].Text = "<input id=" + text_wed_rate + " type=\"TextBox\" enabled value=" + wed_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[5].Text = "<input id=" + text_thu_rate + " type=\"TextBox\" enabled value=" + thu_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[6].Text = "<input id=" + text_fri_rate + " type=\"TextBox\" enabled value=" + fri_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[7].Text = "<input id=" + text_sat_rate + " type=\"TextBox\" enabled value=" + sat_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";

                e.Item.Cells[8].Text = "<input id=" + text_sun_rate_extra + " type=\"TextBox\" enabled value=" + sun_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[9].Text = "<input id=" + text_mon_rate_extra + " type=\"TextBox\" enabled value=" + mon_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[10].Text = "<input id=" + text_tue_rate_extra + " type=\"TextBox\" enabled value=" + tue_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[11].Text = "<input id=" + text_wed_rate_extra + " type=\"TextBox\" enabled value=" + wed_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[12].Text = "<input id=" + text_thu_rate_extra + " type=\"TextBox\" enabled value=" + thu_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[13].Text = "<input id=" + text_fri_rate_extra + " type=\"TextBox\" enabled value=" + fri_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[14].Text = "<input id=" + text_sat_rate_extra + " type=\"TextBox\" enabled value=" + sat_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                //string focusminrate = e.Item.Cells[5].Text;
                //string focusexrate = e.Item.Cells[6].Text;
                e.Item.Cells[15].Text = "<input id=" + text + " type=\"TextBox\" enabled value=" + rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                //e.Item.Cells[2].Text = "<input id=" + texta + " type=\"TextBox\" enabled value=" + minrate + " Class=\"btextforgrid\" OnChange=\"return chkamount(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                //e.Item.Cells[3].Text = "<input id=" + textb + " type=\"TextBox\" enabled value=" + weekexrate + " Class=\"btextforgrid\" OnChange=\"return chkamount(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[16].Text = "<input id=" + textc + " type=\"TextBox\" enabled value=" + focusrate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[17].Text = "<input id=" + textd + " type=\"TextBox\" enabled value=" + weekendrate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                //e.Item.Cells[6].Text = "<input id=" + texte + " type=\"TextBox\" enabled value=" + focusexrate + " Class=\"btextforgrid\" OnChange=\"return chkamount(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[21].Text = "<input id=" + textx + " type=\"TextBox\" enabled value=" + weekextra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[22].Text = "<input id=" + texty + " type=\"TextBox\" enabled value=" + focusextra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[23].Text = "<input id=" + textz + " type=\"TextBox\" enabled value=" + weekendextra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";

            }
            else
            {
                string text = "Text" + z;
                string texta = "Texta" + z;
                string textb = "Textb" + z;
                string textc = "Textc" + z;
                string textd = "Textd" + z;
                string texte = "Texte" + z;

                string textx = "Textx" + z;
                string texty = "Texty" + z;
                string textz = "Textz" + z;

                string text_sun_rate = "Text_sun_rate" + z;
                string text_mon_rate = "text_mon_rate" + z;
                string text_tue_rate = "text_tue_rate" + z;
                string text_wed_rate = "text_wed_rate" + z;
                string text_thu_rate = "text_thu_rate" + z;
                string text_fri_rate = "text_fri_rate" + z;
                string text_sat_rate = "text_sat_rate" + z;

                string text_sun_rate_extra = "Text_sun_rate_extra" + z;
                string text_mon_rate_extra = "text_mon_rate_extra" + z;
                string text_tue_rate_extra = "text_tue_rate_extra" + z;
                string text_wed_rate_extra = "text_wed_rate_extra" + z;
                string text_thu_rate_extra = "text_thu_rate_extra" + z;
                string text_fri_rate_extra = "text_fri_rate_extra" + z;
                string text_sat_rate_extra = "text_sat_rate_extra" + z;

                string sun_rate = e.Item.Cells[1].Text;
                string mon_rate = e.Item.Cells[2].Text;
                string tue_rate = e.Item.Cells[3].Text;
                string wed_rate = e.Item.Cells[4].Text;
                string thu_rate = e.Item.Cells[5].Text;
                string fri_rate = e.Item.Cells[6].Text;
                string sat_rate = e.Item.Cells[7].Text;

                string sun_rate_extra = e.Item.Cells[8].Text;
                string mon_rate_extra = e.Item.Cells[9].Text;
                string tue_rate_extra = e.Item.Cells[10].Text;
                string wed_rate_extra = e.Item.Cells[11].Text;
                string thu_rate_extra = e.Item.Cells[12].Text;
                string fri_rate_extra = e.Item.Cells[13].Text;
                string sat_rate_extra = e.Item.Cells[14].Text;


                string rate = e.Item.Cells[15].Text;
                //string minrate = e.Item.Cells[2].Text;
                string weekendrate = e.Item.Cells[17].Text;
                string focusrate = e.Item.Cells[16].Text;

                string weekextra = e.Item.Cells[21].Text;
                string focusextra = e.Item.Cells[22].Text;
                string weekendextra = e.Item.Cells[23].Text;


                e.Item.Cells[1].Text = "<input id=" + text_sun_rate + " type=\"TextBox\" disabled value=" + sun_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[2].Text = "<input id=" + text_mon_rate + " type=\"TextBox\" disabled value=" + mon_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[3].Text = "<input id=" + text_tue_rate + " type=\"TextBox\" disabled value=" + tue_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[4].Text = "<input id=" + text_wed_rate + " type=\"TextBox\" disabled value=" + wed_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[5].Text = "<input id=" + text_thu_rate + " type=\"TextBox\" disabled value=" + thu_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[6].Text = "<input id=" + text_fri_rate + " type=\"TextBox\" disabled value=" + fri_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[7].Text = "<input id=" + text_sat_rate + " type=\"TextBox\" disabled value=" + sat_rate + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";

                e.Item.Cells[8].Text = "<input id=" + text_sun_rate_extra + " type=\"TextBox\" disabled value=" + sun_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[9].Text = "<input id=" + text_mon_rate_extra + " type=\"TextBox\" disabled value=" + mon_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[10].Text = "<input id=" + text_tue_rate_extra + " type=\"TextBox\" disabled value=" + tue_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[11].Text = "<input id=" + text_wed_rate_extra + " type=\"TextBox\" disabled value=" + wed_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[12].Text = "<input id=" + text_thu_rate_extra + " type=\"TextBox\" disabled value=" + thu_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[13].Text = "<input id=" + text_fri_rate_extra + " type=\"TextBox\" disabled value=" + fri_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[14].Text = "<input id=" + text_sat_rate_extra + " type=\"TextBox\" disabled value=" + sat_rate_extra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                //string focusminrate = e.Item.Cells[5].Text;
                //string focusexrate = e.Item.Cells[6].Text;
                e.Item.Cells[15].Text = "<input id=" + text + " type=\"TextBox\" value=" + rate + " disabled Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                //e.Item.Cells[2].Text = "<input id=" + texta + " type=\"TextBox\" value=" + minrate + " disabled Class=\"btextforgrid\" OnChange=\"return chkamount(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                //e.Item.Cells[3].Text = "<input id=" + textb + " type=\"TextBox\" value=" + weekexrate + " disabled Class=\"btextforgrid\" OnChange=\"return chkamount(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[16].Text = "<input id=" + textc + " type=\"TextBox\" value=" + focusrate + " disabled Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[17].Text = "<input id=" + textd + " type=\"TextBox\" value=" + weekendrate + " disabled Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                //e.Item.Cells[6].Text = "<input id=" + texte + " type=\"TextBox\" value=" + focusexrate + " disabled Class=\"btextforgrid\" OnChange=\"return chkamount(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";

                e.Item.Cells[21].Text = "<input id=" + textx + " type=\"TextBox\" disabled value=" + weekextra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[22].Text = "<input id=" + texty + " type=\"TextBox\" disabled value=" + focusextra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";
                e.Item.Cells[23].Text = "<input id=" + textz + " type=\"TextBox\" disabled value=" + weekendextra + " Class=\"btextforgrid\" OnChange=\"return chkamountgrid(this);\" MaxLength=\"8\" onkeypress=\"return gridnotchar();\" />";

                

            }
            z++;
        }
    }
    [Ajax.AjaxMethod]
    public void insertratedetail(string rate,string focusrate,string ratecode,string compcode,string userid,string edition,string uniquerate)
    {
       // FourCPlus.AdBooking.BookingMaster.Sql.RateMaster insert = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
       // DataSet di = new DataSet();
       // di = insert.ratedetailsinsert(rate, focusrate, ratecode, compcode, userid, edition, uniquerate);
    }

    [Ajax.AjaxMethod]
    public void updateratedetail(string rate, string focusrate, string ratecode, string compcode, string userid, string edition, string rateuniqueid, string weekendrate, string type, string weekextra, string focusextra, string weekendextra, string rate_sun, string rate_mon, string rate_tue, string rate_wed, string rate_thu, string rate_fri, string rate_sat, string rate_sun_extra, string rate_mon_extra, string rate_tue_extra, string rate_wed_extra, string rate_thu_extra, string rate_fri_extra, string rate_sat_extra, string adype1, string pubcenter)
    {
        DataSet di = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster insert = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            di = insert.ratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate, type, weekextra, focusextra, weekextra, rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, adype1, pubcenter);
            //di = insert.ratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                edition = edition.Trim();
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster insert = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                di = insert.ratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate, type, weekextra, focusextra, weekextra, rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, adype1, pubcenter);
                //di = insert.ratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate);
            }
        else
            {
                edition = edition.Trim();
                string[] parameterValueArray = new string[] { compcode, ratecode, userid, rate, focusrate, edition, rateuniqueid, weekendrate, type, weekextra, focusextra, weekextra, rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, adype1, pubcenter };
                string procedureName = "updateratedetail_updateratedetail_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                di = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster insert = new NewAdbooking.classmysql.RateMaster();
            //di = insert.ratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate);
        }
    }

    [Ajax.AjaxMethod]
    public void updatesolorate(string rate, string focusrate, string ratecode, string compcode, string userid, string edition, string rateuniqueid, string weekendrate,string type)
    {
        DataSet di = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster insertsolocode = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            di = insertsolocode.soloratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate, type);
           // di = insertsolocode.soloratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster insertsolocode = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                di = insertsolocode.soloratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate, type);
                //di = insertsolocode.soloratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate);
            }
        else
            {
                string[] parameterValueArray = new string[] { compcode, ratecode, userid, rate, focusrate, edition, rateuniqueid, weekendrate, type };
                string procedureName = "updatesoloratedetail_updatesoloratedetail_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                di = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster insertsolocode = new NewAdbooking.classmysql.RateMaster();
            //di = insertsolocode.soloratedetailsupdate(rate, focusrate, ratecode, compcode, userid, edition, rateuniqueid, weekendrate);
        }
    } 
    public string  checksolopackage()
    {
        string chk = "";
        if (drppkgcode.SelectedValue != "0")
        {
            datesave getdatechk = new datesave();
            string validfromdate1 = txtvalidfrom.Text;// getdatechk.getDate(dateformat, txtvalidfrom.Text);
            string validtill1 = txtvalidto.Text;// getdatechk.getDate(dateformat, txtvalidto.Text);
            string packagecode = drppkgcode.SelectedValue;
            string rateuniqueid;
            if (drpadtype.SelectedItem.Text == "DISPLAY")
            {
                /*new change ankur for agency*/
                if (type_ == "company")
                {
                    rateuniqueid = drppubcenter.SelectedValue + txtratecode.Text + drpadtype.SelectedValue + drpadcategory.SelectedValue + drpsubcategory.SelectedValue + drpcolor.SelectedValue + drppkgcode.SelectedValue + drpcurrency.SelectedValue + validfromdate1 + validtill1 + drpuom.SelectedValue + drppremium.SelectedValue + txtfrominsert.Text + txttoinsert.Text + drpclientcat.SelectedValue;// +txtminarea.Text;
                }
                else
                {
                    rateuniqueid = txtratecode.Text + drpadtype.SelectedValue + drpadcategory.SelectedValue + drpsubcategory.SelectedValue + drpcolor.SelectedValue + drppkgcode.SelectedValue + drpcurrency.SelectedValue + validfromdate1 + validtill1 + drpuom.SelectedValue + drppremium.SelectedValue + txtfrominsert.Text + txttoinsert.Text + drpclientcat.SelectedValue + drpagencycode.SelectedValue;
                }
            }
            else
            {
                /*new change ankur for agency*/
                if (type_ == "company")
                {
                    rateuniqueid = drppubcenter.SelectedValue + txtratecode.Text + drpadtype.SelectedValue + drpadcategory.SelectedValue + drpsubcategory.SelectedValue + drpcolor.SelectedValue + drppkgcode.SelectedValue + drpcurrency.SelectedValue + validfromdate1 + validtill1 + drpuom.SelectedValue + drpadscat4.SelectedValue + drpadscat5.SelectedValue + drpadscat6.SelectedValue + drppremium.SelectedValue + txtsizefrom.Text + txtsizeto.Text + txtfrominsert.Text + txttoinsert.Text + drpclientcat.SelectedValue;// +txtminarea.Text;
                }
                else
                {
                    rateuniqueid = txtratecode.Text + drpadtype.SelectedValue + drpadcategory.SelectedValue + drpsubcategory.SelectedValue + drpcolor.SelectedValue + drppkgcode.SelectedValue + drpcurrency.SelectedValue + validfromdate1 + validtill1 + drpuom.SelectedValue + drpadscat4.SelectedValue + drpadscat5.SelectedValue + drpadscat6.SelectedValue + drppremium.SelectedValue + txtsizefrom.Text + txtsizeto.Text + txtfrominsert.Text + txttoinsert.Text + drpclientcat.SelectedValue + drpagencycode.SelectedValue;
                }

            }
            DataSet ds = new DataSet();
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
                ds = binddescrip.modifygrid(Session["compcode"].ToString(), drppkgcode.SelectedValue, txtrate.Text, txtfocusrate.Text, txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, txtweekrate.Text, Session["decimal"].ToString(), drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text, type_, drpagencycode.SelectedValue, Session["dateformat"].ToString(), drppubcenter.SelectedValue, txtratesun.Text, txtratemon.Text, txtratetue.Text, txtratewed.Text, txtratethu.Text, txtratefri.Text, txtratesat.Text, txtratesunextra.Text, txtratemonextra.Text, txtratetueextra.Text, txtratewedextra.Text, txtratethuextra.Text, txtratefriextra.Text, txtratesatextra.Text, txtextrarate.Text);
                //ds = binddescrip.modifygrid(Session["compcode"].ToString(), drppkgcode.SelectedValue, txtrate.Text, txtfocusrate.Text, txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, txtweekrate.Text, Session["decimal"].ToString(), drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text);
            }
                else
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();

                    //ds = binddescrip.modifygrid(Session["compcode"].ToString(), drppkgcode.SelectedValue, txtrate.Text, txtfocusrate.Text, txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, txtweekrate.Text, Session["decimal"].ToString(), drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text);
                    ds = binddescrip.modifygrid(Session["compcode"].ToString(), drppkgcode.SelectedValue, txtrate.Text, txtfocusrate.Text, txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, txtweekrate.Text, Session["decimal"].ToString(), drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text, type_, drpagencycode.SelectedValue, Session["dateformat"].ToString(), drppubcenter.SelectedValue, txtratesun.Text, txtratemon.Text, txtratetue.Text, txtratewed.Text, txtratethu.Text, txtratefri.Text, txtratesat.Text, txtratesunextra.Text, txtratemonextra.Text, txtratetueextra.Text, txtratewedextra.Text, txtratethuextra.Text, txtratefriextra.Text, txtratesatextra.Text,txtextrarate.Text);

                }
                else
                {
                    string[] parameterValueArray = new string[] { Session["compcode"].ToString(), txtrate.Text, txtfocusrate.Text, drppkgcode.SelectedValue, txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, txtweekrate.Text, Session["decimal"].ToString(), drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text, type_, drpagencycode.SelectedValue,  drppubcenter.SelectedValue, txtratesun.Text, txtratemon.Text, txtratetue.Text, txtratewed.Text, txtratethu.Text, txtratefri.Text, txtratesat.Text, txtratesunextra.Text, txtratemonextra.Text, txtratetueextra.Text, txtratewedextra.Text, txtratethuextra.Text, txtratefriextra.Text, txtratesatextra.Text, txtextrarate.Text };
                    string procedureName = "ratemodifygrid_ratemodifygrid_p";
                    NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                    ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
                    //NewAdbooking.classmysql.RateMaster binddescrip = new NewAdbooking.classmysql.RateMaster();
                    //ds = binddescrip.modifygrid(Session["compcode"].ToString(), drppkgcode.SelectedValue, txtrate.Text, txtfocusrate.Text, txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, txtweekrate.Text, Session["decimal"].ToString(), drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text);
                }
            chkedition = ds;
            //////this is to check that the package name's edition's solo rate has been assigned or not
            hiddenchkcount.Value = "0";
            if (ds.Tables[0].Rows.Count > 1)
            {
                hiddenchkcount.Value = "1";
                for (int x = 0; x <= ds.Tables[0].Rows.Count - 1; x++)
                {
                    DataSet dpck = new DataSet();
                    if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
                    {
                        FourCPlus.AdBooking.BookingMaster.Sql.RateMaster chkpac = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
                        /// "1" indicates that we are checking the per edition wise
                        //dpck = chkpac.checkpackage(ds.Tables[0].Rows[x].ItemArray[0].ToString(), Session["compcode"].ToString(), "1", txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text);
                        dpck = chkpac.checkpackage(ds.Tables[0].Rows[x].ItemArray[0].ToString(), Session["compcode"].ToString(), "1", txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text, type_, drpagencycode.SelectedValue, Session["dateformat"].ToString(), drppubcenter.SelectedValue);
                    }
                    else
                        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                        {
                            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster chkpac = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                            /// "1" indicates that we are check-ing the per edition wise
                            //dpck = chkpac.checkpackage(ds.Tables[0].Rows[x].ItemArray[0].ToString(), Session["compcode"].ToString(), "1", txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text);
                            dpck = chkpac.checkpackage(ds.Tables[0].Rows[x].ItemArray[18].ToString(), Session["compcode"].ToString(), "1", txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text, type_, drpagencycode.SelectedValue,Session["dateformat"].ToString(), drppubcenter.SelectedValue);
                        }
                    else
                        {
                            string[] parameterValueArray = new string[] { Session["compcode"].ToString(), ds.Tables[0].Rows[x].ItemArray[18].ToString(), "1", txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text, type_, drpagencycode.SelectedValue, drppubcenter.SelectedValue };
                            string procedureName = "chkpackagecode_chkpackagecode_p";
                            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                            dpck = sms.DynamicBindProcedure(procedureName, parameterValueArray);
                        //NewAdbooking.classmysql.RateMaster chkpac = new NewAdbooking.classmysql.RateMaster();
                        //dpck = chkpac.checkpackage(ds.Tables[0].Rows[x].ItemArray[0].ToString(), Session["compcode"].ToString(), "1", txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text);
                    }
                    if (dpck.Tables[0].Rows.Count <= 0)                    {
                        //message = "" + ds.Tables[0].Rows[x].ItemArray[0].ToString() + " Edition Solo Rate Has Not Been Assigned";
                        ////message = " Editions Solo Rate Has Not Been Assigned";
                        //AspNetMessageBox(message);
                        chk = ds.Tables[0].Rows[x].ItemArray[27].ToString();
                        return chk;
                    }
                }              
            }          
        }
        chk = "t";
        return chk;
    }
    public string getDate(string dateformat, string dateValue)
    {
        //splitting of date
        string dateReturn = "";
        if (dateValue != "")
        {
            char[] splitterfrom = { '/' };
            string[] myarrayfrom = dateValue.Split(splitterfrom);
            string dd, mm, yyyy;
            if (dateformat == "dd/mm/yyyy")
            {
                //for from date
                dd = myarrayfrom[0];
                mm = myarrayfrom[1];
                yyyy = myarrayfrom[2];
                dateReturn = mm + "/" + dd + "/" + yyyy;
            }
            //else if (dateformat == "yyyy/mm/dd")
            //{
            //    yyyy = myarrayfrom[0];
            //    mm = myarrayfrom[1];
            //    dd = myarrayfrom[2];

            //    dateReturn = mm + "/" + dd + "/" + yyyy;
            //}
            else
            {
                dateReturn = dateValue;
            }
        }
        return dateReturn;
    }

    public string dateCorrect(string dateformat, string dateValue)
    {
        //splitting of date
        string dateReturn = "";
        if (dateValue != "")
        {
            char[] splitterfrom = { '/' };
            string[] myarrayfrom = dateValue.Split(splitterfrom);
            string dd, mm, yyyy;
            if (dateformat == "dd/mm/yyyy")
            {
                //for from date
                dd = myarrayfrom[0];
                mm = myarrayfrom[1];
                yyyy = myarrayfrom[2];
                dateReturn = dd + "/" + mm + "/" + yyyy;
            }
            else if (dateformat == "mm/dd/yyyy")
            {
                //for from date
                dd = myarrayfrom[0];
                mm = myarrayfrom[1];
                yyyy = myarrayfrom[2];
                dateReturn = mm + "/" + dd + "/" + yyyy;
            }
            else if (dateformat == "yyyy/mm/dd")
            {
                yyyy = myarrayfrom[2];
                mm = myarrayfrom[1];
                dd = myarrayfrom[0];
                dateReturn = yyyy + "/" + mm + "/" + dd;
            }
            else
            {
                dateReturn = dateValue;
            }
        }
        return dateReturn;
    }

    private void fillPubCenter()
    {
        DataSet ds;
        drppubcenter.Items.Clear();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.login logindetail = new NewAdbooking.Classes.login();
            ds = logindetail.getPubCenter();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.login logindetail = new NewAdbooking.classesoracle.login();
            ds = logindetail.getPubCenter();
        }
        else
        {
            string[] parameterValueArray = new string[] { Session["compcode"].ToString() };
            string procedureName = "websp_pubcenter_websp_pubcenter_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.login logindetail = new NewAdbooking.classmysql.login();
            //ds = logindetail.getPubCenter();
        }
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "Select Center";
        li1.Value = "0";
        li1.Selected = true;
        drppubcenter.Items.Add(li1);
        string[] drptext;
        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            if (ds.Tables[0].Rows[i].ItemArray[1].ToString().IndexOf("(") > 0)
            {
                drptext = ds.Tables[0].Rows[i].ItemArray[1].ToString().Split('(');
                li.Text = drptext[0];
            }
            else
            {
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            }
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drppubcenter.Items.Add(li);
        }
    }

    protected void enabledayrate()
    {
        txtratesun.Enabled = true;
        txtratemon.Enabled = true;
        txtratetue.Enabled = true;
        txtratewed.Enabled = true;
        txtratethu.Enabled = true;
        txtratefri.Enabled = true;
        txtratesat.Enabled = true;
        txtratesunextra.Enabled = true;
        txtratemonextra.Enabled = true;
        txtratetueextra.Enabled = true;
        txtratewedextra.Enabled = true;
        txtratethuextra.Enabled = true;
        txtratefriextra.Enabled = true;
        txtratesatextra.Enabled = true;
        txtmaxwidth.Enabled = true;
    }

    protected void disabledayrate()
    {
        txtratesun.Enabled = false;
        txtratemon.Enabled = false;
        txtratetue.Enabled = false;
        txtratewed.Enabled = false;
        txtratethu.Enabled = false;
        txtratefri.Enabled = false;
        txtratesat.Enabled = false;
        txtratesunextra.Enabled = false;
        txtratemonextra.Enabled = false;
        txtratetueextra.Enabled = false;
        txtratewedextra.Enabled = false;
        txtratethuextra.Enabled = false;
        txtratefriextra.Enabled = false;
        txtratesatextra.Enabled = false;
        txtmaxwidth.Enabled = false;
    }

    protected void cleardayrate()
    {
        txtratesun.Text = "";
        txtratemon.Text = "";
        txtratetue.Text = "";
        txtratewed.Text = "";
        txtratethu.Text = "";
        txtratefri.Text = "";
        txtratesat.Text = "";
        txtratesunextra.Text = "";
        txtratemonextra.Text = "";
        txtratetueextra.Text = "";
        txtratewedextra.Text = "";
        txtratethuextra.Text = "";
        txtratefriextra.Text = "";
        txtratesatextra.Text = "";
        txtmaxwidth.Text = "";
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void sessionnull()
    {
        Session["rateinsert"] = null;
    }

    [Ajax.AjaxMethod]
    public DataSet executerate(string compcode, string ratecode, string adtype, string currency, string rategroup, string colorcode, string uomcode, string pkgcode, string center, string adcat, string positionprem,string validfrom, string dateformat,string subcat)
    {
        DataSet execute_query = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster execute = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            //executequery = execute.executedate(Session["compcode"].ToString(), ratecode, adtype, currency, rategroup, colorcode, uomcode, pkgcode);
            if (center == "")
                center = "0";
            execute_query = execute.executedate(compcode, ratecode, adtype, currency, rategroup, colorcode, uomcode, pkgcode, center, adcat, positionprem,validfrom,dateformat,subcat);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster execute = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            if (center == "")
                center = "0";
            //executequery = execute.executedate(Session["compcode"].ToString(), ratecode, adtype, currency, rategroup, colorcode, uomcode, pkgcode);
            execute_query = execute.executedate(compcode, ratecode, adtype, currency, rategroup, colorcode, uomcode, pkgcode, center, adcat, positionprem,validfrom,dateformat,subcat);

        }
        else
        {
            if (center == "")
                center = "0";
            string[] parameterValueArray = new string[] { compcode, ratecode, adtype, currency, rategroup, colorcode, uomcode, pkgcode, center, adcat, positionprem, validfrom, subcat };
            string procedureName = "executeratecode_executeratecode_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            execute_query = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster execute = new NewAdbooking.classmysql.RateMaster();
           // execute_query = execute.executedate(compcode, ratecode, adtype, currency, rategroup, colorcode, uomcode, pkgcode);
        }
        return execute_query;
    }

    [Ajax.AjaxMethod]
    public DataSet pkg_adcat_uom_bind(string compcode, string adtype, string center)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster bind = new NewAdbooking.Classes.BookingMaster();
            ds = bind.advdatacategoryRate(compcode, adtype, center);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bind = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = bind.advdatacategory(compcode, adtype, center);

        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, adtype, center };
            string procedureName = "book_advcategory_book_advcategory_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.BookingMaster bind = new NewAdbooking.classmysql.BookingMaster();
            //ds = bind.advdatacategory(compcode, adtype);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet adcatclick(string compcode,string adcat)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.CombinationMaster cls_comb = new NewAdbooking.Classes.CombinationMaster();
            ds = cls_comb.advdatasubcatcat(compcode, adcat);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.CombinationMaster cls_comb = new NewAdbooking.classesoracle.CombinationMaster();
            ds = cls_comb.advdatasubcatcat(compcode, adcat);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, adcat };
            string procedureName = "advsubcattyp_advsubcattyp_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.CombinationMaster cls_comb = new NewAdbooking.classmysql.CombinationMaster();
            //ds = cls_comb.advdatasubcatcat(compcode, adcat);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet bindpremium(string compcode, string catcode)
    {
        string error = "";
        DataSet dx = new DataSet();
        try
        {           
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                FourCPlus.AdBooking.BookingMaster.Sql.RateMaster bindrate = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
                dx = bindrate.premiumbindcatwise(compcode, catcode);
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bindrate = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                dx = bindrate.premiumbindcatwise(compcode, catcode);
            }
            else
            {
                string[] parameterValueArray = new string[] { compcode, catcode };
                string procedureName = "bindpremiumcatwise_bindpremiumcatwise_p";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                dx = sms.DynamicBindProcedure(procedureName, parameterValueArray);
                //NewAdbooking.classmysql.RateMaster bindrate = new NewAdbooking.classmysql.RateMaster();
                //dx = bindrate.premiumbindcatwise(compcode, catcode);
            }           
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        return dx;
    }

    [Ajax.AjaxMethod]
    public DataSet adsubcatclick(string compcode, string adscat)
    {
        DataSet dcat4 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster bingcat4 = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            dcat4 = bingcat4.bindscategory4(compcode, adscat, "0");
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bingcat4 = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            dcat4 = bingcat4.bindscategory4(compcode, adscat, "0");
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, adscat, "0" };
            string procedureName = "Rate_bindadcat4_Rate_bindadcat4_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            dcat4 = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster bingcat4 = new NewAdbooking.classmysql.RateMaster();
            //dcat4 = bingcat4.bindscategory4(compcode, adscat, "0");
        }
        return dcat4;
    }

    [Ajax.AjaxMethod]
    public DataSet adscat4click(string compcode, string adscat)
    {
        DataSet dcat4 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster bingcat4 = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            dcat4 = bingcat4.bindscategory4(compcode, adscat, "1");
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bingcat4 = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            dcat4 = bingcat4.bindscategory4(compcode, adscat, "1");
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, adscat, "1" };
            string procedureName = "Rate_bindadcat4_Rate_bindadcat4_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            dcat4 = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster bingcat4 = new NewAdbooking.classmysql.RateMaster();
            //dcat4 = bingcat4.bindscategory4(compcode, adscat, "1");
        }
        return dcat4;
    }

    [Ajax.AjaxMethod]
    public DataSet bindsubcats(string compcode, string adscat,string value)
    {
        DataSet dcat4 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster bingcat4 = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            dcat4 = bingcat4.bindscategory4(compcode, adscat, value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bingcat4 = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            dcat4 = bingcat4.bindscategory4(compcode, adscat, value);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, adscat, value };
            string procedureName = "Rate_bindadcat4_Rate_bindadcat4_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            dcat4 = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster bingcat4 = new NewAdbooking.classmysql.RateMaster();
            //dcat4 = bingcat4.bindscategory4(compcode, adscat, value);
        }
        return dcat4;
    }

    [Ajax.AjaxMethod]
    public DataSet drppkgcode_click(string compcode, string pkgcode, string center, string adtype)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = binddescrip.descriptionforchange(pkgcode, compcode, center, adtype);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = binddescrip.descriptionforchange(pkgcode, compcode, center, adtype);//, type_, drpagencycode.SelectedValue);
        }
        else
        {
            //string[] parameterValueArray = new string[] { pkgcode, compcode, center, adtype };
            string[] parameterValueArray = new string[] { compcode, pkgcode, center, adtype };
            string procedureName = "Binddescriptionforchange1_Binddescriptionforchange1_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster binddescrip = new NewAdbooking.classmysql.RateMaster();
            //ds = binddescrip.descriptionforchange(pkgcode, compcode);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet premiumclick(string compcode, string premium)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster autocode = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = autocode.getpremiumval(compcode, premium);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster autocode = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = autocode.getpremiumval(compcode, premium);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, premium };
            string procedureName = "gatvalpremium_gatvalpremium_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster autocode = new NewAdbooking.classmysql.RateMaster();
            //ds = autocode.getpremiumval(compcode, premium);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet chkratecode(string compcode, string ratecode, string adtype, string adcategory, string adsubcategory, string color, string package, string currency, string validfromdate, string validtill, string uom, string adscat4, string adscat5, string adscat6, string premium, string txtsizefrom, string txtsizeto, string frominsert, string toinsert, string clientcat, string minadarea, string drpagencycode, string dateformat, string pubcenter)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster chkratecode = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = chkratecode.ratecodecheck(compcode, ratecode, adtype, adcategory, adsubcategory, color, package, currency, validfromdate, validtill, uom, adscat4, adscat5, adscat6, premium, txtsizefrom, txtsizeto, frominsert, toinsert, clientcat, minadarea, drpagencycode, dateformat, pubcenter);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster chkratecode = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = chkratecode.ratecodecheck(compcode, ratecode, adtype, adcategory, adsubcategory, color, package, currency, validfromdate, validtill, uom, adscat4, adscat5, adscat6, premium, txtsizefrom, txtsizeto, frominsert, toinsert, clientcat, minadarea, drpagencycode, dateformat, pubcenter);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, ratecode, adtype, adcategory, adsubcategory, color, package, currency, validfromdate, validtill, uom, adscat4, adscat5, adscat6, premium, txtsizefrom, txtsizeto, frominsert, toinsert, clientcat, minadarea,"", drpagencycode,  pubcenter ,""};
            string procedureName = "chkratecode_chkratecode_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster chkratecode = new NewAdbooking.classmysql.RateMaster();
            //ds = chkratecode.ratecodecheck(compcode, ratecode, adtype, adcategory, adsubcategory, color, package, currency, validfromdate, validtill, uom, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom, txtsizeto, frominsert, toinsert, clientcat, minadarea);
        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet getcombincode(string combindesc, string adtype)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binduom = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = binduom.getCombinCode(combindesc, adtype);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binduom = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = binduom.getCombinCode(combindesc, adtype);
        }
        else
        {
            string[] parameterValueArray = new string[] { combindesc, adtype };
            string procedureName = "getCombinCode";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet binduom(string compcode, string uom)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binduom = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = binduom.getuom_desc(compcode, uom);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binduom = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = binduom.getuom_desc(compcode, uom);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, uom };
            string procedureName = "getuomdesc_getuomdesc_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster binduom = new NewAdbooking.classmysql.RateMaster();
            //ds = binduom.getuom_desc(compcode, uom);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public string getsoloname(string rateid, string compcode, string pkgcode, string rate, string focusrate, string ratecode, string adtype, string adcategory, string subcategory, string color, string currency, string validfromdate1, string validtill1, string weekrate, string decimalvalue, string uom, string adscat4, string adscat5, string adscat6, string premium, string sizefrom, string sizeto, string frominsert, string toinsert, string clientcat, string minarea, string type_, string agencycode, string dateformat, string pubcenter, string ratesun, string ratemon, string ratetue, string ratewed, string ratethu, string ratefri, string ratesat, string ratesunextra, string ratemonextra, string ratetueextra, string ratewedextra, string ratethuextra, string ratefriextra, string ratesatextra, string extrarate)
    {
        DataSet ds = new DataSet();
        string returnvalue = "";
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = binddescrip.modifygrid(compcode, pkgcode, rate, focusrate, ratecode, adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, weekrate, decimalvalue, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode, dateformat, pubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, extrarate);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = binddescrip.modifygrid(compcode, pkgcode, rate, focusrate, ratecode, adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, weekrate, decimalvalue, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode, dateformat, pubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, extrarate);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, rate, focusrate, pkgcode, ratecode, adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, weekrate, decimalvalue, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode, pubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, extrarate };
            string procedureName = "ratemodifygrid_ratemodifygrid_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster binddescrip = new NewAdbooking.classmysql.RateMaster();
            //ds = binddescrip.modifygrid(Session["compcode"].ToString(), drppkgcode.SelectedValue, txtrate.Text, txtfocusrate.Text, txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, txtweekrate.Text, Session["decimal"].ToString(), drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text);
        }
        if (ds.Tables[0].Rows.Count > 1)
        {
            //hiddenchkcount.Value = "1";
            for (int x = 0; x <= ds.Tables[0].Rows.Count - 1; x++)
            {
                DataSet dpck = new DataSet();
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
                {
                    FourCPlus.AdBooking.BookingMaster.Sql.RateMaster chkpac = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
                    dpck = chkpac.checkpackage(ds.Tables[0].Rows[x].ItemArray[18].ToString(), compcode, "1", ratecode, adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode, dateformat, pubcenter);
                }
                else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster chkpac = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                    dpck = chkpac.checkpackage(ds.Tables[0].Rows[x].ItemArray[18].ToString(), compcode, "1", ratecode, adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode, dateformat, pubcenter);
                }
                else
                {
                    string[] parameterValueArray = new string[] { compcode, ds.Tables[0].Rows[x].ItemArray[18].ToString(), "1", ratecode, adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode,  pubcenter };
                    string procedureName = "chkpackagecode_chkpackagecode_p";
                    NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                    dpck = sms.DynamicBindProcedure(procedureName, parameterValueArray);
                    //NewAdbooking.classmysql.RateMaster chkpac = new NewAdbooking.classmysql.RateMaster();
                    //dpck = chkpac.checkpackage(ds.Tables[0].Rows[x].ItemArray[0].ToString(), Session["compcode"].ToString(), "1", txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate1, validtill1, drpuom.SelectedValue, drpadscat4.SelectedValue, drpadscat5.SelectedValue, drpadscat6.SelectedValue, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat.SelectedValue, txtminarea.Text);
                }
                if (dpck.Tables[0].Rows.Count <= 0)
                {
                    returnvalue = ds.Tables[0].Rows[x].ItemArray[27].ToString();
                    return returnvalue;
                }

            }

        }

        return returnvalue;

    }

    [Ajax.AjaxMethod]
    public void saverate(string compcode, string userid, string ratecode, string adtype, string rategroupcode, string adcategory, string currency, string adsubcategory, string package, string packagedesc, string uom, string sizefrom, string sizeto, string consumption, string color, string colorchrty, string weekdrate, string weeminrate, string extweerate, string focusdarate, string focminrate, string focexrate, string validfromdate, string validtill, string remarks, string premium, string premiumval, string rateuniqueid, string weekendrate, string weekendmin, string weekextra, string minadarea, string editionfrom, string editionto, string flramount, string flrdiscount, string scheme, string adscat4, string adscat5, string adscat6, string frominsert, string toinsert, string agtype, string clientcat, string max_area, string type_, string agencycode, string dateformat, string pubcenter, string rate_sun, string rate_mon, string rate_tue, string rate_wed, string rate_thu, string rate_fri, string rate_sat, string rate_sun_extra, string rate_mon_extra, string rate_tue_extra, string rate_wed_extra, string rate_thu_extra, string rate_fri_extra, string rate_sat_extra, string width_max, string priority, string vat, string Adon, string refrence, string cancellation,string positionprem,string minwidth,string maxwidth)
    {
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            /*new change ankur 17 feb*/
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster insert = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            // dii = insert.insertintorate(Session["compcode"].ToString(), Session["userid"].ToString(), ratecode, adtype, rategroupcode, adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premium, premiumval, rateuniqueid, weekendrate, weekendmin, weekextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat, max_area);
            insert.insertintorate(compcode, userid, ratecode.ToUpper(), adtype, rategroupcode.ToUpper(), adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premium, premiumval, rateuniqueid, weekendrate, weekendmin, weekextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat, max_area, type_, agencycode, dateformat, pubcenter, rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, width_max, priority, vat, Adon, refrence, cancellation, positionprem,minwidth,maxwidth);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster insert = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            //dii = insert.insertintorate(Session["compcode"].ToString(), Session["userid"].ToString(), ratecode, adtype, rategroupcode, adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premium, premiumval, rateuniqueid, weekendrate, weekendmin, weekextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat, max_area);
            insert.insertintorate(compcode, userid, ratecode, adtype, rategroupcode, adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premium, premiumval, rateuniqueid, weekendrate, weekendmin, weekextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat, max_area, type_, agencycode, dateformat, pubcenter, rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, width_max, priority, vat, Adon, refrence, cancellation, positionprem,minwidth,maxwidth);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, userid, ratecode, adtype, rategroupcode, adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premiumval, premium, rateuniqueid, weekendrate, weekendmin, weekextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat, max_area, type_, agencycode,  pubcenter, rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, width_max, priority, vat, Adon, refrence, cancellation, positionprem, minwidth, maxwidth };
            string procedureName = "insertratemast_insertratemast_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            sms.DynamicBindProcedure(procedureName, parameterValueArray);
         //   NewAdbooking.classmysql.RateMaster insert = new NewAdbooking.classmysql.RateMaster();
        //    insert.insertintorate(Session["compcode"].ToString(), Session["userid"].ToString(), ratecode, adtype, rategroupcode, adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premium, premiumval, rateuniqueid, weekendrate, weekendmin, weekextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat);
        }
    }

    [Ajax.AjaxMethod]
    public void saveratedetails(string rateid, string compcode, string pkgcode, string wrate, string o_focusrate, string ratecode, string adtype, string adcategory, string subcategory, string color, string currency, string validfromdate1, string validtill1, string weekrate, string decimalvalue, string uom, string adscat4, string adscat5, string adscat6, string premium, string sizefrom, string sizeto, string frominsert, string toinsert, string clientcat, string minarea, string type_, string agencycode, string dateformat, string pubcenter, string ratesun, string ratemon, string ratetue, string ratewed, string ratethu, string ratefri, string ratesat, string ratesunextra, string ratemonextra, string ratetueextra, string ratewedextra, string ratethuextra, string ratefriextra, string ratesatextra, string o_extrarate, string userid)
    {
        DataSet dsrate = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            dsrate = binddescrip.modifygrid(compcode, pkgcode, wrate, o_focusrate, ratecode.ToUpper(), adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, weekrate, decimalvalue, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode, dateformat, pubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, o_extrarate);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            dsrate = binddescrip.modifygrid(compcode, pkgcode, wrate, o_focusrate, ratecode.ToUpper(), adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, weekrate, decimalvalue, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode, dateformat, pubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, o_extrarate);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, wrate, o_focusrate, pkgcode, ratecode.ToUpper(), adtype, adcategory, subcategory, color, currency, validfromdate1, validtill1, weekrate, decimalvalue, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, clientcat, minarea, type_, agencycode, pubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, o_extrarate };
            string procedureName = "ratemodifygrid_ratemodifygrid_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            dsrate = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster binddescrip = new NewAdbooking.classmysql.RateMaster();
            //dsrate = binddescrip.modifygrid(Session["compcode"].ToString(), drppkgcode.SelectedValue, txtrate.Text, txtfocusrate.Text, txtratecode.Text, drpadtype.SelectedValue, drpadcategory.SelectedValue, drpsubcategory.SelectedValue, drpcolor.SelectedValue, drpcurrency.SelectedValue, validfromdate, validtill, txtweekrate.Text, Session["decimal"].ToString(), drpuom.SelectedValue, adscat4, adscat5, adscat6, drppremium.SelectedValue, txtsizefrom.Text, txtsizeto.Text, frominsert, toinsert, clientcat, minarea);
        }
        if (dsrate.Tables[0].Rows.Count > 1)
        {


            for (int f = 0; f <= dsrate.Tables[0].Rows.Count - 1; f++)
            {
                string rate = dsrate.Tables[0].Rows[f].ItemArray[1].ToString();
                string extrarate = dsrate.Tables[0].Rows[f].ItemArray[3].ToString();
                string focusrate = dsrate.Tables[0].Rows[f].ItemArray[4].ToString();
                if (focusrate == "0")
                {
                    focusrate = "";
                }
                //string edition = dsrate.Tables[0].Rows[f]["PKGNAME"].ToString().Trim();
                string edition = dsrate.Tables[0].Rows[f]["Edition_Name"].ToString().Trim();
                //edition = edition.Replace("or","");
                string ratecodedetail = ratecode;
                string solusweekrate = dsrate.Tables[0].Rows[f].ItemArray[7].ToString();
                string solusfocusrate = dsrate.Tables[0].Rows[f].ItemArray[8].ToString();
                string weekenrate = dsrate.Tables[0].Rows[f].ItemArray[9].ToString();
                if (weekenrate == "0")
                {
                    weekenrate = "";
                }
                string soloweekenrate = dsrate.Tables[0].Rows[f].ItemArray[10].ToString();
                string details_rate_sun = dsrate.Tables[0].Rows[f].ItemArray[11].ToString();
                string details_rate_mon = dsrate.Tables[0].Rows[f].ItemArray[12].ToString();
                string details_rate_tue = dsrate.Tables[0].Rows[f].ItemArray[13].ToString();
                string details_rate_wed = dsrate.Tables[0].Rows[f].ItemArray[14].ToString();
                string details_rate_thu = dsrate.Tables[0].Rows[f].ItemArray[15].ToString();
                string details_rate_fri = dsrate.Tables[0].Rows[f].ItemArray[16].ToString();
                string details_rate_sat = dsrate.Tables[0].Rows[f].ItemArray[17].ToString();
                DataSet dinsert = new DataSet();
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
                {
                    FourCPlus.AdBooking.BookingMaster.Sql.RateMaster insertrate = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
                    dinsert = insertrate.ratedetailsinsert(rate, focusrate, ratecodedetail, compcode, userid, edition, rateid, solusweekrate, solusfocusrate, weekenrate, soloweekenrate, type_, extrarate, focusrate, weekenrate, details_rate_sun, details_rate_mon, details_rate_tue, details_rate_wed, details_rate_thu, details_rate_fri, details_rate_sat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, adtype, pubcenter);
                }
                else
                    if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                    {
                        FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster insertrate = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
                        dinsert = insertrate.ratedetailsinsert(rate, focusrate, ratecodedetail, compcode, userid, edition, rateid, solusweekrate, solusfocusrate, weekenrate, soloweekenrate, type_, extrarate, focusrate, weekenrate, details_rate_sun, details_rate_mon, details_rate_tue, details_rate_wed, details_rate_thu, details_rate_fri, details_rate_sat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, adtype, pubcenter);
                    }
                    else
                    {
                        string[] parameterValueArray = new string[] { compcode, ratecodedetail, userid, rate, focusrate, edition, rateid, solusweekrate, solusfocusrate, weekenrate, soloweekenrate, type_, extrarate, focusrate, weekenrate, adtype, details_rate_sun, details_rate_mon, details_rate_tue, details_rate_wed, details_rate_thu, details_rate_fri, details_rate_sat, ratesunextra, ratemonextra, ratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, pubcenter};
                        string procedureName = "insertratedetail_insertratedetail_p";
                        NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                        dinsert = sms.DynamicBindProcedure(procedureName, parameterValueArray);
                        //NewAdbooking.classmysql.RateMaster insertrate = new NewAdbooking.classmysql.RateMaster();
                        //dinsert = insertrate.ratedetailsinsert(rate, focusrate, ratecodedetail, Session["compcode"].ToString(), Session["userid"].ToString(), edition, rateid, solusweekrate, solusfocusrate, weekenrate, soloweekenrate);
                    }
            }
        }
        //saveormodify = "01";
    }

    [Ajax.AjaxMethod]
    public void modifyrate(string compcode, string userid, string ratecode, string adtype, string rategroupcode, string adcategory, string currency, string adsubcategory, string package, string packagedesc, string uom, string sizefrom, string sizeto, string consumption, string color, string colorchrty, string weekdrate, string weeminrate, string extweerate, string focusdarate, string focminrate, string focexrate, string validfromdate, string validtill, string remarks, string premium, string premiumval, string rateuniqueid, string weekendrate, string weekendmin, string weekendextra, string minadarea, string editionfrom, string editionto, string flramount, string flrdiscount, string scheme, string adscat4, string adscat5, string adscat6, string frominsert, string toinsert, string agtype, string clientcat, string max_area, string type, string agencycode, string dateformat, string rate_sun, string rate_mon, string rate_tue, string rate_wed, string rate_thu, string rate_fri, string rate_sat, string rate_sun_extra, string rate_mon_extra, string rate_tue_extra, string rate_wed_extra, string rate_thu_extra, string rate_fri_extra, string rate_sat_extra, string width_max, string priority, string vat, string Adon, string refrence, string cancellation, string positionprem,string minwidh ,string maxwidth)
    {
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster modify = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            modify.modifyrate(compcode, userid, ratecode.ToUpper(), adtype, rategroupcode.ToUpper(), adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premium, premiumval, rateuniqueid, weekendrate, weekendmin, weekendextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat, max_area, type_, agencycode, dateformat, rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, width_max, priority, vat, Adon, refrence, cancellation, positionprem,minwidh,maxwidth);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster modify = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            modify.modifyrate(compcode, userid, ratecode.ToUpper(), adtype, rategroupcode.ToUpper(), adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premium, premiumval, rateuniqueid, weekendrate, weekendmin, weekendextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat, max_area, type_, agencycode, dateformat, rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, width_max, priority, vat, Adon, refrence, cancellation, positionprem, minwidh, maxwidth);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, userid, ratecode.ToUpper(), adtype, rategroupcode.ToUpper(), adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premiumval, premium, rateuniqueid, weekendrate, weekendmin, weekendextra, editionfrom, editionto, flramount, flrdiscount, scheme, minadarea, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat, max_area, type_, agencycode,  rate_sun, rate_mon, rate_tue, rate_wed, rate_thu, rate_fri, rate_sat, rate_sun_extra, rate_mon_extra, rate_tue_extra, rate_wed_extra, rate_thu_extra, rate_fri_extra, rate_sat_extra, width_max, priority, vat, Adon, refrence, cancellation, positionprem, minwidh, maxwidth };
            string procedureName = "modifyratecode_modifyratecode_p_TETETET";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster modify = new NewAdbooking.classmysql.RateMaster();
            //modify.modifyrate(compcode, userid, ratecode, adtype, rategroupcode, adcategory, currency, adsubcategory, package, packagedesc, uom, sizefrom, sizeto, consumption, color, colorchrty, weekdrate, weeminrate, extweerate, focusdarate, focminrate, focexrate, validfromdate, validtill, remarks, premium, premiumval, rateuniqueid, weekendrate, weekendmin, weekendextra, minadarea, editionfrom, editionto, flramount, flrdiscount, scheme, adscat4, adscat5, adscat6, frominsert, toinsert, agtype, clientcat);
        }
    }

    [Ajax.AjaxMethod]
    public DataSet showratedetails_modi(string compcode, string pkgcode, string rate, string focusrate, string ratecode, string drpadtype, string drpadcategory, string drpsubcategory, string drpcolor, string drpcurrency, string validfromdate1, string validtill1, string weekrate, string decimalvalue, string drpuom, string drpadscat4, string drpadscat5, string drpadscat6, string drppremium, string sizefrom, string sizeto, string frominsert, string toinsert, string drpclientcat, string minarea, string type_, string drpagencycode, string dateformat, string drppubcenter, string ratesun, string ratemon, string ratetue, string ratewed, string ratethu, string ratefri, string ratesat, string ratesunextra, string ratemonextra, string tratetueextra, string ratewedextra, string ratethuextra, string ratefriextra, string ratesatextra, string extrarate)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = binddescrip.modifygrid(compcode, pkgcode, rate.ToUpper(), focusrate, ratecode, drpadtype, drpadcategory, drpsubcategory, drpcolor, drpcurrency, validfromdate1, validtill1, weekrate, decimalvalue, drpuom, drpadscat4, drpadscat5, drpadscat6, drppremium, sizefrom, sizeto, frominsert, toinsert, drpclientcat, minarea, type_, drpagencycode, dateformat, drppubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, tratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, extrarate);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = binddescrip.modifygrid(compcode, pkgcode, rate.ToUpper(), focusrate, ratecode, drpadtype, drpadcategory, drpsubcategory, drpcolor, drpcurrency, validfromdate1, validtill1, weekrate, decimalvalue, drpuom, drpadscat4, drpadscat5, drpadscat6, drppremium, sizefrom, sizeto, frominsert, toinsert, drpclientcat, minarea, type_, drpagencycode, dateformat, drppubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, tratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, extrarate);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, rate.ToUpper(), focusrate, pkgcode, ratecode, drpadtype, drpadcategory, drpsubcategory, drpcolor, drpcurrency, validfromdate1, validtill1, weekrate, decimalvalue, drpuom, drpadscat4, drpadscat5, drpadscat6, drppremium, sizefrom, sizeto, frominsert, toinsert, drpclientcat, minarea, type_, drpagencycode, drppubcenter, ratesun, ratemon, ratetue, ratewed, ratethu, ratefri, ratesat, ratesunextra, ratemonextra, tratetueextra, ratewedextra, ratethuextra, ratefriextra, ratesatextra, extrarate };
            string procedureName = "ratemodifygrid_ratemodifygrid_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster binddescrip = new NewAdbooking.classmysql.RateMaster();
            //ds = binddescrip.modifygrid(Session["compcode"].ToString(), pkgcode, txtrate.Text, txtfocusrate.Text, txtratecode.Text, drpadtype, drpadcategory, drpsubcategory, drpcolor, drpcurrency, validfromdate1, validtill1, txtweekrate.Text, Session["decimal"].ToString(), drpuom, drpadscat4, drpadscat5, drpadscat6, drppremium, txtsizefrom.Text, txtsizeto.Text, txtfrominsert.Text, txttoinsert.Text, drpclientcat, txtminarea.Text);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet showratedetails(string compcode, string rateuniqueid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            //ds = binddescrip.description(pkgcode, compcode, ratecode, adtype, adcategory, subcategory, color, currency, validfrom, validto, uom, adscat4, adscat5, adscat6, premium, sizefrom, sizeto, frominsert, toinsert, decimalvalue, clientcat, minarea, type_, agencycode);
            ds = binddescrip.description(compcode, rateuniqueid);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster binddescrip = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = binddescrip.description_go(compcode, rateuniqueid);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, rateuniqueid };
            string procedureName = "binddescription_binddescription_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void saveaddons(string compcode, string userid, string type_, string rateuniqueid)
    {
        if (Session["rateinsert"] != null)
        {

            DataSet db = (DataSet)Session["rateinsert"];
            int er = db.Tables[0].Rows.Count;
            int gf = db.Tables.Count;
            for (int b = 0; b <= gf - 1; b++)
            {
                string publication = db.Tables[b].Rows[0].ItemArray[0].ToString();
                string edition = db.Tables[b].Rows[0].ItemArray[1].ToString();
                string supp = db.Tables[b].Rows[0].ItemArray[2].ToString();
                string rate = db.Tables[b].Rows[0].ItemArray[3].ToString();
                string pkgcode = db.Tables[b].Rows[0].ItemArray[4].ToString();
                string pkgdesc = db.Tables[b].Rows[0].ItemArray[5].ToString();
                string pkgname = db.Tables[b].Rows[0].ItemArray[6].ToString();
                string ratecodepop = db.Tables[b].Rows[0].ItemArray[7].ToString();
                string extrarate = db.Tables[b].Rows[0].ItemArray[8].ToString();
                string noofinsert = db.Tables[b].Rows[0].ItemArray[9].ToString();
                DataSet dsave = new DataSet();
                if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
                {
                    NewAdbooking.Classes.adons data = new NewAdbooking.Classes.adons();
                    //dsave = data.insertadon(publication, edition, supp, rate, Session["compcode"].ToString(), Session["userid"].ToString(), pkgcode, pkgdesc, pkgname, ratecodepop, rateuniqueid);
                    dsave = data.insertadon(publication, edition, supp, rate.ToUpper(), compcode, userid, pkgcode, pkgdesc, pkgname, ratecodepop, rateuniqueid, type_, extrarate, noofinsert);
                }
                else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
                {
                    NewAdbooking.classesoracle.adons data = new NewAdbooking.classesoracle.adons();
                    //dsave = data.insertadon(publication, edition, supp, rate, Session["compcode"].ToString(), Session["userid"].ToString(), pkgcode, pkgdesc, pkgname, ratecodepop, rateuniqueid);
                    dsave = data.insertadon(publication, edition, supp, rate.ToUpper(), compcode, userid, pkgcode, pkgdesc, pkgname, ratecodepop, rateuniqueid, type_, extrarate, noofinsert);
                }
                else
                {
                    string[] parameterValueArray = new string[] { publication, edition, supp, rate.ToUpper(), compcode, userid, pkgcode, pkgdesc, pkgname, ratecodepop, rateuniqueid, type_, extrarate, noofinsert };
                    string procedureName = "adoninsert_adoninsert_p";
                    NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                    dsave = sms.DynamicBindProcedure(procedureName, parameterValueArray);
                    //NewAdbooking.classmysql.adons data = new NewAdbooking.classmysql.adons();
                    //dsave = data.insertadon(publication, edition, supp, rate, Session["compcode"].ToString(), Session["userid"].ToString(), pkgcode, pkgdesc, pkgname, ratecodepop, rateuniqueid);
                }
            }
        }
        Session["rateinsert"] = null;
    }
    [Ajax.AjaxMethod]
    public string insert_priority_rate(string rateuniqueid, string data)
    {
        string error = "";
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster delete = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
             delete.insert_priority_rate(rateuniqueid, data,"INSERT");           
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster delete = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            error = delete.insert_priority_rate(rateuniqueid, data, "INSERT");
        }
        else
        {
            string[] parameterValueArray = new string[] { rateuniqueid, data, "INSERT" };
            string procedureName = "insert_priorityrate_details";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
             sms.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return error;
    }
    [Ajax.AjaxMethod]
    public DataSet fetch_priority_rate(string rateuniqueid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster delete = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds=delete.fetch_priority_rate(rateuniqueid);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster delete = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = delete.fetch_priority_rate(rateuniqueid);
        }
        else
        {
            string[] parameterValueArray = new string[] { rateuniqueid };
            string procedureName = "fetchPriorityRate";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public void deleterate_a(string rateuniqueid, string compcode, string type_)
    {
        DataSet del = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster delete = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            del = delete.deleterate(rateuniqueid, compcode, type_);
            //del = delete.deleterate(rateuniqueid, Session["compcode"].ToString());
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster delete = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            del = delete.deleterate(rateuniqueid, compcode, type_);
            //del = delete.deleterate(rateuniqueid, Session["compcode"].ToString());
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, rateuniqueid, type_ };
            string procedureName = "deleterate_deleterate_p";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            del = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.RateMaster delete = new NewAdbooking.classmysql.RateMaster();
            //del = delete.deleterate(rateuniqueid, Session["compcode"].ToString());
        }
    }




    [Ajax.AjaxMethod]
    public DataSet getpass(string compcode, string usename)
    {
        DataSet del = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster getpas = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            del = getpas.fetchPassword(compcode, usename);
            //del = delete.deleterate(rateuniqueid, Session["compcode"].ToString());
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster getpas = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            del = getpas.fetchPassword(compcode, usename);
            //del = delete.deleterate(rateuniqueid, Session["compcode"].ToString());
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, usename };
            string procedureName = "fetchPassword";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            del = sms.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return del;
    }


    public DataSet bindpagePosition(string compcode, string bookdate, string dateformat)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster clsbooking = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = clsbooking.bindPagePosition(compcode, bookdate, dateformat);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster clsbooking = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = clsbooking.bindPagePosition(compcode, bookdate, dateformat);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, bookdate, dateformat };
            string procedureName = "WEBSP_GETPAGEPOSITION_DATEWISE";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            //NewAdbooking.classmysql.BookingMaster clsbooking = new NewAdbooking.classmysql.BookingMaster();
            //ds = clsbooking.bindPagePosition(compcode);
        }

        int i;
        ListItem li1;
        li1 = new ListItem();
        drppageposition.Items.Clear();
        li1.Text = "Select Page Position";
        li1.Value = "0";
        li1.Selected = true;
        drppageposition.Items.Add(li1);
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            drppageposition.Items.Add(li);
        }
        return ds;
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet bindbookingid(string compcode, string ratecode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            FourCPlus.AdBooking.BookingMaster.Sql.RateMaster bindagenname = new FourCPlus.AdBooking.BookingMaster.Sql.RateMaster();
            ds = bindagenname.bindratecode(compcode, ratecode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster bindagenname = new FourCPlus.AdBooking.BookingMaster.Oracle.RateMaster();
            ds = bindagenname.bindratecode(compcode, ratecode); 
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, ratecode };
            string procedureName = "binndratecode";
            //NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            //ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);

            NewAdbooking.classmysql.RateMaster bindagenname = new NewAdbooking.classmysql.RateMaster();
            ds = bindagenname.bindratecode(compcode, ratecode);
        }
        return ds;
    }



    //public void binddest()
    //{
    //    DataSet destination = new DataSet();
    //    destination.ReadXml(Server.MapPath("XML/ratemaster.xml"));
    //    txtratecode.Items.Clear();
    //    int i;
    //    ListItem li1;
    //    li1 = new ListItem();
    //    DataSet ds1 = new DataSet();
    //    ds1.ReadXml(Server.MapPath("XML/frontend.xml"));
    //    li1.Text = ds1.Tables[0].Rows[0].ItemArray[0].ToString();
    //    li1.Text = "--Select Rate Code--";
    //    li1.Value = "0";
    //    li1.Selected = true;
    //    txtratecode.Items.Add(li1);

    //    for (i = 0; i < destination.Tables[1].Columns.Count; i++)
    //    {
    //        ListItem li;
    //        li = new ListItem();
    //        li.Text = destination.Tables[1].Rows[0].ItemArray[i].ToString();
    //        //   i = i + 1;
    //        li.Value = destination.Tables[1].Rows[0].ItemArray[i].ToString();
    //        txtratecode.Items.Add(li);

    //    }


    //}

    [Ajax.AjaxMethod]
    public DataSet fillF2btb(string compcode, string btbdes, string extra1)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.tv_ratemaster btbt = new NewAdbooking.classesoracle.tv_ratemaster();
            ds = btbt.btbbind(compcode, btbdes, extra1);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.tv_ratemaster btbt = new NewAdbooking.Classes.tv_ratemaster();
                ds = btbt.btbbind(compcode, btbdes, extra1);
            }
            else
            {
                string[] parameterValueArray = new string[] { compcode, btbdes, extra1 };
                string procedureName = "tv_bindbtbcode";
                NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
                ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
            }
        return ds;
    }


    [Ajax.AjaxMethod]
    public DataSet get_btbname(string compcode, string btbcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.tv_ratemaster pubname = new NewAdbooking.classesoracle.tv_ratemaster();
            ds = pubname.get_btb_name(compcode, btbcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.tv_ratemaster pubname = new NewAdbooking.Classes.tv_ratemaster();
            ds = pubname.get_btb_name(compcode, btbcode);
        }
        else
        {
            string procedureName = "tv_get_btb_name";
            string[] parameterValueArray = { compcode, btbcode };
            NewAdbooking.classmysql.Master obj = new NewAdbooking.classmysql.Master();
            ds = obj.BindCommanFunction(procedureName, parameterValueArray);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet fillprogram(string compcode, string extra1, string extra2, string extra3, string extra4, string extra5)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.tv_ratemaster pubname = new NewAdbooking.classesoracle.tv_ratemaster();
            ds = pubname.get_prog_name(compcode, extra1, extra2, extra3, extra4, extra5);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.tv_ratemaster pubname = new NewAdbooking.Classes.tv_ratemaster();
            ds = pubname.get_prog_name(compcode, extra1, extra2, extra3, extra4, extra5);
        }
        else
        {
            string[] parameterValueArray = new string[] { compcode, extra1, extra2, extra3, extra4, extra5 };
            string procedureName = "TV_PROGRAMME_BIND";
            NewAdbooking.classmysql.CommonClass sms = new NewAdbooking.classmysql.CommonClass();
            ds = sms.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet get_progname(string compcode, string btbcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.tv_ratemaster pubname = new NewAdbooking.classesoracle.tv_ratemaster();
            ds = pubname.get_progname(compcode, btbcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.tv_ratemaster pubname = new NewAdbooking.Classes.tv_ratemaster();
            ds = pubname.get_progname(compcode, btbcode);
        }
        else
        {
            string procedureName = "tv_get_prog_name";
            string[] parameterValueArray = { compcode, btbcode };
            NewAdbooking.classmysql.Master obj = new NewAdbooking.classmysql.Master();
            ds = obj.BindCommanFunction(procedureName, parameterValueArray);
        }
        return ds;
    }
    
}