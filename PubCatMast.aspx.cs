using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class PubCatMast : System.Web.UI.Page
{
    string message;



    protected void Page_Load(object sender, System.EventArgs e)
    {
        // Put user code to initialize the page here
        //txtstatusdate.Text = System.DateTime.Now.Date.ToShortDateString();

        Response.Expires = -1;
        Response.Buffer = true;
        Response.ExpiresAbsolute = DateTime.Now.AddDays(-1d);
        Response.Expires = -1500;
        Response.CacheControl = "no-cache";

        if (Session["compcode"] != null)
        {
            hiddencompcode.Value = Session["compcode"].ToString();
            hiddenuserid.Value = Session["userid"].ToString();
            hiddenauto.Value = Session["autogenerated"].ToString();
            hiddendateformat.Value = Session["dateformat"].ToString();
            //hiddenDateFormat  .Value = Session["hiddendateformate"].ToString();
            hiddcompanyname.Value = Session["comp_name"].ToString();
            hdnunit.Value = Session["center"].ToString();
            ////Response.Redirect("login.aspx");
            //Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            //return;
        }

        else
        {
            //Response.Redirect("login.aspx");
            Response.Write("<script>alert('Your session has been Expired');window.close();</script>");
            return;
            //Response.Write("<script>window.parent.location=\"login.aspx\";</script>");
            //return;

        }

        ip1.Value = Request.ServerVariables["REMOTE_ADDR"];
        Ajax.Utility.RegisterTypeForAjax(typeof(PubCatMast));
        hiddenusername.Value = Session["Username"].ToString();


        //******************************************************************************
        //@@@@@@@@@@@@@@@@@@@***Code For Read The Data From Xml File***@@@@@@@@@@@@@@@@@
        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        DataSet ds = new DataSet();
        ds.ReadXml(Server.MapPath("XML/button.xml"));


        btnNew.ImageUrl = ds.Tables[0].Rows[0].ItemArray[0].ToString();
        btnSave.ImageUrl = ds.Tables[0].Rows[0].ItemArray[1].ToString();
        btnModify.ImageUrl = ds.Tables[0].Rows[0].ItemArray[2].ToString();
        btnQuery.ImageUrl = ds.Tables[0].Rows[0].ItemArray[3].ToString();
        btnExecute.ImageUrl = ds.Tables[0].Rows[0].ItemArray[4].ToString();
        btnCancel.ImageUrl = ds.Tables[0].Rows[0].ItemArray[5].ToString();
        btnfirst.ImageUrl = ds.Tables[0].Rows[0].ItemArray[6].ToString();
        btnprevious.ImageUrl = ds.Tables[0].Rows[0].ItemArray[7].ToString();
        btnnext.ImageUrl = ds.Tables[0].Rows[0].ItemArray[8].ToString();
        btnlast.ImageUrl = ds.Tables[0].Rows[0].ItemArray[9].ToString();
        btnDelete.ImageUrl = ds.Tables[0].Rows[0].ItemArray[10].ToString();
        btnExit.ImageUrl = ds.Tables[0].Rows[0].ItemArray[11].ToString();

        //This code reads the Label name from the xml file
        DataSet objDataSet = new DataSet();
        // Read in the XML file
        objDataSet.ReadXml(Server.MapPath("XML/PubCatMast.xml"));
        lbcenter.Text = objDataSet.Tables[0].Rows[0].ItemArray[0].ToString();
        lbcentername.Text = objDataSet.Tables[0].Rows[0].ItemArray[1].ToString();
        lbalias.Text = objDataSet.Tables[0].Rows[0].ItemArray[2].ToString();
        lbAddress1.Text = objDataSet.Tables[0].Rows[0].ItemArray[3].ToString();
        lbStreet.Text = objDataSet.Tables[0].Rows[0].ItemArray[4].ToString();
        lbCountry.Text = objDataSet.Tables[0].Rows[0].ItemArray[5].ToString();
        lbcity.Text = objDataSet.Tables[0].Rows[0].ItemArray[6].ToString();
        lbDistrict.Text = objDataSet.Tables[0].Rows[0].ItemArray[7].ToString();
        lbZone.Text = objDataSet.Tables[0].Rows[0].ItemArray[8].ToString();
        lbPhone.Text = objDataSet.Tables[0].Rows[0].ItemArray[9].ToString();
        lbStatus.Text = objDataSet.Tables[0].Rows[0].ItemArray[10].ToString();
        lbRemarks.Text = objDataSet.Tables[0].Rows[0].ItemArray[11].ToString();
        lbState.Text = objDataSet.Tables[0].Rows[0].ItemArray[12].ToString();
        lbPinCode.Text = objDataSet.Tables[0].Rows[0].ItemArray[13].ToString();
        lbRegion.Text = objDataSet.Tables[0].Rows[0].ItemArray[14].ToString();
        lbfax.Text = objDataSet.Tables[0].Rows[0].ItemArray[15].ToString();
        lbEmailId.Text = objDataSet.Tables[0].Rows[0].ItemArray[16].ToString();
        lbStatusDate.Text = objDataSet.Tables[0].Rows[0].ItemArray[17].ToString();
        lbClientContactDetail.Text = objDataSet.Tables[0].Rows[0].ItemArray[18].ToString();
        lbStatusDetail.Text = objDataSet.Tables[0].Rows[0].ItemArray[19].ToString();
        lbBoxadd.Text = objDataSet.Tables[0].Rows[0].ItemArray[20].ToString();
        lblimgpath.Text = objDataSet.Tables[0].Rows[0].ItemArray[21].ToString();
        lblcir_imgpath.Text = objDataSet.Tables[0].Rows[0].ItemArray[22].ToString();
        lbcomp_name.Text = objDataSet.Tables[0].Rows[0].ItemArray[23].ToString();
        lbllogofile.Text = objDataSet.Tables[0].Rows[0].ItemArray[24].ToString();
        lblstartegroupimg.Text = objDataSet.Tables[0].Rows[0].ItemArray[25].ToString();
        lblmrv.Text = objDataSet.Tables[0].Rows[0].ItemArray[26].ToString();
        lblpoupd.Text = objDataSet.Tables[0].Rows[0].ItemArray[27].ToString();
        //  lblmessage.Text = objDataSet.Tables[0].Rows[0].ItemArray[27].ToString();
        lbClientContactDetail.Enabled = false;
        lbStatusDetail.Enabled = false;
        dpstatebooking.Enabled = false;
        DataSet comm_nam = new DataSet();
        // Read in the XML file
        comm_nam.ReadXml(Server.MapPath("XML/Comm_detail.xml"));
        lblintegration.Text = comm_nam.Tables[0].Rows[0].ItemArray[12].ToString();

        pagedef();
        binddest1();

        if (!Page.IsPostBack)
        {

            btnNew.Attributes.Add("OnClick", "javascript:return pcmnew();");
            btnSave.Attributes.Add("onClick", "javascript:return pcmchk();");
            btnModify.Attributes.Add("onClick", "javascript:return pcmmodify();");
            btnQuery.Attributes.Add("onClick", "javascript:return pcmquery();");
            btnExecute.Attributes.Add("onClick", "javascript:return pcmexecute('');");
            btnCancel.Attributes.Add("onClick", "javascript:return pcmcancel('PubCatMast');");
            btnDelete.Attributes.Add("onClick", "javascript:return pcmdelete();");
            btnfirst.Attributes.Add("onClick", "javascript:return pcmfirst();");
            btnprevious.Attributes.Add("onClick", "javascript:return pcmprevious();");
            btnnext.Attributes.Add("onClick", "javascript:return pcmnext();");
            btnlast.Attributes.Add("onClick", "javascript:return pcmlast();");
            btnExit.Attributes.Add("onClick", "javascript:return pcmexit();");

            txtcentercode.Attributes.Add("onBlur", "javascript:return UpperCase('txtcentercode');");
            txtBoxadd.Attributes.Add("onBlur", "javascript:return UpperCase('txtBoxadd');");
            txtalias.Attributes.Add("onBlur", "javascript:return UpperCase('txtalias');");
            txtcentercode.Attributes.Add("onChange", "javascript:return usercodechk();");
            txtadd1.Attributes.Add("onBlur", "javascript:return UpperCase('txtadd1');");
            txtstreet.Attributes.Add("onBlur", "javascript:return UpperCase('txtstreet');");
            txtstatusreason.Attributes.Add("onBlur", "javascript:return UpperCase('txtstatusreason');");
            lbStatusDetail.Attributes.Add("OnClick", "javascript:return statusdetails();");
            lbClientContactDetail.Attributes.Add("OnClick", "javascript:return contactdetails();");
            txtemailid.Attributes.Add("OnBlur", "javascript:return ClientEmailCheck1('txtemailid');");
            txtemailid.Attributes.Add("OnKeypress", "javascript:return checkSpace(event);");

            po_update.Attributes.Add("onkeydown", "javascript:return fillpocrltn(event)");
            po_update.Attributes.Add("onkeypress", "javascript:return fillpocrltn(event)");
            lstprint.Attributes.Add("onkeydown", "javascript:return onclickpoupd(event)");
            lstprint.Attributes.Add("onclick", "javascript:return onclickpoupd(event)");
            
            
            //

            txtcut_time.Attributes.Add("OnBlur", "javascript:return maxfield('event');");



            countryname();
            txtcountry.Attributes.Add("OnChange", "javascript:return addcount();");
            drpcity.Attributes.Add("OnChange", "javascript:addregcity();");


            txtcentername.Attributes.Add("OnChange", "javascript:return autoornot();");
            // txtcentercode.Attributes.Add("OnBlur", "javascript:return checkcode();");
            Session["pubsave"] = null;
            Session["pubstatus"] = null;
            if (btnNew.Enabled == false)
                btnNew.ImageUrl = ds.Tables[1].Rows[0].ItemArray[0].ToString();
            if (btnSave.Enabled == false)
                btnSave.ImageUrl = ds.Tables[1].Rows[0].ItemArray[1].ToString();
            if (btnModify.Enabled == false)
                btnModify.ImageUrl = ds.Tables[1].Rows[0].ItemArray[2].ToString();
            if (btnQuery.Enabled == false)
                btnQuery.ImageUrl = ds.Tables[1].Rows[0].ItemArray[3].ToString();
            if (btnExecute.Enabled == false)
                btnExecute.ImageUrl = ds.Tables[1].Rows[0].ItemArray[4].ToString();
            if (btnCancel.Enabled == false)
                btnCancel.ImageUrl = ds.Tables[1].Rows[0].ItemArray[5].ToString();
            if (btnfirst.Enabled == false)
                btnfirst.ImageUrl = ds.Tables[1].Rows[0].ItemArray[6].ToString();
            if (btnprevious.Enabled == false)
                btnprevious.ImageUrl = ds.Tables[1].Rows[0].ItemArray[7].ToString();
            if (btnnext.Enabled == false)
                btnnext.ImageUrl = ds.Tables[1].Rows[0].ItemArray[8].ToString();
            if (btnlast.Enabled == false)
                btnlast.ImageUrl = ds.Tables[1].Rows[0].ItemArray[9].ToString();
            if (btnDelete.Enabled == false)
                btnDelete.ImageUrl = ds.Tables[1].Rows[0].ItemArray[10].ToString();
            if (btnExit.Enabled == false)
                btnExit.ImageUrl = ds.Tables[1].Rows[0].ItemArray[11].ToString();
            btnNew.Focus();


        }



    }



    public void binddest1()
    {
        DataSet destination1 = new DataSet();
        destination1.ReadXml(Server.MapPath("XML/PubCatMast.xml"));
        dpstatebooking.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "--Select State Grouping--";
        li1.Value = "0";
        li1.Selected = true;
        dpstatebooking.Items.Add(li1);

        for (i = 0; i < destination1.Tables[1].Columns.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = destination1.Tables[1].Rows[0].ItemArray[i].ToString();
            // i = i + 1;
            li.Value = destination1.Tables[1].Rows[0].ItemArray[i].ToString();
            dpstatebooking.Items.Add(li);

        }


    }


    public void pagedef()
    {
        btnNew.Enabled = true;
        btnSave.Enabled = false;
        btnModify.Enabled = false;
        btnDelete.Enabled = false;
        btnQuery.Enabled = true;
        btnExecute.Enabled = false;
        btnCancel.Enabled = true;
        btnfirst.Enabled = false;
        btnprevious.Enabled = false;
        btnnext.Enabled = false;
        btnlast.Enabled = false;
        btnExit.Enabled = true;
        txtcentercode.Enabled = false;
        txtcentername.Enabled = false;
        txtalias.Enabled = false;
        txtadd1.Enabled = false;
        txtstreet.Enabled = false;
        drpcity.Enabled = false;
        txtdistrict.Enabled = false;
        txtphone1.Enabled = false;
        txtphone2.Enabled = false;
        txtstatus1.Enabled = false;
        txtpincode.Enabled = false;
        txtstate.Enabled = false;
        txtfax.Enabled = false;
        txtemailid.Enabled = false;
        txtstatusdate.Enabled = false;
        txtstatusreason.Enabled = false;
        txtcountry.Enabled = false;
        drpregion.Enabled = false;
        drpzone.Enabled = false;
        txtfax1.Enabled = false;
        drpprint.Enabled = false;
        txtimgpath.Enabled = false;
        txtcir_imgpath.Enabled = false;
        txtlogofile.Enabled = false;
        txtmrv.Enabled = false;
        po_update.Enabled = false;
        txtcomp_name.Enabled = false;
        txtmessage.Enabled = false;
        //txtcut_time.Enabled = false;

    }
    #region Web Form Designer generated code
    protected void OnInit(EventArgs e)
    {
        //
        // CODEGEN: This call is required by the ASP.NET Web Form Designer.
        //
        InitializeComponent();
        base.OnInit(e);
    }

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {

    }
    #endregion




    [Ajax.AjaxMethod]
    public DataSet addcity(string city)
    {
        DataSet ds1 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.PubCatMast PCMst = new NewAdbooking.Classes.PubCatMast();
            ds1 = PCMst.addpickdistname(city);
            return ds1;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast PCMst = new NewAdbooking.classesoracle.PubCatMast();
            ds1 = PCMst.addpickdistname(city);
            return ds1;
        }
        else
        {
            NewAdbooking.classmysql.PubCatMast PCMst = new NewAdbooking.classmysql.PubCatMast();
            ds1 = PCMst.addpickdistname(city);
            return ds1;

        }
    }
    public DataSet addcit()
    {
        drpcity.Items.Clear();
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.Master city = new NewAdbooking.Classes.Master();

            ds = city.addcity();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Master city = new NewAdbooking.classesoracle.Master();
            ds = city.addcity();
        }
        else
        {

            NewAdbooking.classmysql.Master city = new NewAdbooking.classmysql.Master();

            ds = city.addcity();
        }
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "------Select City------";
        li1.Value = "0";
        li1.Selected = true;
        drpcity.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[5].ToString();
                drpcity.Items.Add(li);
            }

        }

        return ds;
    }


    public void countryname()
    {

        txtcountry.Items.Clear();
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.PublisherMaster name = new NewAdbooking.Classes.PublisherMaster();

            ds = name.pagedes(hiddencompcode.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PublisherMaster name = new NewAdbooking.classesoracle.PublisherMaster();
            ds = name.pagedes(hiddencompcode.Value);
        }
        else
        {
            NewAdbooking.classmysql.PublisherMaster name = new NewAdbooking.classmysql.PublisherMaster();

            ds = name.pagedes(hiddencompcode.Value);

        }

        ListItem li1;
        li1 = new ListItem();
        li1.Text = "----Select Country----";
        li1.Value = "0";
        li1.Selected = true;
        txtcountry.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            txtcountry.Items.Add(li);
        }
    }

    [Ajax.AjaxMethod]
    public DataSet addcou(string txtcountry)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.Master firstAgency = new NewAdbooking.Classes.Master();

            ds = firstAgency.countcity(txtcountry);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Master firstAgency = new NewAdbooking.classesoracle.Master();
            ds = firstAgency.countcity(txtcountry);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.Master firstAgency = new NewAdbooking.classmysql.Master();

            ds = firstAgency.countcity(txtcountry);
            return ds;

        }
    }


    [Ajax.AjaxMethod]

    public DataSet addreg(string values)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.PubCatMast region = new NewAdbooking.Classes.PubCatMast();

            ds = region.addregion(values);

            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast region = new NewAdbooking.classesoracle.PubCatMast();
            ds = region.addregion(values);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.PubCatMast region = new NewAdbooking.classmysql.PubCatMast();
            ds = region.addregion(values);
            return ds;
        }
    }

    public void addzone()
    {
        drpzone.Items.Clear();
        DataSet ds = new DataSet();
        string city = drpcity.SelectedValue;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.PublisherMaster name = new NewAdbooking.Classes.PublisherMaster();

            ds = name.pubzone(city);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PublisherMaster name = new NewAdbooking.classesoracle.PublisherMaster();
            ds = name.pubzone(city);
        }
        else
        {
            NewAdbooking.classmysql.PublisherMaster name = new NewAdbooking.classmysql.PublisherMaster();

            ds = name.pubzone(city);

        }
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-----Select zone-----";
        li1.Value = "0";
        li1.Selected = true;
        drpzone.Items.Add(li1);
        if (ds.Tables[0].Rows.Count > 0)
        {
            drpzone.Enabled = true;
            int i;
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                drpzone.Items.Add(li);
            }
        }
        else
        {
            if (hiddensaurabh.Value == "1")
            {
                message = "There is no matching value for Zone";
                AspNetMessageBox(message);
                drpzone.Enabled = false;
                return;
            }
        }
        drpzone.Focus();
    }

    public void addregion()
    {
        drpregion.Items.Clear();
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {


            NewAdbooking.Classes.PublisherMaster region = new NewAdbooking.Classes.PublisherMaster();

            string city = drpcity.SelectedValue;
            ds = region.pubregion(city);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PublisherMaster region = new NewAdbooking.classesoracle.PublisherMaster();
            string city = drpcity.SelectedValue;
            ds = region.pubregion(city);
        }
        else
        {
            NewAdbooking.classmysql.PublisherMaster region = new NewAdbooking.classmysql.PublisherMaster();

            string city = drpcity.SelectedValue;
            ds = region.pubregion(city);

        }



        ListItem li1;
        li1 = new ListItem();
        li1.Text = "--Select Region--";
        li1.Value = "0";
        li1.Selected = true;
        drpregion.Items.Add(li1);
        if (ds.Tables[0].Rows.Count > 0)
        {
            drpregion.Enabled = true;
            int i;
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                drpregion.Items.Add(li);


            }
        }
        else
        {
            if (hiddensaurabh.Value == "1")
            {
                message = "There is no matching value for Region";
                AspNetMessageBox(message);
                drpregion.Enabled = false;
                return;
            }
        }
        drpregion.Focus();
    }
    [Ajax.AjaxMethod]
    public DataSet statuschkpcm(string compcode, string userid, string centercode)
    {
        DataSet ds = new DataSet();

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.PubCatMast chk = new NewAdbooking.Classes.PubCatMast();
            ds = chk.chkpcm(compcode, userid, centercode);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast chk = new NewAdbooking.classesoracle.PubCatMast();
            ds = chk.chkpcm(compcode, userid, centercode);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.PubCatMast chk = new NewAdbooking.classmysql.PubCatMast();
            ds = chk.chkpcm(compcode, userid, centercode);
            return ds;
        }
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void savepcm(string compcode, string centercode, string centername, string alias, string add1, string street, string city, string dist, string country, string phone1, string phone2, string pin, string state, string fax, string email, string remarks, string userid, string region, string zone, string fax1, string boxaddress, string printval, string imgpath, string cir_imgpath, string companyname, string logofilename, string statecode, string MRV, string mes, string agcode, string dpcode, string booking_cutof_time,string ip2,string integration)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {

            string[] parameterValueArray = new string[] { compcode, centercode, centername, alias, add1, street, city, dist, country, phone1, phone2, pin, state, fax, email, remarks, userid, region, zone, fax1, boxaddress, printval, imgpath,cir_imgpath,companyname, logofilename,  statecode,  MRV,  mes,  agcode,  dpcode,  booking_cutof_time,"", ip2, integration};
            if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
            {
                string procedureName = "pcminsert";
                NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                string procedureName = "pcminsert.pcminsert_p";
                NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else
            {
                string procedureName = "pcminsert_pcminsert_p";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            
            
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string compcode1 = "Inserted Publication " + compcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','Publication Center','','Publication Center Created ','" + compcode1;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip2 + "')";
        dconnect.executenonquery1(sqldd);

    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet updatepcm(string compcode, string centercode, string centername, string alias, string add1, string street, string city, string dist, string country, string phone1, string phone2, string pin, string state, string fax, string email, string remarks, string userid, string region, string zone, string fax1, string boxadd, string printval, string ip, string imgpath, string cir_imgpath, string companyname, string logofilename, string statecode, string MRV, string mes, string agcode, string dpcode, string booking_cutof_time, string integration)//string ip2,
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {
            string[] parameterValueArray = new string[] { compcode, centercode, centername, alias, add1, street, city, dist, country, phone1, phone2, pin, state, fax, email, remarks, userid, region, zone, fax1, boxadd, printval, ip, imgpath, cir_imgpath, companyname, logofilename, statecode, MRV, mes, agcode, dpcode, booking_cutof_time, integration };//ip2,
            if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "sql")
            {
                string procedureName = "pcmupdate";
                NewAdbooking.Classes.CommonClass obj = new NewAdbooking.Classes.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else if (ConfigurationManager.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                string procedureName = "pcmupdate.pcmupdate_p";
                NewAdbooking.classesoracle.CommonClass obj = new NewAdbooking.classesoracle.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            else
            {
                string procedureName = "pcmupdate_pcmupdate_p";
                NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
                ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
            }
            return ds;
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string compcode2 = "Modified Publication " + compcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','Publication Center','','Publication Center Modified ','" + compcode2;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
        return ds;
    }


    [Ajax.AjaxMethod]
    public DataSet exepcm(string compcode, string centcode, string centname, string alias, string country, string city, string companyname, string state, string MRV, string agcode,string dpcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.PubCatMast exe = new NewAdbooking.Classes.PubCatMast();

            ds = exe.pcmexe(compcode, centcode, centname, alias, country, city, companyname, state, MRV, agcode, dpcode);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast exe = new NewAdbooking.classesoracle.PubCatMast();
            ds = exe.pcmexe(compcode, centcode, centname, alias,city, country,  companyname, state, MRV, agcode, dpcode);
           
        }
        else
        {
            NewAdbooking.classmysql.PubCatMast exe = new NewAdbooking.classmysql.PubCatMast();

            ds = exe.pcmexe(compcode, centcode, centname, alias, country, city, companyname, state, MRV, agcode, dpcode);
           // return ds;
        }
        return ds;
    }


    [Ajax.AjaxMethod]
    public DataSet fnplclick(string compcode, string userid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.PubCatMast fnpl = new NewAdbooking.Classes.PubCatMast();
            ds = fnpl.pcmfnpl(compcode, userid);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast fnpl = new NewAdbooking.classesoracle.PubCatMast();
            ds = fnpl.pcmfnpl(compcode, userid);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.PubCatMast fnpl = new NewAdbooking.classmysql.PubCatMast();
            ds = fnpl.pcmfnpl(compcode, userid);
            return ds;

        }
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void delclick(string compcode, string centercode, string userid, string ip)
    {
        DataSet ds = new DataSet();
        string err = "";
        try
        {

            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {

                NewAdbooking.Classes.PubCatMast del = new NewAdbooking.Classes.PubCatMast();

                ds = del.pcmdel(compcode, centercode, userid);
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.PubCatMast del = new NewAdbooking.classesoracle.PubCatMast();
                ds = del.pcmdel(compcode, centercode, userid);
            }
            else
            {
                NewAdbooking.classmysql.PubCatMast del = new NewAdbooking.classmysql.PubCatMast();

                ds = del.pcmdel(compcode, centercode, userid);
            }
        }
        catch (Exception e)
        {
            err = e.Message;
        }
        string compcode3 = "Deleted Publication " + compcode;
        clsconnection dconnect = new clsconnection();
        string sqldd = "insert into log_new (DATE1,USERID,PROCESSNAME,ERR_DESCRIPTION,OBJECT_PROCESS_ID,DESCRIPTION,IP) values($date,'" + HttpContext.Current.Session["userid"] + "','Publication Center','','Publication Center Deleted ','" + compcode3;
        sqldd = sqldd + "',";
        sqldd = sqldd + "'" + ip + "')";
        dconnect.executenonquery1(sqldd);
        // return ds;

    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet chkpubcatmast1(string str)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.PubCatMast chk = new NewAdbooking.Classes.PubCatMast();

            ds = chk.pubcatcode(str, Session["compcode"].ToString());

            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast chk = new NewAdbooking.classesoracle.PubCatMast();
            ds = chk.pubcatcode(str, Session["compcode"].ToString());

            return ds;
        }
        else
        {
            NewAdbooking.classmysql.PubCatMast chk = new NewAdbooking.classmysql.PubCatMast();

            ds = chk.pubcatcode(str);

            return ds;


        }

    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet chkpubcatcode(string str)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.PubCatMast chk = new NewAdbooking.Classes.PubCatMast();
            ds = chk.pubcodechk(str, Session["compcode"].ToString());

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast chk = new NewAdbooking.classesoracle.PubCatMast();
            ds = chk.pubcodechk(str, Session["compcode"].ToString());

            return ds;
        }
        else
        {
            NewAdbooking.classmysql.PubCatMast chk = new NewAdbooking.classmysql.PubCatMast();
            ds = chk.pubcodechk(str, Session["compcode"].ToString());
        }
        return ds;

    }

    protected void hiddenusername_ServerChange(object sender, System.EventArgs e)
    {

    }
    protected void btnSave_Click(object sender, EventArgs e)
    {








    }
    protected void AspNetMessageBox(string strMessage)
    {
        string strAlert = "";
        strAlert = "alert('" + strMessage + "')";
        ScriptManager.RegisterClientScriptBlock(this, typeof(PubCatMast), "ShowAlert", strAlert, true);
    }

    protected void btnSave_Click1(object sender, EventArgs e)
    {
        string compcode = Session["compcode"].ToString();
        string userid = Session["userid"].ToString();
        string alias = txtcentalias.Text;
        string centercode = txtcentcode.Text;
        string centername = txtcentname.Text;
        string add1 = Address12.Text;
        string street = Street12.Text;
        string city = cityname.Text;
        string dist = district.Text;
        string country = txtcountryname.Text;
        string phone1 = txtph1.Text;
        string phone2 = txtph2.Text;
        string pin = txtpin.Text;
        string state = Statecode12.Text;
        string fax = txtfano1.Text;
        string email = email_id.Text;
        string remarks = txtremarks.Text;
        string region = txtregon.Text;
        string zone = txtzone.Text;
        string fax1 = txtfano2.Text;

}
    protected void lbClientContactDetail_Click(object sender, EventArgs e)
    {

    }

    [Ajax.AjaxMethod]
    public DataSet chkusercode(string compcode, string code)
    {
        DataSet ds = new DataSet();

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.PubCatMast chkcode = new NewAdbooking.Classes.PubCatMast();
            ds = chkcode.chkusercode(compcode, code);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast chkcode = new NewAdbooking.classesoracle.PubCatMast();
            ds = chkcode.chkusercode(compcode, code);
        }
        else
        {
            NewAdbooking.classmysql.PubCatMast chkcode = new NewAdbooking.classmysql.PubCatMast();
            ds = chkcode.chkusercode(compcode, code);
        }
        return ds;

    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void blankSession()
    {
        Session["pubstatus"] = null;
        Session["pubsave"] = null;
    }

    [Ajax.AjaxMethod]
    public DataSet chkpubname(string str)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.PubCatMast chk = new NewAdbooking.Classes.PubCatMast();
            ds = chk.pubnamechk(str);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast chk = new NewAdbooking.classesoracle.PubCatMast();
            ds = chk.pubnamechk(str);

        }
        else
        {
            NewAdbooking.classmysql.PubCatMast chk = new NewAdbooking.classmysql.PubCatMast();
            ds = chk.pubnamechk(str);
        }

        return ds;
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.ReadWrite)]
    public DataSet fillpocrl(string comp, string unit, string brcod, string dateformat, string extra1, string extra2)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = { comp, unit, brcod, dateformat, extra1, extra2 };
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.PubCatMast citymast = new NewAdbooking.Classes.PubCatMast();

            ds = citymast.bind_agency(comp, unit, brcod, dateformat, extra1, extra2);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast citymast = new NewAdbooking.classesoracle.PubCatMast();


            ds = citymast.bind_agency(comp, unit, brcod, dateformat, extra1, extra2);
        }
        else
        {
            string procedureName = "cir_agency_bind_cir_agency_bind_p";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }


        return ds;
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.ReadWrite)]
    public DataSet get_ag_name(string comp, string unit, string agcd, string dpcd)
    {
        DataSet ds = new DataSet();
        string[] parameterValueArray = { comp, unit, agcd, dpcd };
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.PubCatMast citymast = new NewAdbooking.Classes.PubCatMast();

           
                ds = citymast.get_agency_name(comp, unit, agcd, dpcd);
            }

        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.PubCatMast citymast = new NewAdbooking.classesoracle.PubCatMast();


            ds = citymast.get_agency_name(comp, unit, agcd, dpcd);
        }
        else
        {
            string procedureName = "cir_get_agency";
            NewAdbooking.classmysql.CommonClass obj = new NewAdbooking.classmysql.CommonClass();
            ds = obj.DynamicBindProcedure(procedureName, parameterValueArray);
        }
        return ds;
    }

}

