using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class adDummyDayPS : System.Web.UI.Page
{
    
    protected void Page_Load(object sender, EventArgs e)
    {
        
        Response.Expires = -1;
        Response.Buffer = true;
        Response.ExpiresAbsolute = DateTime.Now.AddDays(-1d);
        Response.Expires = -1500;
        Response.CacheControl = "no-cache";

        if (Session["compcode"] != null)
        {
            hiddencompcode.Value = Session["compcode"].ToString();
            hiddenuserid.Value = Session["userid"].ToString();
            hiddenauto.Value = Session["autogenerated"].ToString();
            hiddendateformat.Value = Session["dateformat"].ToString();
        }

        else
        {
            //Response.Redirect("login.aspx");
            Response.Write("<script>alert('Your session has been Expired');window.close();</script>");
            return;
        }

        Ajax.Utility.RegisterTypeForAjax(typeof(adDummyDayPS));
        if (!Page.IsPostBack)
        {
            hiddenusername.Value = Session["Username"].ToString();

            DataSet ds = new DataSet();
            ds.ReadXml(Server.MapPath("XML/button.xml"));

            btnNew.ImageUrl = ds.Tables[0].Rows[0].ItemArray[0].ToString();
            btnSave.ImageUrl = ds.Tables[0].Rows[0].ItemArray[1].ToString();
            btnModify.ImageUrl = ds.Tables[0].Rows[0].ItemArray[2].ToString();
            btnQuery.ImageUrl = ds.Tables[0].Rows[0].ItemArray[3].ToString();
            btnExecute.ImageUrl = ds.Tables[0].Rows[0].ItemArray[4].ToString();
            btnCancel.ImageUrl = ds.Tables[0].Rows[0].ItemArray[5].ToString();
            btnfirst.ImageUrl = ds.Tables[0].Rows[0].ItemArray[6].ToString();
            btnprevious.ImageUrl = ds.Tables[0].Rows[0].ItemArray[7].ToString();
            btnnext.ImageUrl = ds.Tables[0].Rows[0].ItemArray[8].ToString();
            btnlast.ImageUrl = ds.Tables[0].Rows[0].ItemArray[9].ToString();
            btnDelete.ImageUrl = ds.Tables[0].Rows[0].ItemArray[10].ToString();
            btnExit.ImageUrl = ds.Tables[0].Rows[0].ItemArray[11].ToString();

            DataSet objDataSet = new DataSet();
            objDataSet.ReadXml(Server.MapPath("XML/adDummyDayPS.xml"));

            lbDay.Text = objDataSet.Tables[0].Rows[0].ItemArray[0].ToString();
            lbPName.Text = objDataSet.Tables[0].Rows[0].ItemArray[1].ToString();
            lbPCName.Text = objDataSet.Tables[0].Rows[0].ItemArray[2].ToString();
            lbEdition.Text = objDataSet.Tables[0].Rows[0].ItemArray[3].ToString();
            lbSuppliment.Text = objDataSet.Tables[0].Rows[0].ItemArray[4].ToString();
            lbPageNo.Text = objDataSet.Tables[0].Rows[0].ItemArray[5].ToString();
            lbPageHeading.Text = objDataSet.Tables[0].Rows[0].ItemArray[6].ToString();
            lbNPages.Text = objDataSet.Tables[0].Rows[0].ItemArray[7].ToString();
            lbAdCtg.Text = objDataSet.Tables[0].Rows[0].ItemArray[8].ToString();
            lbSubAdCtg.Text = objDataSet.Tables[0].Rows[0].ItemArray[9].ToString();
            lbMaxRow.Text = objDataSet.Tables[0].Rows[0].ItemArray[10].ToString();
            lbMaxCol.Text = objDataSet.Tables[0].Rows[0].ItemArray[11].ToString();
            lbStartRow.Text = objDataSet.Tables[0].Rows[0].ItemArray[12].ToString();
            lbStartCol.Text = objDataSet.Tables[0].Rows[0].ItemArray[13].ToString();
            lbMaxAd.Text = objDataSet.Tables[0].Rows[0].ItemArray[14].ToString();
            lbPagiCode.Text = objDataSet.Tables[0].Rows[0].ItemArray[15].ToString();
            lbFrom.Text = objDataSet.Tables[0].Rows[0].ItemArray[16].ToString();
            lbTo.Text = objDataSet.Tables[0].Rows[0].ItemArray[17].ToString();
            lbLaderStatus.Text = objDataSet.Tables[0].Rows[0].ItemArray[18].ToString();
            lbPDate.Text = objDataSet.Tables[0].Rows[0].ItemArray[19].ToString();
            lbColor.Text = objDataSet.Tables[0].Rows[0].ItemArray[20].ToString();
            lbAdVolume.Text = objDataSet.Tables[0].Rows[0].ItemArray[21].ToString();
            drpDay.Focus();
            drpDay.Items[0].Selected = true;

            pageDis();//Enable false for all controls on load except btnNew, btnQuery, btnCancel and btnExit
            fillPubName();
            fillCategory();

    
            
            btnNew.Attributes.Add("OnClick", "javascript:return adDDPSNew();");
            btnSave.Attributes.Add("onClick", "javascript:return adDDPSSave_client();");
            btnModify.Attributes.Add("onClick", "javascript:return adDDPSModify_client();");
            btnQuery.Attributes.Add("onClick", "javascript:return adDDPSQuery_client();");
            btnExecute.Attributes.Add("onClick", "javascript:return adDDPSExecute_client();");
            btnCancel.Attributes.Add("onClick", "javascript:return adDDPSCancel();");
            btnDelete.Attributes.Add("onClick", "javascript:return adDDPSDelete_client();");
            btnfirst.Attributes.Add("onClick", "javascript:return adDDPSFirst();");
            btnprevious.Attributes.Add("onClick", "javascript:return adDDPSPrevious();");
            btnnext.Attributes.Add("onClick", "javascript:return adDDPSNext();");
            btnlast.Attributes.Add("onClick", "javascript:return adDDPSLast();");
            btnExit.Attributes.Add("onClick", "javascript:return adDDPSExit();");

            txtFrom.Attributes.Add("onChange", "javascript:return checkdate(this)");
            txtTo.Attributes.Add("onChange", "javascript:return checkdate(this)");

            drpPName.Attributes.Add("onChange", "javascript:return fillCenter_client()");
            drpPCName.Attributes.Add("onChange", "javascript:return fillEdiName_client()");
            drpEdition.Attributes.Add("onChange", "javascript:return fillSuppliment_client()");

            drpAdCtg.Attributes.Add("onChange", "javascript:return fillSubAdCat_client()");
        }
    }

    //This function Disables all the contrls

    public void pageDis()
    {
        btnNew.Enabled = true;

        btnSave.Enabled = false;
        btnModify.Enabled = false;
        btnDelete.Enabled = false;
        btnQuery.Enabled = true;
        btnExecute.Enabled = false;
        btnCancel.Enabled = true;
        btnfirst.Enabled = false;
        btnprevious.Enabled = false;
        btnnext.Enabled = false;
        btnlast.Enabled = false;
        btnExit.Enabled = true;

        drpDay.Enabled = false;
        drpPName.Enabled = false;
        drpPCName.Enabled = false;
        drpEdition.Enabled = false;
        drpSuppliment.Enabled = false;
        txtPageNo.Enabled = false;
        txtPageHeading.Enabled = false;
        txtNPages.Enabled = false;
        drpAdCtg.Enabled = false;
        drpSubAdCtg.Enabled = false;
        txtMaxRow.Enabled = false;
        txtMaxCol.Enabled = false;
        txtStartRow.Enabled = false;
        txtStartCol.Enabled = false;
        txtMaxAd.Enabled = false;
        txtPagiCode.Enabled = false;
        txtFrom.Enabled = false;
        txtTo.Enabled = false;
        txtLaderStatus.Enabled = false;
        txtPDate.Enabled = false;
        drpColor.Enabled = false;
        txtAdVolume.Enabled = false;

        btnNew.Focus();
    }

    private void fillPubName()
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.addummydaypages pubNames = new NewAdbooking.Classes.addummydaypages();
            ds = pubNames.getPubName(hiddencompcode.Value);
           
        }

        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.addummydaypages pubNames = new NewAdbooking.classesoracle.addummydaypages();
                ds = pubNames.getPubName(hiddencompcode.Value);
            }
        else
        {
            NewAdbooking.classmysql.adDummyDayPS pubNames = new NewAdbooking.classmysql.adDummyDayPS();
            ds = pubNames.getPubName(hiddencompcode.Value);
           
        }

        drpPName.Items.Clear();
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "--Select Publication--";
        li1.Value = "0";
        li1.Selected = true;
        drpPName.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            drpPName.Items.Add(li);
        }
    }

    public void fillCategory()
    {
        string compcode = hiddencompcode.Value;
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();
            ds = adDDPS.getCategory(compcode);

           
        }

        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();
                ds = adDDPS.getCategory(compcode);
            }
        else
        {
            NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
            ds = adDDPS.getCategory(compcode);
           
        }

        int i;
        ListItem li1;
        li1 = new ListItem();
        drpAdCtg.Items.Clear();
        li1.Text = "-Select Category-";
        li1.Value = "0";
        li1.Selected = true;
        drpAdCtg.Items.Add(li1);

        if (ds.Tables.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                drpAdCtg.Items.Add(li);

            }
        }
    }

//*********************************************************************************************************

//***This function is used to fill the Publication Center Name for this it calls the function getPubCName***

    [Ajax.AjaxMethod]
    public DataSet fillPCName()
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();
            ds = adDDPS.getPubCName();
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();
                ds = adDDPS.getPubCName();
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
            ds = adDDPS.getPubCName();
            return ds;
        }
    }

//*********************************************************************************************************

//***This function is used to fill the Edition for this it calls the function getEdiName***

    [Ajax.AjaxMethod]
    public DataSet fillEdiName(string pubCode, string pubCenter)
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();
            ds = adDDPS.getEdiName(pubCode, pubCenter);
            return ds;
        }
            else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();
                ds = adDDPS.getEdiName(pubCode, pubCenter);
                return ds;
            }
            else
            {
                NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
                ds = adDDPS.getEdiName(pubCode, pubCenter);
                return ds;
            }
    }

//*********************************************************************************************************

//***This function is used to fill the Suppliment for this it calls the function getSuppliment***
    [Ajax.AjaxMethod]
    public DataSet fillSuppliment(string pubCode, string pubEdit)
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();

            ds = adDDPS.getSuppliment(pubCode, pubEdit);
            return ds;
        }
            else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();

                ds = adDDPS.getSuppliment(pubCode, pubEdit);
                return ds;
            }
            else
            {
                NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
                ds = adDDPS.getSuppliment(pubCode, pubEdit);
                return ds;
            }
    }
//*********************************************************************************************************

//***This function is used to fill the Sub Category for this it calls the function getSubCategory***
    [Ajax.AjaxMethod]
    public DataSet fillSubAdCat(string compCode, string adCatCode)
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();

            ds = adDDPS.getSubCategory(compCode, adCatCode);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();

                ds = adDDPS.getSubCategory(compCode, adCatCode);
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
            ds = adDDPS.getSubCategory(compCode, adCatCode);
            return ds;
        }
    }
//*********************************************************************************************************

//***This function is used to check the duplicate data for this it calls the function chkDupRec***
    [Ajax.AjaxMethod]
    public string chkDup(string day, string pubCode, string centerCode, string ediCode, string supCode, string pageNo)
    {
        string dup;
        if(ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
        NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();
   
        dup = adDDPS.chkDupRec(day, pubCode, centerCode, ediCode, supCode,pageNo);
        return dup;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();

                dup = adDDPS.chkDupRec(day, pubCode, centerCode, ediCode, supCode, pageNo);
                return dup;
            }
        else
        {
            NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
            dup = adDDPS.chkDupRec(day, pubCode, centerCode, ediCode, supCode, pageNo);
            return dup;
        }
    }
//*********************************************************************************************************

//***This function is used to insert the Data for this it calls the function insertData***
    [Ajax.AjaxMethod]
    public DataSet saveInsert(string day, string pubCode, string centerCode, string ediCode, string supCode, string pageNo, string pageHead, string nPages, string adCtg, string subAdCtg, string maxRow, string maxCol, string startRow, string startCol, string maxAd, string pagiCode, string dFrom, string dTo, string ladStatus, string pDate, string pColor, string adVolume, string compCode, string userId)
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();

            ds = adDDPS.insertData(day, pubCode, centerCode, ediCode, supCode, pageNo, pageHead, nPages, adCtg, subAdCtg, maxRow, maxCol, startRow, startCol, maxAd, pagiCode, dFrom, dTo, ladStatus, pDate, pColor, adVolume, compCode, userId);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();

                ds = adDDPS.insertData(day, pubCode, centerCode, ediCode, supCode, pageNo, pageHead, nPages, adCtg, subAdCtg, maxRow, maxCol, startRow, startCol, maxAd, pagiCode, dFrom, dTo, ladStatus, pDate, pColor, adVolume, compCode, userId);
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
            ds = adDDPS.insertData(day, pubCode, centerCode, ediCode, supCode, pageNo, pageHead, nPages, adCtg, subAdCtg, maxRow, maxCol, startRow, startCol, maxAd, pagiCode, dFrom, dTo, ladStatus, pDate, pColor, adVolume, compCode, userId);
            return ds;
        }
    }
//*********************************************************************************************************

//***This function is used to update the Data for this it calls the function updateData***
    [Ajax.AjaxMethod]
    public DataSet saveUpdate(string day, string pubCode, string centerCode, string ediCode, string supCode, string pageNo, string pageHead, string nPages, string adCtg, string subAdCtg, string maxRow, string maxCol, string startRow, string startCol, string maxAd, string pagiCode, string dFrom, string dTo, string ladStatus, string pDate, string pColor, string adVolume, string compCode, string modDay, string modPubCode, string modCenterCode, string modEdiCode, string modSupCode, string modPageNo)
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();

            ds = adDDPS.updateData(day, pubCode, centerCode, ediCode, supCode, pageNo, pageHead, nPages, adCtg, subAdCtg, maxRow, maxCol, startRow, startCol, maxAd, pagiCode, dFrom, dTo, ladStatus, pDate, pColor, adVolume, compCode, modDay, modPubCode, modCenterCode, modEdiCode, modSupCode, modPageNo);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();

                ds = adDDPS.updateData(day, pubCode, centerCode, ediCode, supCode, pageNo, pageHead, nPages, adCtg, subAdCtg, maxRow, maxCol, startRow, startCol, maxAd, pagiCode, dFrom, dTo, ladStatus, pDate, pColor, adVolume, compCode, modDay, modPubCode, modCenterCode, modEdiCode, modSupCode, modPageNo);
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
            ds = adDDPS.updateData(day, pubCode, centerCode, ediCode, supCode, pageNo, pageHead, nPages, adCtg, subAdCtg, maxRow, maxCol, startRow, startCol, maxAd, pagiCode, dFrom, dTo, ladStatus, pDate, pColor, adVolume, compCode, modDay, modPubCode, modCenterCode, modEdiCode, modSupCode, modPageNo);
            return ds;
        }
    }
//*********************************************************************************************************

//***This function is used to execute the user query for this it calls the function getData***
    [Ajax.AjaxMethod]
    public DataSet adDDPSExecute(string compCode, string day, string pubCode, string centerCode, string ediCode, string supCode, string pageNo)
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();

            ds = adDDPS.getData(compCode, day, pubCode, centerCode, ediCode, supCode, pageNo);
            return ds;
        }
            else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();

                ds = adDDPS.getData(compCode, day, pubCode, centerCode, ediCode, supCode, pageNo);
                return ds;
            }
            else
            {
                NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
                ds = adDDPS.getData(compCode, day, pubCode, centerCode, ediCode, supCode, pageNo);
                return ds;
            }

    }
//*********************************************************************************************************

//***This function is used to detele the data for this it calls the function deleteData***
    [Ajax.AjaxMethod]
    public DataSet adDDPSDelete(string compCode, string day, string pubCode, string centerCode, string ediCode, string supCode, string pageNo)
    {
        DataSet ds;
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();

            ds = adDDPS.deleteData(compCode, day, pubCode, centerCode, ediCode, supCode, pageNo);
            return ds;
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.adDummyDayPS adDDPS = new NewAdbooking.classesoracle.adDummyDayPS();

                ds = adDDPS.deleteData(compCode, day, pubCode, centerCode, ediCode, supCode, pageNo);
                return ds;
            }
        else
        {
            NewAdbooking.classmysql.adDummyDayPS adDDPS = new NewAdbooking.classmysql.adDummyDayPS();
            ds = adDDPS.deleteData(compCode, day, pubCode, centerCode, ediCode, supCode, pageNo);
            return ds;
        }
    }
//*********************************************************************************************************

//***This function is used to fill the Suppliment for this it calls the function getSuppliment***

    //protected void drpAdCtg_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    string compcode = hiddencompcode.Value;
    //    NewAdbooking.Classes.adDummyDayPS adDDPS = new NewAdbooking.Classes.adDummyDayPS();
    //    DataSet ds = new DataSet();
    //    ds = adDDPS.getSubCategory(compcode,drpAdCtg.SelectedValue);

    //    int i;
    //    ListItem li1;
    //    li1 = new ListItem();
    //    drpSubAdCtg.Items.Clear();
    //    li1.Text = "-Select Sub Category-";
    //    li1.Value = "0";
    //    li1.Selected = true;
    //    drpSubAdCtg.Items.Add(li1);

    //    if (ds.Tables.Count > 0)
    //    {
    //        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
    //        {
    //            ListItem li;
    //            li = new ListItem();
    //            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
    //            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
    //            drpSubAdCtg.Items.Add(li);

    //        }
    //    }
    //    drpAdCtg.Enabled = true;
    //    drpSubAdCtg.Enabled = true;
    //}
}
