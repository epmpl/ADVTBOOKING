using System;
using System.Text;
using System.IO;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Net.Mail;

public partial class ContractMaster : System.Web.UI.Page
{
    public static int numberDiv;
    string dateformat;
    static string saveormodify, chkquery, saving;
    //string dd, mm, yyyy, dd1, mm1, yyyy1;
    string validfromdate, validtill, message, formname;
    static int fpnl;
    public string currency;
    static string ddealcode, dagencycode, dsubagency, dclient, dproduct, dreprest, ddealtype, ddealname;
    string quotation = "";

    

    ///////////this int is for auto generated
    int cou = 0;
    //  dateinsert clsdate = new dateinsert();
    static DataSet excutequery = new DataSet();
    /////////////////////////////////////////
    protected void Page_Load(object sender, EventArgs e)
    {

        Response.Expires = -1;

        Ajax.Utility.RegisterTypeForAjax(typeof(ContractMaster));


        if (Session["compcode"] == null)
        {
            //Response.Redirect("login.aspx");
            Response.Write("<script>alert(\"Your Session  Been Expired\");window.close();</script>");
            return;

        }
        currency = Session["currency"].ToString();
        formname = "ContractMaster";
        dateformat = Session["dateformat"].ToString();
        hiddendateformat.Value = Session["dateformat"].ToString();
        hiddenauto.Value = Session["autogenerated"].ToString();
        hiddencompcode.Value = Session["compcode"].ToString();
        hiddenuserid.Value = Session["userid"].ToString();
        hiddencenter.Value = Session["revenue"].ToString();
        hiddencentername.Value = Session["centername"].ToString();
        hiddencentercode.Value = Session["center"].ToString();
        if(Request.QueryString["quotation"]!=null)
        quotation = Request.QueryString["quotation"].ToString();
        if (quotation=="Quotation Deal")
         hdnquation.Value = "Y";
        else
            hdnquation.Value = "N";
        ////if(Session["valueinsert"]!=null)
        ////    hiddenvalueinsert.Value = Session["valueinsert"].ToString();
        if (Session["autogenerated"].ToString() == "1")
        {
            txtdealno.Enabled = false;
        }
        hiddencurrency.Value = Session["currency"].ToString();
        hiddenusername.Value = Session["Username"].ToString();

        btnNew.Focus();

        DataSet objDataSet = new DataSet();
        // Read in the XML file
        objDataSet.ReadXml(Server.MapPath("XML/Contractmaster.xml"));
        DealNo.Text = objDataSet.Tables[0].Rows[0].ItemArray[0].ToString();
        AgencyCode.Text = objDataSet.Tables[0].Rows[0].ItemArray[1].ToString();
        SubAgencyCode.Text = objDataSet.Tables[0].Rows[0].ItemArray[2].ToString();
        ClientName.Text = objDataSet.Tables[0].Rows[0].ItemArray[3].ToString();
        Product.Text = objDataSet.Tables[0].Rows[0].ItemArray[4].ToString();
        Representative.Text = objDataSet.Tables[0].Rows[0].ItemArray[5].ToString();
        txttilldate.Text = objDataSet.Tables[0].Rows[0].ItemArray[7].ToString();
        validfrom.Text = objDataSet.Tables[0].Rows[0].ItemArray[6].ToString();
        totaldealvalue.Text = objDataSet.Tables[0].Rows[0].ItemArray[8].ToString();
        totaldealvolume.Text = objDataSet.Tables[0].Rows[0].ItemArray[9].ToString();
        lbcurr.Text = objDataSet.Tables[0].Rows[0].ItemArray[10].ToString();
        lbteamname.Text = objDataSet.Tables[0].Rows[0].ItemArray[11].ToString();
        lbdealtype.Text = objDataSet.Tables[0].Rows[0].ItemArray[12].ToString();
        lbldealname.Text = objDataSet.Tables[0].Rows[0].ItemArray[16].ToString();
        //  lbadtype.Text = objDataSet.Tables[0].Rows[0].ItemArray[17].ToString();
        lblcontractdate.Text = objDataSet.Tables[0].Rows[0].ItemArray[18].ToString();
        lblclosedate.Text = objDataSet.Tables[0].Rows[0].ItemArray[19].ToString();
        lblpaymenttype.Text = objDataSet.Tables[0].Rows[0].ItemArray[20].ToString();
        lblservicetax.Text = objDataSet.Tables[0].Rows[0].ItemArray[21].ToString();
        lblexec.Text = objDataSet.Tables[0].Rows[0].ItemArray[22].ToString();
        lblretainer.Text = objDataSet.Tables[0].Rows[0].ItemArray[23].ToString();
        lblcaption.Text = objDataSet.Tables[0].Rows[0].ItemArray[24].ToString();
        lbldealon.Text = objDataSet.Tables[0].Rows[0].ItemArray[25].ToString();
        lbdealfrom.Text = objDataSet.Tables[0].Rows[0].ItemArray[26].ToString();
        lbcenter.Text = objDataSet.Tables[0].Rows[0].ItemArray[27].ToString();
        lbtransation.Text = objDataSet.Tables[0].Rows[0].ItemArray[28].ToString();
        lblrono.Text = objDataSet.Tables[0].Rows[0].ItemArray[29].ToString();
        lbrodate.Text = objDataSet.Tables[0].Rows[0].ItemArray[30].ToString();
        lbrostatus.Text = objDataSet.Tables[0].Rows[0].ItemArray[31].ToString();
        lbreceipt.Text = objDataSet.Tables[0].Rows[0].ItemArray[32].ToString();
        lbrptcurrency.Text = objDataSet.Tables[0].Rows[0].ItemArray[33].ToString();
        btclientclear.Text = objDataSet.Tables[0].Rows[0].ItemArray[34].ToString();
        btclientclearall.Text = objDataSet.Tables[0].Rows[0].ItemArray[35].ToString();
        //////////////////////////////this function  is for checking the mandatory fields from xml and storing it into hidden fields

        checkformandatory();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //This code reads the label name from the xml file
        DataSet objDataSetbu = new DataSet();
        // Read in the XML file
        objDataSetbu.ReadXml(Server.MapPath("XML/button.xml"));
        btnNew.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[0].ToString();
        btnSave.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[1].ToString();
        btnModify.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[2].ToString();
        btnQuery.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[3].ToString();
        btnExecute.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[4].ToString();
        btnCancel.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[5].ToString();
        btnfirst.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[6].ToString();
        btnprevious.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[7].ToString();
        btnnext.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[8].ToString();
        btnlast.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[9].ToString();
        btnDelete.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[10].ToString();
        btnExit.ImageUrl = objDataSetbu.Tables[0].Rows[0].ItemArray[11].ToString();
        //lab


        if (!Page.IsPostBack)
        {
            pop_industry();
            bindpayMode();
            bindStatus();
            bindServiceTax();
            bindcurrency();
            fillPubCenter();
            //bindagencyname();
            //bindclientname();
            binddealtype();
            bindProductMain(hiddencompcode.Value);
            //bindrepresentative();
            bindteamname();

            lblfont.Attributes.Add("OnClick", "javascript:return openfont();");//for deal master status
            drpagencycode.Attributes.Add("OnBlur", "javascript:return checkValidAgency();");
            drpclientname.Attributes.Add("OnBlur", "javascript:return checkValidClient();");
            //drpclientname.Attributes.Add("onkeydown", "javascript:return checkValidClient();");
            txtexecutive.Attributes.Add("OnBlur", "javascript:return checkValidExecutive();");
            txtretainer.Attributes.Add("OnBlur", "javascript:return checkValidRetainer();");
            drprostatus.Attributes.Add("OnChange", "javascript:return roStatusChange();");
            drpindustry.Attributes.Add("OnChange", "javascript:return bindIndusProduct();");
            lstagency.Attributes.Add("onclick", "javascript:return insertagency(event);");
            lstclient.Attributes.Add("onclick", "javascript:return insertagency(event);");
            lstclient.Attributes.Add("onkeydown", "javascript:return insertagency(event);");
            lstretainer.Attributes.Add("onclick", "javascript:return insertagency(event);");
            lstexec.Attributes.Add("onclick", "javascript:return insertagency(event);");
            drpteamname.Attributes.Add("OnChange", "javascript:return teamName_Change();");
            drpclientname.Attributes.Add("OnChange", "javascript:return clientChange();");
            //drpclientname.Attributes.Add("onkeydown", "javascript:return clientChange();");
            //drpagencycode.Attributes.Add("OnChange", "javascript:return agency_change();");
            drpdealtype.Attributes.Add("OnChange", "javascript:return dealType_Change(event);");
            btnSave.Attributes.Add("OnClick", "javascript:return checksavevalidation();");
            // lbcontractdetails.Attributes.Add("OnClick", "javascript:return opencontractdetails();");

            txtfromdate.Attributes.Add("OnChange", "javascript:return checkdate(this);  ");
            txtfromdate.Attributes.Add("OnBlur", "javascript:return checkDateValid();  ");
            txtfromdate.Attributes.Add("onkeydown", "javascript:return datecurr(event);  ");
           
            txtcontractdate.Attributes.Add("OnChange", "javascript:return checkdate(this);  ");
            txtclosedate.Attributes.Add("OnChange", "javascript:return checkdate(this);  ");
            TextBox1.Attributes.Add("OnChange", "javascript:return checkdate(this);  ");
            TextBox1.Attributes.Add("OnBlur", "javascript:return checkDateValid();  ");
            TextBox1.Attributes.Add("onkeydown", "javascript:return datecurr(event);  ");

            getbuttoncheck(formname);
           
            txtdealvalue.Attributes.Add("onkeyup", "javascript:return chkvol(event);");
            txtdealvalue.Attributes.Add("onchange", "javascript:return amount(this);");
            txtdealvol.Attributes.Add("onkeyup", "javascript:return chkval(event);");
            txtdealvol.Attributes.Add("onchange", "javascript:return amount(this);");
            drpcurr.SelectedValue = hiddencurrency.Value;
            drpcurr.Attributes.Add("onchange", "javascript:return closedeal();");
            btnDelete.Attributes.Add("onclick", "javascript:return deleteclick();");
            txtdealname.Attributes.Add("OnChange", "javascript:return autoornot();");
            btnExit.Attributes.Add("onclick", "javascript:return closedael();");
            btnNew.Attributes.Add("onclick", "javascript:return newcontract();");
            btnQuery.Attributes.Add("onclick", "javascript:return querycontract();");
            btnModify.Attributes.Add("onclick", "javascript:return modifycontract();");
            btnCancel.Attributes.Add("onclick", "javascript:return cancelcontract();");
            btnExecute.Attributes.Add("onclick", "javascript:return executeclick();");
            btnfirst.Attributes.Add("onclick", "javascript:return firstclick();");
            btnprevious.Attributes.Add("onclick", "javascript:return previousclick();");
            btnlast.Attributes.Add("onclick", "javascript:return lastclick();");
            btnnext.Attributes.Add("onclick", "javascript:return nextclick();");
            drpdealon.Attributes.Add("onChange", "javascript:return openElecPopUp();");
            lstcommon.Attributes.Add("onclick", "javascript:return tabvalue1(event);");
            attachment1.Attributes.Add("OnClick", "javascript:return openattach1();");
            Listcontract.Attributes.Add("onclick", "javascript:return insertagency(event);");
            txtrodate.Attributes.Add("OnBlur", "javascript:return checkdateforcurr(this);  ");
            string centername = hiddencentername.Value + "(" + hiddencentercode.Value + ")";
            btclientclear.Attributes.Add("onclick", "javascript:return multipleclientclear();");
            btclientclearall.Attributes.Add("onclick", "javascript:return multipleclientclearall();");
            txtdealfrom.Text = centername;
            centarnamejs.Value = centername;
            if (Request.QueryString["Deal"] != null)
            {
                if (Request.QueryString["Deal"] != null)
                    hddeal.Value = Request.QueryString["Deal"].ToString();

            }
            else
            {
                hddeal.Value = "";
            }
            DataSet dsdate1 = new DataSet();
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.pop cls_book = new NewAdbooking.Classes.pop();
                dsdate1 = cls_book.datechkprefer(hiddencompcode.Value);
            }
            else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "mysql")
            {
                NewAdbooking.classmysql.pop cls_book = new NewAdbooking.classmysql.pop();
                dsdate1 = cls_book.datechkprefer(hiddencompcode.Value);
            }
            if (dsdate1.Tables.Count > 0 && dsdate1.Tables[0].Rows.Count > 0)
            {
                hiddensepcashier.Value = dsdate1.Tables[0].Rows[0]["SEPRATE_CASHIER"].ToString();
            }
            //   bindadtype();
        }
        if (btnNew.Enabled == false)
            btnNew.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[0].ToString();
        if (btnSave.Enabled == false)
            btnSave.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[1].ToString();
        if (btnModify.Enabled == false)
            btnModify.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[2].ToString();
        if (btnQuery.Enabled == false)
            btnQuery.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[3].ToString();
        if (btnExecute.Enabled == false)
            btnExecute.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[4].ToString();
        if (btnCancel.Enabled == false)
            btnCancel.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[5].ToString();
        if (btnfirst.Enabled == false)
            btnfirst.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[6].ToString();
        if (btnprevious.Enabled == false)
            btnprevious.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[7].ToString();
        if (btnnext.Enabled == false)
            btnnext.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[8].ToString();
        if (btnlast.Enabled == false)
            btnlast.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[9].ToString();
        if (btnDelete.Enabled == false)
            btnDelete.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[10].ToString();
        if (btnExit.Enabled == false)
            btnExit.ImageUrl = objDataSetbu.Tables[1].Rows[0].ItemArray[11].ToString();


        DataSet dsdate = new DataSet();

        DateTime dt = DateTime.Now;

        int year = Convert.ToInt32(dt.Year);
        int month = Convert.ToInt32(dt.Month);
        int day = Convert.ToInt32(dt.Day);
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster cls_book = new NewAdbooking.Classes.BookingMaster();
            dsdate = cls_book.getCurrdate();
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            NewAdbooking.classmysql.BookingMaster cls_book = new NewAdbooking.classmysql.BookingMaster();
            dsdate = cls_book.getCurrdate();
        }
        else
        {
            NewAdbooking.classesoracle.BookingMaster cls_book = new NewAdbooking.classesoracle.BookingMaster();
            dsdate = cls_book.getCurrdate();
        }
        day = Convert.ToInt32(dsdate.Tables[0].Rows[0].ItemArray[0].ToString());
        string month1 = dsdate.Tables[0].Rows[0].ItemArray[1].ToString();
        year = Convert.ToInt32(dsdate.Tables[0].Rows[0].ItemArray[2].ToString());
        if (month1.ToString().Length == 1)
            month1 = "0" + month1;
        if (Session["dateformat"].ToString() == "dd/mm/yyyy")
        {
            txtcontractdate.Text = day + "/" + month1 + "/" + year;


        }
        else if (Session["dateformat"].ToString() == "yyyy/mm/dd")
        {
            txtcontractdate.Text = year + "/" + month1 + "/" + day;


        }
        else
        {
            txtcontractdate.Text = month1 + "/" + day + "/" + year;//getdateshow.getDate(Session["dateformat"].ToString(), serdate);


        }

        btnNew.Focus();
    }


    private void checkformandatory()
    {
        if (DealNo.Text.IndexOf("*") >= 0)
        {
            hiddendealno.Value = "1";
        }
        else
        {
            hiddendealno.Value = "0";
        }
        if (lbldealname.Text.IndexOf("*") >= 0)
        {
            hiddendealname.Value = "1";
        }
        else
        {
            hiddendealname.Value = "0";
        }
        if (AgencyCode.Text.IndexOf("*") >= 0)
        {
            hiddenagcode.Value = "1";
        }
        else
        {
            hiddenagcode.Value = "0";
        }
        if (SubAgencyCode.Text.IndexOf("*") >= 0)
        {
            hiddensubagcode.Value = "1";
        }
        else
        {
            hiddensubagcode.Value = "0";
        }
        if (ClientName.Text.IndexOf("*") >= 0)
        {
            hiddenclientname.Value = "1";
        }
        else
        {
            hiddenclientname.Value = "0";
        }
        if (Product.Text.IndexOf("*") >= 0)
        {
            hiddenproduct.Value = "1";
        }
        else
        {
            hiddenproduct.Value = "0";
        }
        if (Representative.Text.IndexOf("*") >= 0)
        {
            hiddenrep.Value = "1";
        }
        else
        {
            hiddenrep.Value = "0";
        }
        if (validfrom.Text.IndexOf("*") >= 0)
        {
            hiddenvalidfrom.Value = "1";
        }
        else
        {
            hiddenvalidfrom.Value = "0";
        }
        if (txttilldate.Text.IndexOf("*") >= 0)
        {
            hiddento.Value = "1";
        }
        else
        {
            hiddento.Value = "0";
        }
    }



    protected void btnCancel_Click(object sender, EventArgs e)
    {

    }
    protected void btnNew_Click1(object sender, EventArgs e)
    {

    }

    protected void btnCancel_Click1(object sender, EventArgs e)
    {


    }


    protected void AspNetMessageBox(string strMessage)
    {
        //strMessage = adminResource.GetStringFromResource(strMessage);
        string strAlert = "";
        strAlert = "alert('" + strMessage + "')";
        ScriptManager.RegisterClientScriptBlock(this, typeof(ContractMaster), "ShowAlert", strAlert, true);
    }
    protected void btnQuery_Click(object sender, EventArgs e)
    {

    }

    protected void btnExecute_Click(object sender, EventArgs e)
    {


    }
    protected void btnfirst_Click(object sender, EventArgs e)
    {


    }
    protected void btnprevious_Click(object sender, EventArgs e)
    {

    }

    protected void btnlast_Click(object sender, EventArgs e)
    {

    }
    protected void btnModify_Click(object sender, EventArgs e)
    {

    }
    protected void btnDelete_Click(object sender, EventArgs e)
    {
    }

    protected void btnQuery_Click1(object sender, EventArgs e)
    {

    }


    public string RenderControlToString(Control c)
    {
        StringBuilder sb = new StringBuilder();
        StringWriter sw = new StringWriter(sb);
        HtmlTextWriter htmlWriter = new HtmlTextWriter(sw);
        c.RenderControl(htmlWriter);

        return sb.ToString();
    }
    //************************
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.ReadWrite)]
    public void saveRowInSession(string   arr)
    {
        Session["tempdata"] = arr;
        
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet GetgridInfo(string dealno)
    {
        DataSet ds = new DataSet(); 
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindgridforcontract = new NewAdbooking.Classes.Contract();
            ds = bindgridforcontract.bindgrid(Session["compcode"].ToString(), Session["userid"].ToString(), dealno, "1");
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract bindgridforcontract = new NewAdbooking.classesoracle.Contract();
            ds = bindgridforcontract.bindgrid(Session["compcode"].ToString(), Session["userid"].ToString(), dealno, "1");
        }
        else
        {
            NewAdbooking.classmysql.Contract bindgridforcontract = new NewAdbooking.classmysql.Contract();
            ds = bindgridforcontract.bindgrid(Session["compcode"].ToString(), Session["userid"].ToString(), dealno, "1");
        }
        return ds;
    }


    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public string BindDataGrid(string dealno)
    {
        System.Web.UI.WebControls.DataGrid grid = new DataGrid();
        grid.DataSource = GetInfo(dealno);
        grid.DataBind();
        return RenderControlToString(grid);

    }
    public DataSet GetInfo(string dealno)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindgridforcontract = new NewAdbooking.Classes.Contract();
            ds = bindgridforcontract.bindgrid(Session["compcode"].ToString(), Session["userid"].ToString(), dealno, "1");
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract bindgridforcontract = new NewAdbooking.classesoracle.Contract();
            ds = bindgridforcontract.bindgrid(Session["compcode"].ToString(), Session["userid"].ToString(), dealno, "1");
        }
        else
        {
            NewAdbooking.classmysql.Contract bindgridforcontract = new NewAdbooking.classmysql.Contract();
            ds = bindgridforcontract.bindgrid(Session["compcode"].ToString(), Session["userid"].ToString(), dealno, "1");
        }
        return ds;
    }



    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet get_Buttoncheck(string formname)
    {
        DataSet butt = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.classlibraryforbutton getpermission = new NewAdbooking.Classes.classlibraryforbutton();

            butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.classlibraryforbutton getpermission = new NewAdbooking.classesoracle.classlibraryforbutton();
            butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);
        }
        else
        {
            NewAdbooking.classmysql.classlibraryforbutton getpermission = new NewAdbooking.classmysql.classlibraryforbutton();
            butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);

        }
        return butt;
    }
    public void getbuttoncheck(string formname)
    {
        DataSet butt = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.classlibraryforbutton getpermission = new NewAdbooking.Classes.classlibraryforbutton();

            butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.classlibraryforbutton getpermission = new NewAdbooking.classesoracle.classlibraryforbutton();

            butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);
        }
        else
        {
            NewAdbooking.classmysql.classlibraryforbutton getpermission = new NewAdbooking.classmysql.classlibraryforbutton();
            butt = getpermission.getbuttonpermission(Session["compcode"].ToString(), Session["userid"].ToString(), formname);
        }

        string id = butt.Tables[0].Rows[0].ItemArray[0].ToString();

        if (id != "0")
        {
            if (id == "0" || id == "8")
            {

                hiddenflagstatus.Value = "0";

                btnNew.Enabled = false;
                btnQuery.Enabled = false;
                btnExecute.Enabled = false;
                btnCancel.Enabled = false;
                btnExit.Enabled = false;
                btnDelete.Enabled = false;
                btnModify.Enabled = false;

                btnSave.Enabled = false;
                btnModify.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                Response.Write("<script>alert(\"You Are Not Authorised To View This Form\");window.close();</script>");
                return;
            }
            if (id == "1" || id == "9")
            {
                btnNew.Enabled = true;
                btnQuery.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnExecute.Enabled = false;

                btnSave.Enabled = false;
                btnModify.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                hiddenflagstatus.Value = "1";

            }
            if (id == "2" || id == "10")
            {
                btnNew.Enabled = false;
                btnExecute.Enabled = false;
                btnQuery.Enabled = true;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnModify.Enabled = true;

                btnSave.Enabled = false;
                btnfirst.Enabled = true;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExit.Enabled = true;
                hiddenflagstatus.Value = "2";

            }
            if (id == "3" || id == "11")
            {
                btnNew.Enabled = true;
                btnQuery.Enabled = true;
                btnExecute.Enabled = false;
                btnDelete.Enabled = false;
                btnModify.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;


                btnSave.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;

                hiddenflagstatus.Value = "3";
            }
            if (id == "4" || id == "12")
            {
                btnNew.Enabled = false;
                btnQuery.Enabled = true;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExecute.Enabled = false;

                btnNew.Enabled = false;
                btnExecute.Enabled = false;
                btnDelete.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;

                btnModify.Enabled = false;

                btnSave.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                hiddenflagstatus.Value = "4";
            }
            if (id == "5" || id == "13")
            {
                btnNew.Enabled = true;
                btnSave.Enabled = false;
                btnQuery.Enabled = true;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExecute.Enabled = false;
                btnModify.Enabled = false;
                hiddenflagstatus.Value = "5";

            }
            if (id == "6" || id == "14")
            {
                btnNew.Enabled = false;
                btnSave.Enabled = false;
                btnQuery.Enabled = true;
                btnModify.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExecute.Enabled = false;

                hiddenflagstatus.Value = "6";
            }
            if (id == "7" || id == "15")
            {
                btnNew.Enabled = true;
                btnSave.Enabled = false;
                btnQuery.Enabled = true;
                btnModify.Enabled = false;
                btnCancel.Enabled = true;
                btnExit.Enabled = true;
                btnDelete.Enabled = false;
                btnfirst.Enabled = false;
                btnnext.Enabled = false;
                btnprevious.Enabled = false;
                btnlast.Enabled = false;
                btnExecute.Enabled = false;
                hiddenflagstatus.Value = "7";
            }
        }

    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public void blankvalueInsertSession()
    {
        Session["valueinsert"] = null;
    }



    public void autogenerated()
    {
        txtdealno.Enabled = false;
        string auto = "CM";
        string autogen = auto + cou;
        DataSet da = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.Contract autocode = new NewAdbooking.Classes.Contract();

            da = autocode.autogenrated(Session["compcode"].ToString(), Session["userid"].ToString(), auto);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {

            NewAdbooking.classesoracle.Contract autocode = new NewAdbooking.classesoracle.Contract();

            da = autocode.autogenrated(Session["compcode"].ToString(), Session["userid"].ToString(), auto);
        }
        else
        {
            NewAdbooking.classmysql.Contract autocode = new NewAdbooking.classmysql.Contract();

            da = autocode.autogenrated(Session["compcode"].ToString(), Session["userid"].ToString(), auto);

        }

        if (da.Tables[0].Rows.Count > 0 && da.Tables[0].Rows[0].ItemArray[0].ToString() != "")
        {
            string ab = da.Tables[0].Rows[0].ItemArray[0].ToString();
            int cou1 = Convert.ToInt32(ab);
            cou1++;

            txtdealno.Text = auto + cou1;
        }
        else
        {
            txtdealno.Text = autogen;

        }

    }
    public void bindcurrency()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract curr = new NewAdbooking.Classes.Contract();

            ds = curr.currencybind(Session["compcode"].ToString(), Session["userid"].ToString());
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract curr = new NewAdbooking.classesoracle.Contract();

            ds = curr.currencybind(Session["compcode"].ToString(), Session["userid"].ToString());
        }
        else
        {
            NewAdbooking.classmysql.Contract curr = new NewAdbooking.classmysql.Contract();

            ds = curr.currencybind(Session["compcode"].ToString(), Session["userid"].ToString());

        }

        drpcurr.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Currency-";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drpcurr.Items.Add(li1);
        drprptcurrency.Items.Add(li1);
        if (ds.Tables[0].Rows.Count > 0)
        {
            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
                //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                drpcurr.Items.Add(li);
                drprptcurrency.Items.Add(li);
            }

        }

    }


    protected void btnExit_Click(object sender, EventArgs e)
    {
        Session["valueinsert"] = null;
        Response.Write("<script>window.close();</script>");
    }

    public void bindteamname()
    {
        DataSet dc = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract getteamname = new NewAdbooking.Classes.Contract();
            dc = getteamname.bindname(Session["compcode"].ToString());
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract getteamname = new NewAdbooking.classesoracle.Contract();
            dc = getteamname.bindname(Session["compcode"].ToString());
        }
        else
        {
            NewAdbooking.classmysql.Contract getteamname = new NewAdbooking.classmysql.Contract();
            dc = getteamname.bindname(Session["compcode"].ToString());
        }
        drpteamname.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Name-";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drpteamname.Items.Add(li1);

        if (dc.Tables[0].Rows.Count > 0)
        {
            for (i = 0; i < dc.Tables[0].Rows.Count; i++)
            {
                ListItem li;
                li = new ListItem();
                li.Text = dc.Tables[0].Rows[i].ItemArray[0].ToString();
                li.Value = dc.Tables[0].Rows[i].ItemArray[1].ToString();
                //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
                drpteamname.Items.Add(li);
            }

        }


    }

    public void binddealtype()
    {
        DataSet df = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindtype = new NewAdbooking.Classes.Contract();
            df = bindtype.binddeal(Session["compcode"].ToString());
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract bindtype = new NewAdbooking.classesoracle.Contract();
            df = bindtype.binddeal(Session["compcode"].ToString());
        }
        else
        {
            NewAdbooking.classmysql.Contract bindtype = new NewAdbooking.classmysql.Contract();
            df = bindtype.binddeal(Session["compcode"].ToString());
        }

        drpdealtype.Items.Clear();
        int i;
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "-Select Deal-";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drpdealtype.Items.Add(li1);

        for (i = 0; i <= df.Tables[0].Rows.Count - 1; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = df.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Value = df.Tables[0].Rows[i].ItemArray[1].ToString();
            //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
            drpdealtype.Items.Add(li);
        }

    }




    protected void lbcontractdetails_Click(object sender, EventArgs e)
    {
        /////////////////////this is to save the data when user open the pop up


    }

    //////////////////////////////////////////for mod

    public void modifythedata()
    {


    }



    protected void txtfromdate_TextChanged(object sender, EventArgs e)
    {

    }


    [Ajax.AjaxMethod]
    public DataSet checkcode(string dealname)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract exe = new NewAdbooking.Classes.Contract();
            ds = exe.dealautocode(dealname);
            return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract exe = new NewAdbooking.classesoracle.Contract();
            ds = exe.dealautocode(dealname);
            return ds;
        }
        else
        {
            NewAdbooking.classmysql.Contract exe = new NewAdbooking.classmysql.Contract();
            ds = exe.dealautocode(dealname);
            return ds;
        }

    }

    public string setDate(string dateformat, string dateValue)
    {
        //splitting of date
        string dateReturn = "";
        if (dateValue != "")
        {
            char[] splitterfrom = { '/' };
            string[] myarrayfrom = dateValue.Split(splitterfrom);
            string dd, mm, yyyy;
            if (dateformat == "dd/mm/yyyy")
            {
                //for from date
                dd = myarrayfrom[0];
                mm = myarrayfrom[1];
                yyyy = myarrayfrom[2];
                dateReturn = mm + "/" + dd + "/" + yyyy;
            }
            else if (dateformat == "yyyy/mm/dd")
            {
                yyyy = myarrayfrom[0];
                mm = myarrayfrom[1];
                dd = myarrayfrom[2];
                dateReturn = mm + "/" + dd + "/" + yyyy;
            }
            else
            {
                dateReturn = dateValue;
            }
        }
        return dateReturn;
    }

    public string getDate(string dateformat, string dateValue)
    {
        //splitting of date

        string dateReturn = "";
        char[] splitterfrom = { '/' };
        string[] myarrayfrom = dateValue.Split(splitterfrom);
        string dd, mm, yyyy;
        if (dateValue == "" || dateValue == "0")
        {
            return dateReturn;
        }
        if (dateformat == "dd/mm/yyyy")
        {
            //for from date
            dd = myarrayfrom[1];
            mm = myarrayfrom[0];
            yyyy = myarrayfrom[2];

            dateReturn = dd + "/" + mm + "/" + yyyy;
        }

        if (dateformat == "yyyy/mm/dd")
        {
            //for from date
            dd = myarrayfrom[2];
            mm = myarrayfrom[1];
            yyyy = myarrayfrom[0];

            dateReturn = yyyy + "/" + mm + "/" + dd;
        }

        if (dateformat == "mm/dd/yyyy")
        {
            // dateReturn = dateValue;
            //for from date
            dd = myarrayfrom[1];
            mm = myarrayfrom[0];
            yyyy = myarrayfrom[2];

            dateReturn = mm + "/" + dd + "/" + yyyy;

        }
        if (dateformat == "" || dateformat == null)
        {
            dateReturn = dateValue;
        }
        return dateReturn;
    }

    [Ajax.AjaxMethod]
    public void delete_contractdetails(string dealcontract, string compcode)
    {
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract delete = new NewAdbooking.Classes.Contract();
            delete.deletecontractdeta(dealcontract, compcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract delete = new NewAdbooking.classesoracle.Contract();
            delete.deletecontractdeta(dealcontract, compcode);
        }
        else
        {
            NewAdbooking.classmysql.Contract delete = new NewAdbooking.classmysql.Contract();
            delete.deletecontractdeta(dealcontract, compcode);
        }
    }
    [Ajax.AjaxMethod]
    public DataSet product_bind(string client, string compcode, string userid)
    {
        DataSet ex1 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindproduct = new NewAdbooking.Classes.Contract();
            ex1 = bindproduct.productbind(client, compcode, userid);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {

            NewAdbooking.classesoracle.Contract bindproduct = new NewAdbooking.classesoracle.Contract();
            ex1 = bindproduct.productbind(client, compcode, userid);
        }
        else
        {
            NewAdbooking.classmysql.Contract bindproduct = new NewAdbooking.classmysql.Contract();
            ex1 = bindproduct.productbind(client, compcode, userid);
        }
        return ex1;
    }

    [Ajax.AjaxMethod]
    public DataSet bind_subagency(string agency, string compcode, string userid)
    {
        DataSet ex = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindsub = new NewAdbooking.Classes.Contract();
            ex = bindsub.bindsubagency(agency, compcode, userid);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract bindsub = new NewAdbooking.classesoracle.Contract();
            ex = bindsub.bindsubagency(agency, compcode, userid);
        }
        else
        {
            NewAdbooking.classmysql.Contract bindsub = new NewAdbooking.classmysql.Contract();
            ex = bindsub.bindsubagency(agency, compcode, userid);
        }
        return ex;

    }

    [Ajax.AjaxMethod]
    public DataSet chkvalidateintable(string tablename, string columnname, string value)
    {
        DataSet executequery1 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.tv_booking_transaction execute1 = new NewAdbooking.Classes.tv_booking_transaction();
            executequery1 = execute1.chkvalidateintable(tablename, columnname, value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.tv_booking_transaction execute1 = new NewAdbooking.classesoracle.tv_booking_transaction();
            executequery1 = execute1.chkvalidateintable(tablename, columnname, value);
        }
        else
        {
            NewAdbooking.classmysql.Contract execute1 = new NewAdbooking.classmysql.Contract();
            executequery1 = execute1.chkvalidateintable(tablename, columnname, value);

        }
        return executequery1;
    }
    public void bindStatus()
    {
        ListItem li1;
        li1 = new ListItem();
        li1.Text = "Select RO Status";
        li1.Value = "0";//objDataSet.Tables[0].Rows[i].ItemArray[0].ToString();
        li1.Selected = true;
        drprostatus.Items.Add(li1);
        li1 = new ListItem();
        li1.Value = "1";
        li1.Text = "Confirm";
        drprostatus.Items.Add(li1);
        li1 = new ListItem();
        li1.Value = "2";
        li1.Text = "Reservation";
        drprostatus.Items.Add(li1);

    }
    [Ajax.AjaxMethod]
    public DataSet query_contract(string ddealcode, string ddealname, string dagencycode, string dsubagency, string dclient, string dproduct, string dreprest, string compcode, string userid, string ddealtype, string quotation)
    {
        DataSet excutequery = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract execute = new NewAdbooking.Classes.Contract();
            excutequery = execute.querycontract(ddealcode, ddealname, dagencycode, dsubagency, dclient, dproduct, dreprest, compcode, userid, ddealtype, quotation);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract execute = new NewAdbooking.classesoracle.Contract();
            excutequery = execute.querycontract(ddealcode, ddealname, dagencycode, dsubagency, dclient, dproduct, dreprest, compcode, userid, ddealtype, quotation);
        }
        else
        {
            NewAdbooking.classmysql.Contract execute = new NewAdbooking.classmysql.Contract();
            excutequery = execute.querycontract(ddealcode, ddealname, dagencycode, dsubagency, dclient, dproduct, dreprest, compcode, userid, ddealtype, quotation, "", "", "");
        }
        return excutequery;
    }

    [Ajax.AjaxMethod]
    public DataSet chk_incontractdetail(string DealNo, string compcode, string userid)
    {
        DataSet dl = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract chkcontractdetail = new NewAdbooking.Classes.Contract();
            dl = chkcontractdetail.chkincontractdetail(DealNo, compcode, userid);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract chkcontractdetail = new NewAdbooking.classesoracle.Contract();
            dl = chkcontractdetail.chkincontractdetail(DealNo, compcode, userid);
        }
        else
        {
            NewAdbooking.classmysql.Contract chkcontractdetail = new NewAdbooking.classmysql.Contract();
            dl = chkcontractdetail.chkincontractdetail(DealNo, compcode, userid);
        }
        return dl;
    }

    [Ajax.AjaxMethod]
    public DataSet modifycontact(string DealNo, string dealname, string agencycode, string subagencycode, string clientname, string product, string validfromdate, string validtill, string representative, string compcode, string userid, string totalvalue, string totalvolume, string currencys, string teamname, string dealtype, string adtype, string remarks, string executive_var, string retainer_var, string contdate_var, string closedate_var, string servicetax_var, string caption_var, string paymode_var, string b2b, string chkmulti, string chkseq, string seqno, string chkparti, string indus, string induspro, string dealon, string attach1, string transition, string centername, string printcenter, string rono, string rodate, string rostatus, string rcptno, string rcptcurr)
    {
        DataSet dz = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract modifyinto = new NewAdbooking.Classes.Contract();
            dz = modifyinto.modifycontact(DealNo, dealname, agencycode, subagencycode, clientname, product, validfromdate, validtill, representative, compcode, userid, totalvalue, totalvolume, currencys, teamname, dealtype, adtype, remarks, executive_var, retainer_var, contdate_var, closedate_var, servicetax_var, caption_var, paymode_var, b2b, chkmulti, chkseq, seqno, chkparti, indus, induspro, dealon, attach1, transition, centername, printcenter, rono, rodate, rostatus, rcptno, rcptcurr);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract modifyinto = new NewAdbooking.classesoracle.Contract();
            dz = modifyinto.modifycontact(DealNo, dealname, agencycode, subagencycode, clientname, product, validfromdate, validtill, representative, compcode, userid, totalvalue, totalvolume, currencys, teamname, dealtype, adtype, remarks, executive_var, retainer_var, contdate_var, closedate_var, servicetax_var, caption_var, paymode_var, b2b, chkmulti, chkseq, seqno, chkparti, indus, induspro, dealon, attach1, transition, centername, printcenter, rono, rodate, rostatus, rcptno, rcptcurr);
        }
        else
        {
            NewAdbooking.classmysql.Contract modifyinto = new NewAdbooking.classmysql.Contract();
            dz = modifyinto.modifycontact(DealNo, dealname, agencycode, subagencycode, clientname, product, validfromdate, validtill, representative, compcode, userid, totalvalue, totalvolume, currencys, teamname, dealtype, adtype, remarks, executive_var, retainer_var, contdate_var, closedate_var, servicetax_var, caption_var, paymode_var, b2b, chkmulti, chkseq, seqno, chkparti, indus, induspro, dealon, attach1, transition, centername, printcenter, rono, rodate, rostatus, rcptno, rcptcurr);
        }
        return dz;
    }

    [Ajax.AjaxMethod]
    public DataSet deal_modifychk(string dealno, string deal_name, string compcode, string deal_type)
    {
        DataSet dsz = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract chks = new NewAdbooking.Classes.Contract();
            dsz = chks.dealmodifychk(dealno, deal_name, compcode, deal_type);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract chks = new NewAdbooking.classesoracle.Contract();
            dsz = chks.dealmodifychk(dealno, deal_name, compcode, deal_type);
        }
        else
        {
            NewAdbooking.classmysql.Contract chks = new NewAdbooking.classmysql.Contract();
            dsz = chks.dealmodifychk(dealno, deal_name, compcode, deal_type);
        }
        return dsz;
    }

    [Ajax.AjaxMethod]
    public void insert_detail(string dealno12, string advcat, string publication, string drpsuppliment, string drpedition, string bookedfor, string color, string cardrate, string dealrate, string premium, string cardprem, string dealprem, string volbilled, string voldisc, string valfrom, string valto, string uom, string package, string compcode, string userid, string totalrate, string currency, string ratecode, string flag, string quantity, string weight, string free, string cyop, string deviation, string remarks, string sizefrom, string sizeto, string disctype, string discper, string insertion, string dayname, string comm_allow, string deal_start, string incentive)
    {
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract insert = new NewAdbooking.Classes.Contract();
            insert.insertdetail(dealno12, advcat, publication, drpsuppliment, drpedition, bookedfor, color, cardrate, dealrate, premium, cardprem, dealprem, volbilled, voldisc, valfrom, valto, uom, package, compcode, userid, totalrate, currency, ratecode, flag, quantity, weight, free, cyop, deviation, remarks, sizefrom, sizeto, disctype, discper, insertion, dayname, comm_allow, deal_start, incentive);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract insert = new NewAdbooking.classesoracle.Contract();
            insert.insertdetail(dealno12, advcat, publication, drpsuppliment, drpedition, bookedfor, color, cardrate, dealrate, premium, cardprem, dealprem, volbilled, voldisc, valfrom, valto, uom, package, compcode, userid, totalrate, currency, ratecode, flag, quantity, weight, free, cyop, deviation, remarks, sizefrom, sizeto, disctype, discper, insertion, dayname, comm_allow, deal_start, incentive);
        }
        else
        {
            NewAdbooking.classmysql.Contract insert = new NewAdbooking.classmysql.Contract();
            insert.insertdetail(dealno12, advcat, publication, drpsuppliment, drpedition, bookedfor, color, cardrate, dealrate, premium, cardprem, dealprem, volbilled, voldisc, valfrom, valto, uom, package, compcode, userid, totalrate, currency, ratecode, flag, quantity, weight, free, cyop, deviation);
        }

    }


    [Ajax.AjaxMethod]
    public DataSet get_buttonpermission(string compcode, string userid, string formname)
    {
        DataSet butt = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.classlibraryforbutton getpermission = new NewAdbooking.Classes.classlibraryforbutton();
            butt = getpermission.getbuttonpermission(compcode, userid, formname);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.classlibraryforbutton getpermission = new NewAdbooking.classesoracle.classlibraryforbutton();
            butt = getpermission.getbuttonpermission(compcode, userid, formname);
        }
        else
        {
            NewAdbooking.classmysql.classlibraryforbutton getpermission = new NewAdbooking.classmysql.classlibraryforbutton();
            butt = getpermission.getbuttonpermission(compcode, userid, formname);
        }
        return butt;
    }

    [Ajax.AjaxMethod]
    public void insert_contact(string DealNo, string dealname, string agencycode, string subagencycode, string clientname, string product, string validfromdate, string validtill, string representative, string compcode, string userid, string totalvalue, string totalvolume, string currencys, string teamname, string dealtype, string adtype, string remarks, string executive_var, string retainer_var, string contdate_var, string closedate_var, string servicetax_var, string caption_var, string paymode_var, string b2b, string chkmulti, string chkseq, string seqno, string chkparti, string indus, string induspro, string dealon, string attach1, string transition, string centername, string printcenter, string rono, string rodate, string rostatus, string rcptno, string rcptcurr, string quotation)
    {
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract insertinto = new NewAdbooking.Classes.Contract();
            insertinto.insertcontact(DealNo, dealname, agencycode, subagencycode, clientname, product, validfromdate, validtill, representative, compcode, userid, totalvalue, totalvolume, currencys, teamname, dealtype, adtype, remarks, executive_var, retainer_var, contdate_var, closedate_var, servicetax_var, caption_var, paymode_var, b2b, chkmulti, chkseq, seqno, chkparti, indus, induspro, dealon, attach1, transition, centername, printcenter, rono, rodate, rostatus, rcptno, rcptcurr, quotation);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract insertinto = new NewAdbooking.classesoracle.Contract();
            insertinto.insertcontact(DealNo, dealname, agencycode, subagencycode, clientname, product, validfromdate, validtill, representative, compcode, userid, totalvalue, totalvolume, currencys, teamname, dealtype, adtype, remarks, executive_var, retainer_var, contdate_var, closedate_var, servicetax_var, caption_var, paymode_var, b2b, chkmulti, chkseq, seqno, chkparti, indus, induspro, dealon, attach1, transition, centername, printcenter, rono, rodate, rostatus, rcptno, rcptcurr, quotation);
        }
        else
        {
            NewAdbooking.classmysql.Contract insertinto = new NewAdbooking.classmysql.Contract();
            insertinto.insertcontact(DealNo, dealname, agencycode, subagencycode, clientname, product, validfromdate, validtill, representative, compcode, userid, totalvalue, totalvolume, currencys, teamname, dealtype, adtype, remarks, executive_var, retainer_var, contdate_var, closedate_var, servicetax_var, caption_var, paymode_var, b2b, chkmulti, chkseq, seqno, chkparti, indus, induspro, dealon, attach1, transition, centername, printcenter, rono, rodate, rostatus, rcptno, rcptcurr, quotation);
        }
    }

    [Ajax.AjaxMethod]
    public DataSet chk_uniquedetail(string advcat, string package, string ratecode, string color, string compcode, string day1)
    {
        DataSet da = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract chkfromdet = new NewAdbooking.Classes.Contract();
            da = chkfromdet.chkuniquedetail(advcat, package, ratecode, color, compcode, "save", day1);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract chkfromdet = new NewAdbooking.classesoracle.Contract();
            da = chkfromdet.chkuniquedetail(advcat, package, ratecode, color, compcode, "save", day1);
        }
        else
        {
            NewAdbooking.classmysql.Contract chkfromdet = new NewAdbooking.classmysql.Contract();
            da = chkfromdet.chkuniquedetail(advcat, package, ratecode, color, compcode, "save");
        }
        return da;
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet getvalueInsertSession()
    {
        return (DataSet)Session["valueinsert"];
    }

    [Ajax.AjaxMethod]
    public DataSet chk_unique(string agencycode, string clientname, string product, string compcode, string adtype)
    {
        /////this is to chk the duplicacy for contract master
        DataSet de = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract chkfrommast = new NewAdbooking.Classes.Contract();
            de = chkfrommast.chkunique(agencycode, clientname, product, compcode, adtype, "save");
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract chkfrommast = new NewAdbooking.classesoracle.Contract();
            de = chkfrommast.chkunique(agencycode, clientname, product, compcode, adtype, "save");
        }
        else
        {
            NewAdbooking.classmysql.Contract chkfrommast = new NewAdbooking.classmysql.Contract();
            de = chkfrommast.chkunique(agencycode, clientname, product, compcode, adtype, "save");
        }
        return de;
    }

    [Ajax.AjaxMethod]
    public DataSet Contract_Code(string DealNo, string compcode, string dealname, string dealtype)
    {
        DataSet ds3 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract chkcontractcode = new NewAdbooking.Classes.Contract();
            ds3 = chkcontractcode.contractcode(DealNo, compcode, dealname, dealtype);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract chkcontractcode = new NewAdbooking.classesoracle.Contract();
            ds3 = chkcontractcode.contractcode(DealNo, compcode, dealname, dealtype);
        }
        else
        {
            NewAdbooking.classmysql.Contract chkcontractcode = new NewAdbooking.classmysql.Contract();
            ds3 = chkcontractcode.contractcode(DealNo, compcode, dealname, dealtype);
        }
        return ds3;
    }

    [Ajax.AjaxMethod]
    public DataSet chk_contractdetail(string DealNo, string compcode, string userid)
    {
        DataSet ds1 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract chkcontractdetail = new NewAdbooking.Classes.Contract();
            ds1 = chkcontractdetail.chkincontractdetail(DealNo, compcode, userid);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract chkcontractdetail = new NewAdbooking.classesoracle.Contract();
            ds1 = chkcontractdetail.chkincontractdetail(DealNo, compcode, userid);
        }
        else
        {
            NewAdbooking.classmysql.Contract chkcontractdetail = new NewAdbooking.classmysql.Contract();
            ds1 = chkcontractdetail.chkincontractdetail(DealNo, compcode, userid);
        }
        return ds1;
    }

    [Ajax.AjaxMethod]
    public DataSet autogenerateID(string compcode, string userid, string auto)
    {
        DataSet da = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract autocode = new NewAdbooking.Classes.Contract();
            da = autocode.autogenrated(compcode, userid, auto);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract autocode = new NewAdbooking.classesoracle.Contract();
            da = autocode.autogenrated(compcode, userid, auto);
        }
        else
        {
            NewAdbooking.classmysql.Contract autocode = new NewAdbooking.classmysql.Contract();
            da = autocode.autogenrated(compcode, userid, auto);
        }
        return da;
    }

    [Ajax.AjaxMethod]
    public DataSet agencyChange(string compcode, string userid, string agency)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.Contract bindsub = new NewAdbooking.Classes.Contract();
            ds = bindsub.bindsubagency(agency, compcode, userid);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract bindsub = new NewAdbooking.classesoracle.Contract();
            ds = bindsub.bindsubagency(agency, compcode, userid);
        }
        else
        {
            NewAdbooking.classmysql.Contract bindsub = new NewAdbooking.classmysql.Contract();
            ds = bindsub.bindsubagency(agency, compcode, userid);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet client_Change(string client, string compcode, string userid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindproduct = new NewAdbooking.Classes.Contract();
            ds = bindproduct.productbind(client, compcode, userid);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract bindproduct = new NewAdbooking.classesoracle.Contract();
            ds = bindproduct.productbind(client, compcode, userid);
        }
        else
        {
            NewAdbooking.classmysql.Contract bindproduct = new NewAdbooking.classmysql.Contract();
            ds = bindproduct.productbind(client, compcode, userid);
        }
        return ds;
    }

    [Ajax.AjaxMethod]
    public DataSet teamName(string compcode, string userid, string name)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract exec = new NewAdbooking.Classes.Contract();
            ds = exec.bindexec(compcode, userid, name);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract exec = new NewAdbooking.classesoracle.Contract();
            ds = exec.bindexec(compcode, userid, name);
        }
        else
        {
            NewAdbooking.classmysql.Contract exec = new NewAdbooking.classmysql.Contract();
            ds = exec.bindexec(compcode, userid, name);
        }
        return ds;
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet bindagencyname(string compcode, string userid, string agency)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster bindagenname = new NewAdbooking.Classes.BookingMaster();
            ds = bindagenname.bindagency(compcode, userid, agency, "0");
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster bindagenname = new NewAdbooking.classesoracle.BookingMaster();
            //if (Session["FILTER"].ToString() == "D")
            //{
            //    ds = bindagenname.bindagency(compcode, userid, agency, Session["revenue"].ToString());
            //}
            //else
            //{
            ds = bindagenname.bindagency(compcode, userid, agency, "0");
            //}
        }
        else
        {
            NewAdbooking.classmysql.Contract bindagenname = new NewAdbooking.classmysql.Contract();
            //if (Session["FILTER"].ToString() == "D")
            //{
            //    ds = bindagenname.bindagency(compcode, userid, agency, Session["revenue"].ToString());
            //}
            //else
            //{
            ds = bindagenname.bindagency(compcode, userid, agency, "0");
            //}
        }
        return ds;



    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public string addclientname(string page, string datetime, string value)
    {
        DataSet dag = new DataSet();
        string nameadd = "";
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Master getagenameaddress = new NewAdbooking.Classes.Master();

            dag = getagenameaddress.getClientNameadd(page, Session["compcode"].ToString(), value, "");
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Master getagenameaddress = new NewAdbooking.classesoracle.Master();

            dag = getagenameaddress.getClientNameadd(page, Session["compcode"].ToString(), value, "");
        }
        else
        {
            NewAdbooking.classmysql.Contract getagenameaddress = new NewAdbooking.classmysql.Contract();

            dag = getagenameaddress.getClientNameadd(page, Session["compcode"].ToString(), value, "");

            //NewAdbooking.classmysql.BookingMaster getagenameaddress = new NewAdbooking.classmysql.BookingMaster();

            //dag = getagenameaddress.getClientNameadd(name, Session["compcode"].ToString(), value, date, Session["dateformat"].ToString());

        }

        if (dag.Tables[0].Rows.Count > 0)
        {
            string clientname = dag.Tables[0].Rows[0].ItemArray[1].ToString();
            string code = dag.Tables[0].Rows[0].ItemArray[0].ToString();
            string address = dag.Tables[0].Rows[0].ItemArray[2].ToString();
            if (address == "null")
                address = "";
            //string agentypename = dag.Tables[1].Rows[0].ItemArray[0].ToString();
            //string agenstatus = dag.Tables[2].Rows[0].ItemArray[0].ToString();
            //string credit = dag.Tables[3].Rows[0].ItemArray[0].ToString();
            //string rategroup = dag.Tables[4].Rows[0].ItemArray[0].ToString();
            //string comm = dag.Tables[5].Rows[0].ItemArray[0].ToString();
            //string pay = dag.Tables[6].Rows[0].ItemArray[0].ToString();

            nameadd = clientname + "(" + code + ")" + "+" + address;
            //Response.Write(nameadd);
            //Response.End();


        }
        return nameadd;



    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet bindExec(string compcode, string execname)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster clsbooking = new NewAdbooking.Classes.BookingMaster();

            ds = clsbooking.getExec(compcode, execname, "0");

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster clsbooking = new NewAdbooking.classesoracle.BookingMaster();

            ds = clsbooking.getExec(compcode, execname, "0", "0");


        }
        else
        {
            NewAdbooking.classmysql.BookingMaster clsbooking = new NewAdbooking.classmysql.BookingMaster();

            ds = clsbooking.getExec(compcode, execname, "0", "0");

        }
        return ds;

    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet bindRetainer(string compcode, string reatinername, string agcode)
    {
        DataSet dsret = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster getRetain = new NewAdbooking.Classes.BookingMaster();

            dsret = getRetain.getretainer(compcode, reatinername);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster getRetain = new NewAdbooking.classesoracle.BookingMaster();
            dsret = getRetain.getretainer(compcode, reatinername.ToUpper(), "0");
        }
        else
        {
            NewAdbooking.classmysql.BookingMaster getRetain = new NewAdbooking.classmysql.BookingMaster();
            dsret = getRetain.getretainer(compcode, reatinername, "0");
        }
        return dsret;
    }
    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet bindclientname(string compcode, string client)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster clsbooking = new NewAdbooking.Classes.BookingMaster();
            ds = clsbooking.getClientName(compcode, client);
        }

        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            if (Session["FILTER"].ToString() == "D")
            {
                NewAdbooking.classesoracle.BookingMaster clsbooking = new NewAdbooking.classesoracle.BookingMaster();
                ds = clsbooking.getClientName(compcode, client, Session["revenue"].ToString());
            }
            else
            {
                NewAdbooking.classesoracle.BookingMaster clsbooking = new NewAdbooking.classesoracle.BookingMaster();
                ds = clsbooking.getClientName(compcode, client, "0");
            }
        }

        else
        {
            NewAdbooking.classmysql.Contract clsbooking = new NewAdbooking.classmysql.Contract();
            ds = clsbooking.getClientName(compcode, client, "0", Session["userid"].ToString());
        }
        return ds;
    }
    public void bindpayMode()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.pop radiobind = new NewAdbooking.Classes.pop();

            ds = radiobind.filldatapay(hiddencompcode.Value, hiddenuserid.Value);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.pop radiobind = new NewAdbooking.classesoracle.pop();
            ds = radiobind.filldatapay(hiddencompcode.Value, hiddenuserid.Value);
        }
        else
        {
            NewAdbooking.classmysql.pop radiobind = new NewAdbooking.classmysql.pop();
            ds = radiobind.filldatapay(hiddencompcode.Value, hiddenuserid.Value);
        }

        ListItem ls = new ListItem();
        ls.Text = "Select";
        ls.Value = "0";
        drppaymenttype.Items.Add(ls);

        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ls = new ListItem();
            ls.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            ls.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            drppaymenttype.Items.Add(ls);


        }
    }
    private void bindServiceTax()
    {
        ListItem li;
        li = new ListItem();
        li.Text = "NO";
        li.Value = "N";
        drpservicetax.Items.Add(li);
        li = new ListItem();
        li.Text = "YES";
        li.Value = "Y";
        //state = ds.Tables[0].Rows[i].ItemArray[2].ToString();
        drpservicetax.Items.Add(li);
    }
    [Ajax.AjaxMethod]
    public DataSet bindcolor_detail(string compcode, string userid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindcolor = new NewAdbooking.Classes.Contract();

            ds = bindcolor.colorbind(compcode, userid);
        }

        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract bindcolor = new NewAdbooking.classesoracle.Contract();

                ds = bindcolor.colorbind(compcode, userid);
            }
            else
            {
                NewAdbooking.classmysql.Contract bindcolor = new NewAdbooking.classmysql.Contract();

                ds = bindcolor.colorbind(compcode, userid);

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindadtype_detail(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.CombinationMaster bind = new NewAdbooking.Classes.CombinationMaster();
            ds = bind.adtypbind(compcode);
        }

        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.CombinationMaster bind = new NewAdbooking.classesoracle.CombinationMaster();
            ds = bind.adtypbind(compcode);
        }
        else
        {
            NewAdbooking.classmysql.CombinationMaster bind = new NewAdbooking.classmysql.CombinationMaster();
            ds = bind.adtypbind(compcode);
        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet binduom_A_detail(string compcode, string adType, string userid)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.uombind(compcode, adType);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.uombind(compcode, userid, adType);
            }
            else
            {
                NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                ds = binduom.uombind(compcode, userid, adType);

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindpackage_A_detail(string compcode, string adtype, string channel)
    {

        DataSet ds = new DataSet();

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {


            NewAdbooking.Classes.Contract bindopackage = new NewAdbooking.Classes.Contract();

            ds = bindopackage.TV_packagebind(compcode, adtype, channel);
        }

        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract bindopackage = new NewAdbooking.classesoracle.Contract();

                ds = bindopackage.TV_packagebind(compcode, adtype, channel);

            }
            else
            {
                NewAdbooking.classmysql.Contract bindopackage = new NewAdbooking.classmysql.Contract();

                ds = bindopackage.packagebind(compcode, adtype);


            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindpremium_A_detail(string compcode, string adtype)
    {
        DataSet ds1 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.RateMaster bindrate = new NewAdbooking.Classes.RateMaster();
            ds1 = bindrate.premiumbind(compcode, adtype);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.RateMaster bindrate = new NewAdbooking.classesoracle.RateMaster();
            ds1 = bindrate.premiumbind(compcode, adtype);
        }
        else
        {
            NewAdbooking.classmysql.RateMaster bindrate = new NewAdbooking.classmysql.RateMaster();
            ds1 = bindrate.premiumbind(compcode, adtype);
        }
        return ds1;
    }
    [Ajax.AjaxMethod]
    public DataSet getrateforcontract_Elec(string compcode_p, string unit_p, string channel_p, string location_p, string adtype_p, string ratetype, string day_p, string category_p, string btb_p, string fct_p, string validfrom_p, string validto_p, string package_p, string valufrom_p, string valueto_p, string disctype_p, string disper, string premium, string cardprem_p, string contprem_p, string minsize_p, string maxsize_p, string progtype_p, string progname_p, string commallow_p, string ratecode_p, string source_p, string dateformat, string currency_p, string contractrate_p, string agencycode_p, string subagencycode)
    {
        DataSet dcon = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract getpkgrate = new NewAdbooking.Classes.Contract();
            dcon = getpkgrate.getrateforcontract_Elec(compcode_p, unit_p, channel_p, location_p, adtype_p, ratetype, day_p, category_p, btb_p, fct_p, validfrom_p, validto_p, package_p, valufrom_p, valueto_p, disctype_p, disper, premium, cardprem_p, contprem_p, minsize_p, maxsize_p, progtype_p, progname_p, commallow_p, ratecode_p, source_p, dateformat, currency_p, contractrate_p, agencycode_p, subagencycode);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract getpkgrate = new NewAdbooking.classesoracle.Contract();
                dcon = getpkgrate.getrateforcontract_Elec(compcode_p, unit_p, channel_p, location_p, adtype_p, ratetype, day_p, category_p, btb_p, fct_p, validfrom_p, validto_p, package_p, valufrom_p, valueto_p, disctype_p, disper, premium, cardprem_p, contprem_p, minsize_p, maxsize_p, progtype_p, progname_p, commallow_p, ratecode_p, source_p, dateformat, currency_p, contractrate_p, agencycode_p, subagencycode);
            }
        return dcon;
    }

    [Ajax.AjaxMethod]
    public DataSet getrateforcontract_detail(string adcat, string pkgcode, string color, string currency, string uom, string advtype, string validfrom, string validto, string compcode, string dateformat, string premium)
    {
        DataSet dcon = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract getpkgrate = new NewAdbooking.Classes.Contract();
            dcon = getpkgrate.getrateforcontract(adcat, pkgcode, color, currency, uom, advtype, validfrom, validto, compcode, dateformat, premium);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract getpkgrate = new NewAdbooking.classesoracle.Contract();
                dcon = getpkgrate.getrateforcontract(adcat, pkgcode, color, currency, uom, advtype, validfrom, validto, compcode, dateformat, premium);
            }
            else
            {
                NewAdbooking.classmysql.Contract getpkgrate = new NewAdbooking.classmysql.Contract();
                dcon = getpkgrate.getrateforcontract(adcat, pkgcode, color, currency, uom, advtype, validfrom, validto, compcode);
            }
        return dcon;
    }

    [Ajax.AjaxMethod]
    public DataSet bindratecode_detail(string compcode, string adtype)
    {

        DataSet dx = new DataSet();

        string contract = "contract";

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.Contract bindrate = new NewAdbooking.Classes.Contract();

            dx = bindrate.ratebind(compcode, adtype);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract bindrate = new NewAdbooking.classesoracle.Contract();

                dx = bindrate.ratebind(compcode, adtype);

            }
            else
            {
                NewAdbooking.classmysql.BookingMaster bindrate = new NewAdbooking.classmysql.BookingMaster();

                dx = bindrate.ratebind(contract, compcode);


            }
        return dx;
    }
    [Ajax.AjaxMethod]
    public DataSet bindcurrency_detail(string compcode, string userid)
    {

        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract curr = new NewAdbooking.Classes.Contract();

            ds = curr.currencybind(compcode, userid);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract curr = new NewAdbooking.classesoracle.Contract();

                ds = curr.currencybind(compcode, userid);

            }
            else
            {
                NewAdbooking.classmysql.Contract curr = new NewAdbooking.classmysql.Contract();

                ds = curr.currencybind(compcode, userid);


            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet getPremPage_detail(string premcode)
    {
        DataSet ds = new DataSet();
        string id = "";
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster objUpdatePage_Booking = new NewAdbooking.Classes.BookingMaster();
            ds = objUpdatePage_Booking.getPremPage(premcode, id);
            // return ds;
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster objPagePremium = new NewAdbooking.classesoracle.BookingMaster();
            ds = objPagePremium.getPremPage(premcode, id);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "mysql")
        {
            NewAdbooking.classmysql.BookingMaster objPagePremium = new NewAdbooking.classmysql.BookingMaster();
            ds = objPagePremium.getPremPage(premcode, id);

        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindadvcategory_A_detail(string adtypeval, string compcode)
    {
        DataSet ds = new DataSet();

        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.Contract bindadvcate = new NewAdbooking.Classes.Contract();

            ds = bindadvcate.bindadvcategory(compcode, adtypeval);
        }

        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract bindadvcate = new NewAdbooking.classesoracle.Contract();

                ds = bindadvcate.bindadvcategory(compcode, adtypeval);

            }
            else
            {
                NewAdbooking.classmysql.Contract bindadvcate = new NewAdbooking.classmysql.Contract();
                ds = bindadvcate.bindadvcategory(compcode, adtypeval);
            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindLocation_detail(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindLocation_TV(compcode);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindLocation_TV(compcode);
            }
            else
            {
                //  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                // ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString());

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindChannel_detail(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindChannel_TV(compcode);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindChannel_TV(compcode);
            }
            else
            {
                //  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                // ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString());

            }
        return ds;

    }
    [Ajax.AjaxMethod]
    public DataSet bindBTB_detail(string compcode, string channel)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindBTB_TV(compcode, channel);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindBTB_TV(compcode, channel);
            }
            else
            {
                //  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                // ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString());

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindAdvType_TV_detail(string compcode, string channel)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindAdvType_TV(compcode, channel);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindAdvType_TV(compcode, channel);
            }
            else
            {
                //  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                // ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString());

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindRos_detail(string compcode, string btbcode, string channel)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindROS_TV(compcode, btbcode, channel);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindROS_TV(compcode, btbcode, channel);
            }
            else
            {
                //  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                // ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString());

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindProgram_detail(string compcode, string programtype, string btbcode, string channel_p)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindProgram_TV(compcode, programtype, btbcode, channel_p);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindProgram_TV(compcode, programtype, btbcode, channel_p);
            }
            else
            {
                //  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                // ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString());

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindProgramType_detail(string compcode, string channel)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindProgramType_TV(compcode, channel);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindProgramType_TV(compcode, channel);
            }
            else
            {
                //  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                // ds = binduom.uombind(Session["compcode"].ToString(), Session["userid"].ToString());

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindSource_TV_Contract(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract insert = new NewAdbooking.Classes.Contract();
            ds = insert.bindSource_TV(compcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract insert = new NewAdbooking.classesoracle.Contract();
            ds = insert.bindSource_TV(compcode);
        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet bindGridDetails_Contract(string compcode, string dealcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract insert = new NewAdbooking.Classes.Contract();
            ds = insert.bindGridDetails_Contract(compcode, dealcode, "");
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract insert = new NewAdbooking.classesoracle.Contract();
            ds = insert.bindGridDetails_Contract(compcode, dealcode, "");
        }
        else
        {
            NewAdbooking.classmysql.Contract insert = new NewAdbooking.classmysql.Contract();
            ds = insert.bindGridDetails_Contract(compcode, dealcode, "");
        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet tv_paid_balance_cal(string pcomp_code, string punit_code, string pchannel, string plocation_code, string pad_type, string pdealno, string pbtb_code, string ppaid_bonus)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract insert = new NewAdbooking.classesoracle.Contract();
            ds = insert.tv_paid_balance_cal(pcomp_code, punit_code, pchannel, plocation_code, pad_type, pdealno, pbtb_code, ppaid_bonus);

        }
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract insert = new NewAdbooking.Classes.Contract();
            ds = insert.tv_paid_balance_cal(pcomp_code, punit_code, pchannel, plocation_code, pad_type, pdealno, pbtb_code, ppaid_bonus);

        }
        return ds;
    }
    [Ajax.AjaxMethod]
    public void saveElecDetails(string dealno, string channel, string location, string advtype, string paidbonus, string progname, string btb, string ros, string day, string fct, string package, string valuefrom, string valueto, string disctype, string discper, string premium, string contpremium, string contrate, string cardrate, string deviation, string cardprem, string minsize, string maxsize, string currency, string dealstart, string progtype, string category, string commallow, string remarks, string ratecode, string discon, string sponfrom, string sponto, string compcode, string userid, string username, string incentive, string approved, string unit, string seqno, string id, string ratetype, string dateformat, string source, string totalval, string sectioncode, string resourceno, string localtotvalue, string convrate,string slot)
    {
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract insert = new NewAdbooking.Classes.Contract();
            insert.saveElecDetailsProc(dealno, channel, location, advtype, paidbonus, progname, btb, ros, day, fct, package, valuefrom, valueto, disctype, discper, premium, contpremium, contrate, cardrate, deviation, cardprem, minsize, maxsize, currency, dealstart, progtype, category, commallow, remarks, ratecode, discon, sponfrom, sponto, compcode, userid, username, incentive, approved, unit, seqno, id, ratetype, dateformat, source, totalval, sectioncode, resourceno, localtotvalue, convrate,slot);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract insert = new NewAdbooking.classesoracle.Contract();
            insert.saveElecDetailsProc(dealno, channel, location, advtype, paidbonus, progname, btb, ros, day, fct, package, valuefrom, valueto, disctype, discper, premium, contpremium, contrate, cardrate, deviation, cardprem, minsize, maxsize, currency, dealstart, progtype, category, commallow, remarks, ratecode, discon, sponfrom, sponto, compcode, userid, username, incentive, approved, unit, seqno, id, ratetype, dateformat, source, totalval, sectioncode, resourceno, localtotvalue, convrate,slot);
        }
        else
        {
            //  NewAdbooking.classmysql.Contract insert = new NewAdbooking.classmysql.Contract();
            //  insert.insertdetail(dealno12, advcat, publication, drpsuppliment, drpedition, bookedfor, color, cardrate, dealrate, premium, cardprem, dealprem, volbilled, voldisc, valfrom, valto, uom, package, compcode, userid, totalrate, currency, ratecode, flag, quantity, weight, free, cyop, deviation);
        }
    }
    public void pop_industry()
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.productcategory Ind_Name = new NewAdbooking.Classes.productcategory();
            ds = Ind_Name.bind_industry(Session["compcode"].ToString());

        }

        else

            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.productcategory Ind_Name = new NewAdbooking.classesoracle.productcategory();
                ds = Ind_Name.bind_industry(Session["compcode"].ToString());

            }
            else
            {
                NewAdbooking.classmysql.productcategory Ind_Name = new NewAdbooking.classmysql.productcategory();
                ds = Ind_Name.bind_industry(Session["compcode"].ToString());

            }

        ListItem li1;
        drpindustry.Items.Clear();
        li1 = new ListItem();
        li1.Text = "---Select Industry---";
        li1.Value = "0";
        li1.Selected = true;
        drpindustry.Items.Add(li1);
        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Value = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Text = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drpindustry.Items.Add(li);
        }
    }
    public void bindProductMain(string compcode)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindProduct(compcode, "");
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindProduct(compcode, "");
            }
            else
            {
                NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                ds = binduom.bindProduct(compcode, "");
            }

        ListItem li1;
        drpproduct.Items.Clear();
        li1 = new ListItem();
        li1.Text = "---Select---";
        li1.Value = "0";
        li1.Selected = true;
        drpproduct.Items.Add(li1);
        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            drpproduct.Items.Add(li);
        }
    }
    [Ajax.AjaxMethod]
    public DataSet bindProduct_A(string compcode, string industry)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.bindProduct(compcode, industry);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.bindProduct(compcode, industry);
            }
            else
            {
                  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                  ds = binduom.bindProduct(compcode, industry);

            }
        return ds;
    }
    [Ajax.AjaxMethod]
    public void savecontractdetail_new(string dealno, string adtype, string hue, string uom, string package, string category, string premium, string cardprem, string contractprem, string contrate, string cardrate, string deviation, string disctype, string discper, string discon, string minsize, string maxsize, string valuefrom, string valueto, string day, string insertion, string commallow, string dealstart, string currency, string ratecode, string totalrate, string incentive, string remarks, string approved, string compcode, string userid, string id, string position, string contractamount, string contractpositionprem, string positionpremdisc,string toinsertion,string barter)
    {
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract insert = new NewAdbooking.Classes.Contract();
            insert.savecontractdetail(dealno, adtype, hue, uom, package, category, premium, cardprem, contractprem, contrate, cardrate, deviation, disctype, discper, discon, minsize, maxsize, valuefrom, valueto, day, insertion, commallow, dealstart, currency, ratecode, totalrate, incentive, remarks, approved, compcode, userid, id, position, contractamount, contractpositionprem, positionpremdisc, toinsertion, barter);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract insert = new NewAdbooking.classesoracle.Contract();
            insert.savecontractdetail(dealno, adtype, hue, uom, package, category, premium, cardprem, contractprem, contrate, cardrate, deviation, disctype, discper, discon, minsize, maxsize, valuefrom, valueto, day, insertion, commallow, dealstart, currency, ratecode, totalrate, incentive, remarks, approved, compcode, userid, id, position, contractamount, contractpositionprem, positionpremdisc,toinsertion,barter);
        }
        else
        {
              NewAdbooking.classmysql.Contract insert = new NewAdbooking.classmysql.Contract();
             // insert.insertdetail(dealno12, advcat, publication, drpsuppliment, drpedition, bookedfor, color, cardrate, dealrate, premium, cardprem, dealprem, volbilled, voldisc, valfrom, valto, uom, package, compcode, userid, totalrate, currency, ratecode, flag, quantity, weight, free, cyop, deviation);
              insert.savecontractdetail(dealno, adtype, hue, uom, package, category, premium, cardprem, contractprem, contrate, cardrate, deviation, disctype, discper, discon, minsize, maxsize, valuefrom, valueto, day, insertion, commallow, dealstart, currency, ratecode, totalrate, incentive, remarks, approved, compcode, userid, id, position, contractamount, contractpositionprem, positionpremdisc, toinsertion, barter);
        }
    }

    [Ajax.AjaxMethod]
    public DataSet chekmod(string compcode, string dealno)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();
            ds = binduom.modchek(compcode, dealno);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
                ds = binduom.modchek(compcode, dealno);
            }
            else
            {
                  NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
                  ds = binduom.modchek(compcode, dealno);

            }
        return ds;
    }

    [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.Read)]
    public DataSet bindcontarctname(string compcode, string contaract)
    {
        DataSet dsret = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract binduom = new NewAdbooking.Classes.Contract();

            dsret = binduom.getcontract(compcode, contaract);

        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract binduom = new NewAdbooking.classesoracle.Contract();
            dsret = binduom.getcontract(compcode, contaract);
        }
        else
        {
            NewAdbooking.classmysql.Contract binduom = new NewAdbooking.classmysql.Contract();
            dsret = binduom.getcontract(compcode, contaract);
        }

        return dsret;
    }
    private void fillPubCenter()
    {
        DataSet ds;
        drpcenter.Items.Clear();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {

            NewAdbooking.Classes.login logindetail = new NewAdbooking.Classes.login();

            ds = logindetail.getPubCenter();
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
                NewAdbooking.classesoracle.login logindetail = new NewAdbooking.classesoracle.login();
                ds = logindetail.getPubCenter();
            }
            else
            {
                NewAdbooking.classmysql.login logindetail = new NewAdbooking.classmysql.login();
                ds = logindetail.getPubCenter();
            }

        ListItem li1;
        li1 = new ListItem();
        li1.Text = "Select Center";
        li1.Value = "0";
        li1.Selected = true;
        drpcenter.Items.Add(li1);

        int i;
        for (i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ListItem li;
            li = new ListItem();
            li.Text = ds.Tables[0].Rows[i].ItemArray[1].ToString();
            li.Value = ds.Tables[0].Rows[i].ItemArray[0].ToString();
            drpcenter.Items.Add(li);
        }

    }


    [Ajax.AjaxMethod]
    public DataSet pagebindpremium_A_detail(string compcode, string prem)
    {
        DataSet ds1 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindrate = new NewAdbooking.Classes.Contract();
            ds1 = bindrate.pagepremiumbind(compcode, prem);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract bindrate = new NewAdbooking.classesoracle.Contract();
            ds1 = bindrate.pagepremiumbind(compcode, prem);
        }

        return ds1;
    }

    [Ajax.AjaxMethod]
    public DataSet pagebindpremium(string compcode, string Premcode)
    {
        DataSet ds1 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.Contract bindrate = new NewAdbooking.Classes.Contract();
            ds1 = bindrate.getposprem(compcode, Premcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.Contract bindrate = new NewAdbooking.classesoracle.Contract();
            ds1 = bindrate.getposprem(compcode, Premcode);
        }

        return ds1;
    }
    [Ajax.AjaxMethod]
    public DataSet getstatuspaymodeAgency(string compcode, string agency)
    {
        DataSet ds1 = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster bindrate = new NewAdbooking.Classes.BookingMaster();
            ds1 = bindrate.getstatuspaymodeAgency(agency, compcode);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster bindrate = new NewAdbooking.classesoracle.BookingMaster();
            ds1 = bindrate.getstatuspaymodeAgency(agency, compcode);
        }
        else
        {
            NewAdbooking.classmysql.BookingMaster bindrate = new NewAdbooking.classmysql.BookingMaster();
            ds1 = bindrate.getstatuspaymodeAgency(agency, compcode);
        }

        return ds1;
    }
    [Ajax.AjaxMethod]
    public DataSet getSectionCode(string name_p)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster bindopackage = new NewAdbooking.Classes.BookingMaster();
            ds = bindopackage.getSectionCode(name_p);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster bindopackage = new NewAdbooking.classesoracle.BookingMaster();
            ds = bindopackage.getSectionCode(name_p);
        }

        return ds;
    }
    [Ajax.AjaxMethod]
    public DataSet getResourceNo(string name_p)
    {
        DataSet ds = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
            NewAdbooking.Classes.BookingMaster bindopackage = new NewAdbooking.Classes.BookingMaster();
            ds = bindopackage.getResourceNo(name_p);
        }
        else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
        {
            NewAdbooking.classesoracle.BookingMaster bindopackage = new NewAdbooking.classesoracle.BookingMaster();
            ds = bindopackage.getResourceNo(name_p);
        }

        return ds;
    }

    [Ajax.AjaxMethod]
    public string chk_null(string str_decimal)
    {
        string final_decimal = "";
        if (str_decimal == "0.00" || str_decimal == "0.0" || str_decimal == "0")
        {
            final_decimal = "0.00";
        }
        else if (str_decimal.IndexOf(".") > -1)
        {

            double dd = System.Math.Round(Convert.ToDouble(str_decimal), 2);
            string[] oo = dd.ToString().Split('.');
            if (oo.Length == 1)
                final_decimal = dd.ToString() + ".00";
            else if (oo[1].Length == 1)
                final_decimal = dd.ToString() + "0";
            else
                final_decimal = dd.ToString();
        }
        else
        {
            if (str_decimal != "")
            {
                final_decimal = Convert.ToDouble(str_decimal).ToString("F2");
            }
            else
                final_decimal = "0.00";
        }
        return final_decimal;
    }

    [Ajax.AjaxMethod]
    public void btnSavecall(string compcod, string userid, string dealno,string quotation)
    {
        if (quotation == "Y")
        {
            DataSet ds1 = new DataSet();
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.Contract bind = new NewAdbooking.Classes.Contract();
                ds1 = bind.getmailheader(compcod, userid, dealno);
               // ds1 = bind.getmailheader(hiddencompcode.Value, hiddenuserid.Value, "CM1157");
            }
          //  else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
          //  {
        //        NewAdbooking.classesoracle.Contract bindrate = new NewAdbooking.classesoracle.Contract();
         //       ds1 = bindrate.pagepremiumbind(compcode, prem);
         //   }

            DataSet ds2 = new DataSet();
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
            {
                NewAdbooking.Classes.Contract bind = new NewAdbooking.Classes.Contract();
                ds2 = bind.getmaildetail(compcod, userid, dealno);
                //ds2 = bind.getmaildetail(hiddencompcode.Value, hiddenuserid.Value, "CM1157");
            }
            //else if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            //{
            //    NewAdbooking.classesoracle.Contract bindrate = new NewAdbooking.classesoracle.Contract();
            //    ds2 = bindrate.pagepremiumbind(compcode, prem);
            //}

            DataSet objdat1 = new DataSet();
            // Read in the XML file
            string datapath = (Server.MapPath("XML/dealmailbody.xml")).Replace("ajax\\", "");
          //  datapath.Replace("ajax\\","");
            objdat1.ReadXml(datapath);


            string mailbody = "<table width='100%' cellspacing='0' cellpadding='0' border='1'>";
            mailbody = mailbody + "<tr><td width=\"28%\" align='left' style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[0].ToString() + "</b></td>";
            mailbody = mailbody + "<td align='left' colspan='3'style='font-family:verdana;font-size:12'>" + chkvalue(Convert.ToDateTime(ds1.Tables[0].Rows[0].ItemArray[0].ToString()).ToShortDateString()) + "</td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\" align='left' style='font-family:verdana;font-size:14'><label id=\"lblclntnam\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[1].ToString() + "</b></label></td><td align=\"left\" colspan=\"3\">";
            mailbody = mailbody + "<label id=\"lblclntnam1\" style='font-family:verdana;font-size:12'\" >" + chkvalue(ds1.Tables[0].Rows[0].ItemArray[1].ToString()) + "</label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\" align='left' style='font-family:verdana;font-size:12'><label id=\"lblcompnam\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[2].ToString() + "</b></label></td><td align=\"left\"  colspan=\"3\">";
            mailbody = mailbody + "<label id=\"lblcompnam1\" style='font-family:verdana;font-size:12'>" + chkvalue(ds1.Tables[0].Rows[0].ItemArray[2].ToString()) + "</label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\" align='left' style='font-family:verdana;font-size:12'><label id=\"lblsub\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[3].ToString() + "</b></label></td><td align=\"left\" colspan=\"3\">";
            mailbody = mailbody + "<label id=\"lblsub1\" style='font-family:verdana;font-size:12'>" + chkvalue(ds1.Tables[0].Rows[0].ItemArray[3].ToString()) + "</label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\" align='left' style='font-family:verdana;font-size:12'><b>" + objdat1.Tables[0].Rows[0].ItemArray[4].ToString() + "</b></td>";
            mailbody = mailbody + "<td style='font-family:verdana;font-size:14'>" + objdat1.Tables[0].Rows[0].ItemArray[5].ToString() + "<label id=\"lbltel\" style='font-family:verdana;font-size:12'>" + chkvalue(ds1.Tables[0].Rows[0].ItemArray[4].ToString()) + "</label></td>";
            mailbody = mailbody + "<td style='font-family:verdana;font-size:14'>" + objdat1.Tables[0].Rows[0].ItemArray[6].ToString() + "<label id=\"lblfax\" style='font-family:verdana;font-size:12'>" + chkvalue(ds1.Tables[0].Rows[0].ItemArray[5].ToString()) + "</label></td>";
            mailbody = mailbody + "<td style=\" font-size:'14px';\">Cell:<label id=\"lblfax1\" style='font-family:verdana;font-size:12'>018414084:</label></td>";
            mailbody = mailbody + "</tr><tr><td><label id=\"lblsub\" style=\" font-size:'12px';\"></label></td><td align=\"left\" colspan=\"3\" style='font-family:verdana;font-size:14'>";
            mailbody = mailbody + objdat1.Tables[0].Rows[0].ItemArray[7].ToString() + ":<label id=\"lblmail1\" style=\" font-size:'12px';\">" + chkvalue(ds1.Tables[0].Rows[0].ItemArray[6].ToString()) + "</label></td>";
            mailbody = mailbody + "</tr></table><u><label id=\"lblquote\" style='font-family:verdana;font-size:12'><b>" + objdat1.Tables[0].Rows[0].ItemArray[8].ToString() + "</b></label></u></br>";
            mailbody = mailbody + "<label id=\"lblquote1\" style='font-family:verdana;font-size:12'><b>" + objdat1.Tables[0].Rows[0].ItemArray[9].ToString() + "</b></label>";
            mailbody = mailbody + "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"1\">";
            mailbody = mailbody + "<tr><td><label id=\"lblcolor\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[10].ToString() + "</label></td>";
            mailbody = mailbody + "<td><label id=\"lblprice\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[11].ToString() + "</b></label></td>";
            mailbody = mailbody + "<td><label id=\"lblpub\" style='font-family:verdana;font-size:14'><b>"+ objdat1.Tables[0].Rows[0].ItemArray[12].ToString() + "</b></label></td>";
            mailbody = mailbody + "<td><label id=\"lblpubdat\" style='font-family:verdana;font-size:14'><b>"+ objdat1.Tables[0].Rows[0].ItemArray[13].ToString() + "</b></label></td>";
            mailbody = mailbody + "<td><label id=\"lbltotal\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[24].ToString() + "</b></label></td></tr>";

            if (ds2.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds2.Tables[0].Rows.Count; i++)
                {

                    mailbody = mailbody + "<tr><td><label id=\"lblinserts\" style='font-family:verdana;font-size:12'>" + chkvalue(ds2.Tables[0].Rows[i].ItemArray[0].ToString()) + "</label></td>";
                    mailbody = mailbody + "<td><label id=\"lblfulcol\" style='font-family:verdana;font-size:12'>" + chkvalue(ds2.Tables[0].Rows[i].ItemArray[1].ToString()) + "</label></td>";
                    mailbody = mailbody + "<td><label id=\"lblpub1\" style='font-family:verdana;font-size:12'>" + chkvalue(ds2.Tables[0].Rows[i].ItemArray[3].ToString()) + "</label></td>";
                    mailbody = mailbody + "<td><label id=\"lblpubdat1\" style='font-family:verdana;font-size:12'>" + chkvalue(ds2.Tables[0].Rows[i].ItemArray[4].ToString()) + "</label></td>";
                    mailbody = mailbody + "<td><label id=\"lbltotal1\" style='font-family:verdana;font-size:12'>" + chkvalue(ds2.Tables[0].Rows[i].ItemArray[5].ToString()) + "</label></td>";
                }
            }

            mailbody = mailbody + "</tr><tr><td><label id=\"lblinserts2\" style='font-family:verdana;font-size:12'>A3 Windhoek only</label></td>";
            mailbody = mailbody + "<td><label id=\"lblfulcol2\" style='font-family:verdana;font-size:12'>&nbsp;</label></td>";
            mailbody = mailbody + "<td><label id=\"lblpub2\" style=\" font-size:'12px';\">&nbsp;</label></td>";
            mailbody = mailbody + "<td><label id=\"lblpubdat2\" style='font-family:verdana;font-size:12'>Tuesday</label></td>";
            mailbody = mailbody + "<td><label id=\"lbltotal2\" style=\" font-size:'12px';\"></label>&nbsp;</td>";
            mailbody = mailbody + "</tr><tr><td colspan=\"5\"><label id=\"lblbop\" style='font-family:verdana;font-size:12'><b>" + objdat1.Tables[0].Rows[0].ItemArray[14].ToString() + "</b></label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\"><label id=\"lblsig\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[15].ToString() + "</b></label></td>";
            mailbody = mailbody + "<td colspan=\"3\"><label id=\"lblsig2\" style=\" font-size:'12px';\">&nbsp;</label></td>";
            mailbody = mailbody + "</tr></table>";
            mailbody = mailbody + "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" >";
            mailbody = mailbody + "<tr><td>&nbsp;</td></tr>";
            mailbody = mailbody + "<tr><td><label id=\"lblthank\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[16].ToString() + "</b></label></td>";
            mailbody = mailbody + "</tr><tr><td>&nbsp;</td></tr>";
            mailbody = mailbody + "<tr><td>__________________________</td></tr>";
            mailbody = mailbody + "<tr><td height=\"50px\"><label id=\"lbladd1\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[17].ToString() + "</b></label></td></tr>";
            mailbody = mailbody + "</table>";
            mailbody = mailbody + "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"1\">";
            mailbody = mailbody + "<tr><td colspan=\"2\" ><label id=\"lbldet\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[18].ToString() + "</b></label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\"><label id=\"lblacnt\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[19].ToString() + "</b></label></td><td>";
            mailbody = mailbody + "<label id=\"lblacnt1\" style='font-family:verdana;font-size:12'>" + objdat1.Tables[0].Rows[0].ItemArray[26].ToString() + "</label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\"><label id=\"lblbank\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[20].ToString() + "</b></label></td><td>";
            mailbody = mailbody + "<label id=\"lblbank1\" style='font-family:verdana;font-size:12'>" + objdat1.Tables[0].Rows[0].ItemArray[27].ToString() + "</label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\"><label id=\"lblacntno\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[21].ToString() + "</b></label></td><td>";
            mailbody = mailbody + "<label id=\"lblacntno1\" style='font-family:verdana;font-size:12'>" + objdat1.Tables[0].Rows[0].ItemArray[28].ToString() + "</label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\"><label id=\"lblbranch\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[22].ToString() + "</b></label></td><td>";
            mailbody = mailbody + "<label id=\"lblbranch1\" style='font-family:verdana;font-size:12'>" + objdat1.Tables[0].Rows[0].ItemArray[29].ToString() + "</label></td>";
            mailbody = mailbody + "</tr><tr><td width=\"28%\"><label id=\"lblactyp\" style='font-family:verdana;font-size:14'><b>" + objdat1.Tables[0].Rows[0].ItemArray[23].ToString() + "</b></label></td><td>";
            mailbody = mailbody + "<label id=\"lblactyp1\" style='font-family:verdana;font-size:12'>" + objdat1.Tables[0].Rows[0].ItemArray[30].ToString() + "</label></td>";
            mailbody = mailbody + "</tr></table>";

       //     MailMessage msgMail = new MailMessage();
       //     msgMail.To = "avinash41789@gmail.com";
       //     //    if (dsxml.Tables[0].Rows[0].ItemArray[1].ToString() != "")
       //     //        msgMail.Cc = dsxml.Tables[0].Rows[0].ItemArray[1].ToString();
       //     //    msgMail.From = dsxml.Tables[0].Rows[0].ItemArray[0].ToString();
       //     msgMail.From = "avinash_kumar409@yahoo.co.in";
       //     msgMail.BodyFormat = MailFormat.Html;
       //     //    msgMail.Bcc="susmita.d@creativebpo.com";
       // //    if (appstatus == "N")
       //         msgMail.Subject = "got ur mail";
       // //    else
       ////         msgMail.Subject = dsxml.Tables[0].Rows[0].ItemArray[3].ToString();
       //     msgMail.Body = mailbody;
       //     SmtpMail.SmtpServer = "192.168.5.128";
       //     SmtpMail.Send(msgMail);

           


            MailMessage objMailMessage = new MailMessage();
            objMailMessage = new MailMessage();
            objMailMessage.To.Add("avinash41789@gmail.com");
            objMailMessage.Subject = "Regarding Request";
            objMailMessage.From = new MailAddress("avinash_kumar409@yahoo.co.in");// http://"+ipaddres+"/tverp/tv_car_approval.aspx?uid=" + uid + "&pstdate=" + stdate + "&sttme=" + sttme + " ";
            //objMailMessage.IsBodyHtml = true;
             string str = "";
            str = "Hi, This is a request";
           
            //objMailMessage.Body = "Hi, This is a request for mail.   <a href=" + url + ">http://" + ipaddres + "/tverp/tv_car_approval.aspx?uid=" + uid + "&pstdate=" + refid + "&mailto=" + mailto_indv + " </a> ";//&sttme=" + sttme + "
            //192.168.5.148
            objMailMessage.IsBodyHtml =true;
            objMailMessage.Body = mailbody;
            SmtpClient smtp = new SmtpClient("192.168.5.128");//192.168.1.99 // "202.63.107.91"
            smtp.DeliveryMethod = SmtpDeliveryMethod.PickupDirectoryFromIis;
            smtp.Send(objMailMessage);

        }
    }
    public string chkvalue(string val)
    {
        if (val == null || val == "")
            return "&nbsp;";
        else
            return val;
    }
    [Ajax.AjaxMethod]
    public DataSet chkwalkinClient(string client, string compcode)
    {
        DataSet dcl = new DataSet();
        if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "sql")
        {
           // FourCPlus.AdBooking.BookingMaster.Sql.BookingMaster chkclient = new FourCPlus.AdBooking.BookingMaster.Sql.BookingMaster();

            NewAdbooking.Classes.BookingMaster chkclient = new NewAdbooking.Classes.BookingMaster(); 
            dcl = chkclient.forwalkclient(client, compcode);
        }
        else
            if (ConfigurationSettings.AppSettings["ConnectionType"].ToString() == "orcl")
            {
               // FourCPlus.AdBooking.BookingMaster.Oracle.BookingMaster chkclient = new FourCPlus.AdBooking.BookingMaster.Oracle.BookingMaster();
                NewAdbooking.classesoracle.BookingMaster chkclient = new NewAdbooking.classesoracle.BookingMaster();
                dcl = chkclient.forwalkclient(client, compcode);

            }
            else
            {
                NewAdbooking.classmysql.BookingMaster chkclient = new NewAdbooking.classmysql.BookingMaster();

                dcl = chkclient.forwalkclient(client, compcode);

            }
        return dcl;
    }
}


